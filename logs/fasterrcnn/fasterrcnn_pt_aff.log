2025/05/13 19:56:35 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1859467158
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1859467158
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 19:56:35 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 19:56:36 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 19:56:36 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 19:56:37 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 19:56:37 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 19:56:37 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 19:56:37 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 19:56:37 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 19:56:37 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 19:56:37 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 19:57:00 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:31:54  time: 0.4580  data_time: 0.0914  memory: 4359  loss: 2.3698  loss_rpn_cls: 0.5746  loss_rpn_bbox: 0.1942  loss_cls: 0.9234  acc: 79.3457  loss_bbox: 0.6776
2025/05/13 19:57:17 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:27:54  time: 0.3530  data_time: 0.0025  memory: 4359  loss: 1.3920  loss_rpn_cls: 0.0954  loss_rpn_bbox: 0.1597  loss_cls: 0.5685  acc: 81.6406  loss_bbox: 0.5684
2025/05/13 19:57:32 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 19:57:42 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:57:43 - mmengine - INFO - bbox_mAP_copypaste: 0.138 0.279 0.114 -1.000 0.061 0.153
2025/05/13 19:57:43 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1380  coco/bbox_mAP_50: 0.2790  coco/bbox_mAP_75: 0.1140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0610  coco/bbox_mAP_l: 0.1530  data_time: 0.1646  time: 0.2075
2025/05/13 19:57:44 - mmengine - INFO - The best checkpoint with 0.1380 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 19:58:02 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:25:42  time: 0.3602  data_time: 0.0050  memory: 4359  loss: 1.1364  loss_rpn_cls: 0.0773  loss_rpn_bbox: 0.1489  loss_cls: 0.4449  acc: 86.7188  loss_bbox: 0.4654
2025/05/13 19:58:20 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:24:58  time: 0.3517  data_time: 0.0023  memory: 4359  loss: 1.0881  loss_rpn_cls: 0.0655  loss_rpn_bbox: 0.1444  loss_cls: 0.4228  acc: 86.4746  loss_bbox: 0.4554
2025/05/13 19:58:34 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 19:58:36 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:58:38 - mmengine - INFO - bbox_mAP_copypaste: 0.213 0.436 0.162 -1.000 0.150 0.228
2025/05/13 19:58:38 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2130  coco/bbox_mAP_50: 0.4360  coco/bbox_mAP_75: 0.1620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2280  data_time: 0.0015  time: 0.0377
2025/05/13 19:58:38 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 19:58:38 - mmengine - INFO - The best checkpoint with 0.2130 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 19:58:56 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:00  time: 0.3573  data_time: 0.0051  memory: 4359  loss: 1.0573  loss_rpn_cls: 0.0701  loss_rpn_bbox: 0.1464  loss_cls: 0.3925  acc: 86.1328  loss_bbox: 0.4484
2025/05/13 19:59:14 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:23:32  time: 0.3514  data_time: 0.0023  memory: 4359  loss: 1.0769  loss_rpn_cls: 0.0733  loss_rpn_bbox: 0.1532  loss_cls: 0.3980  acc: 84.6680  loss_bbox: 0.4525
2025/05/13 19:59:28 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 19:59:30 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:59:32 - mmengine - INFO - bbox_mAP_copypaste: 0.271 0.532 0.223 -1.000 0.199 0.284
2025/05/13 19:59:32 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2710  coco/bbox_mAP_50: 0.5320  coco/bbox_mAP_75: 0.2230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.2840  data_time: 0.0016  time: 0.0376
2025/05/13 19:59:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 19:59:33 - mmengine - INFO - The best checkpoint with 0.2710 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 19:59:51 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:22:52  time: 0.3595  data_time: 0.0050  memory: 4359  loss: 1.0635  loss_rpn_cls: 0.0691  loss_rpn_bbox: 0.1522  loss_cls: 0.3920  acc: 85.9863  loss_bbox: 0.4503
2025/05/13 20:00:08 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:22:29  time: 0.3513  data_time: 0.0024  memory: 4359  loss: 1.0628  loss_rpn_cls: 0.0652  loss_rpn_bbox: 0.1581  loss_cls: 0.3923  acc: 89.1113  loss_bbox: 0.4471
2025/05/13 20:00:22 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:00:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:00:26 - mmengine - INFO - bbox_mAP_copypaste: 0.373 0.668 0.377 -1.000 0.230 0.402
2025/05/13 20:00:26 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3730  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3770  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.4020  data_time: 0.0015  time: 0.0387
2025/05/13 20:00:26 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 20:00:27 - mmengine - INFO - The best checkpoint with 0.3730 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 20:00:45 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:21:50  time: 0.3577  data_time: 0.0052  memory: 4359  loss: 0.9981  loss_rpn_cls: 0.0621  loss_rpn_bbox: 0.1457  loss_cls: 0.3605  acc: 88.2812  loss_bbox: 0.4299
2025/05/13 20:01:02 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:21:30  time: 0.3531  data_time: 0.0024  memory: 4359  loss: 1.0388  loss_rpn_cls: 0.0661  loss_rpn_bbox: 0.1547  loss_cls: 0.3755  acc: 83.0300  loss_bbox: 0.4425
2025/05/13 20:01:17 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:01:18 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:01:20 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.616 0.328 -1.000 0.211 0.357
2025/05/13 20:01:20 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.6160  coco/bbox_mAP_75: 0.3280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3570  data_time: 0.0015  time: 0.0380
2025/05/13 20:01:38 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:20:54  time: 0.3577  data_time: 0.0048  memory: 4359  loss: 0.9635  loss_rpn_cls: 0.0574  loss_rpn_bbox: 0.1358  loss_cls: 0.3507  acc: 86.4746  loss_bbox: 0.4195
2025/05/13 20:01:56 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:20:34  time: 0.3544  data_time: 0.0023  memory: 4359  loss: 0.9934  loss_rpn_cls: 0.0555  loss_rpn_bbox: 0.1367  loss_cls: 0.3732  acc: 83.6914  loss_bbox: 0.4280
2025/05/13 20:02:10 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:02:12 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:02:13 - mmengine - INFO - bbox_mAP_copypaste: 0.314 0.605 0.279 -1.000 0.205 0.337
2025/05/13 20:02:13 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3140  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.2790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3370  data_time: 0.0017  time: 0.0379
2025/05/13 20:02:31 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:00  time: 0.3590  data_time: 0.0050  memory: 4359  loss: 0.9384  loss_rpn_cls: 0.0514  loss_rpn_bbox: 0.1341  loss_cls: 0.3431  acc: 85.7422  loss_bbox: 0.4098
2025/05/13 20:02:49 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:19:40  time: 0.3535  data_time: 0.0023  memory: 4359  loss: 0.9794  loss_rpn_cls: 0.0575  loss_rpn_bbox: 0.1412  loss_cls: 0.3564  acc: 85.9375  loss_bbox: 0.4244
2025/05/13 20:03:03 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:03:05 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:03:07 - mmengine - INFO - bbox_mAP_copypaste: 0.370 0.695 0.363 -1.000 0.209 0.398
2025/05/13 20:03:07 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3700  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3980  data_time: 0.0017  time: 0.0376
2025/05/13 20:03:11 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:03:24 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:06  time: 0.3543  data_time: 0.0050  memory: 4359  loss: 0.9293  loss_rpn_cls: 0.0537  loss_rpn_bbox: 0.1341  loss_cls: 0.3313  acc: 85.4760  loss_bbox: 0.4102
2025/05/13 20:03:42 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:18:47  time: 0.3564  data_time: 0.0024  memory: 4359  loss: 0.9256  loss_rpn_cls: 0.0534  loss_rpn_bbox: 0.1295  loss_cls: 0.3421  acc: 84.9121  loss_bbox: 0.4006
2025/05/13 20:03:57 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:03:58 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:04:00 - mmengine - INFO - bbox_mAP_copypaste: 0.241 0.468 0.227 -1.000 0.150 0.261
2025/05/13 20:04:00 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.2410  coco/bbox_mAP_50: 0.4680  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2610  data_time: 0.0015  time: 0.0375
2025/05/13 20:04:18 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:14  time: 0.3592  data_time: 0.0049  memory: 4359  loss: 0.8994  loss_rpn_cls: 0.0478  loss_rpn_bbox: 0.1203  loss_cls: 0.3335  acc: 87.6953  loss_bbox: 0.3977
2025/05/13 20:04:36 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:17:56  time: 0.3548  data_time: 0.0022  memory: 4359  loss: 0.8417  loss_rpn_cls: 0.0431  loss_rpn_bbox: 0.1162  loss_cls: 0.3017  acc: 86.9141  loss_bbox: 0.3807
2025/05/13 20:04:50 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:04:52 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:04:53 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.655 0.322 -1.000 0.204 0.367
2025/05/13 20:04:53 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3670  data_time: 0.0015  time: 0.0376
2025/05/13 20:05:11 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:22  time: 0.3587  data_time: 0.0049  memory: 4359  loss: 0.8309  loss_rpn_cls: 0.0418  loss_rpn_bbox: 0.1152  loss_cls: 0.2994  acc: 90.4785  loss_bbox: 0.3745
2025/05/13 20:05:29 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:04  time: 0.3533  data_time: 0.0021  memory: 4359  loss: 0.8403  loss_rpn_cls: 0.0426  loss_rpn_bbox: 0.1132  loss_cls: 0.3028  acc: 88.7695  loss_bbox: 0.3817
2025/05/13 20:05:44 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:05:46 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:05:47 - mmengine - INFO - bbox_mAP_copypaste: 0.365 0.672 0.359 -1.000 0.218 0.392
2025/05/13 20:05:47 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3650  coco/bbox_mAP_50: 0.6720  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3920  data_time: 0.0016  time: 0.0373
2025/05/13 20:06:05 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:32  time: 0.3598  data_time: 0.0050  memory: 4359  loss: 0.8303  loss_rpn_cls: 0.0412  loss_rpn_bbox: 0.1147  loss_cls: 0.3000  acc: 89.5508  loss_bbox: 0.3744
2025/05/13 20:06:23 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:13  time: 0.3546  data_time: 0.0022  memory: 4359  loss: 0.8253  loss_rpn_cls: 0.0436  loss_rpn_bbox: 0.1143  loss_cls: 0.2972  acc: 87.8418  loss_bbox: 0.3703
2025/05/13 20:06:37 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:06:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:06:41 - mmengine - INFO - bbox_mAP_copypaste: 0.369 0.656 0.380 -1.000 0.233 0.398
2025/05/13 20:06:41 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3690  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.3800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2330  coco/bbox_mAP_l: 0.3980  data_time: 0.0015  time: 0.0374
2025/05/13 20:06:59 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:15:41  time: 0.3573  data_time: 0.0050  memory: 4359  loss: 0.8157  loss_rpn_cls: 0.0392  loss_rpn_bbox: 0.1128  loss_cls: 0.2913  acc: 87.9883  loss_bbox: 0.3723
2025/05/13 20:07:16 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:23  time: 0.3569  data_time: 0.0022  memory: 4359  loss: 0.8283  loss_rpn_cls: 0.0394  loss_rpn_bbox: 0.1142  loss_cls: 0.2976  acc: 89.2578  loss_bbox: 0.3771
2025/05/13 20:07:31 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:07:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:07:34 - mmengine - INFO - bbox_mAP_copypaste: 0.362 0.665 0.360 -1.000 0.216 0.390
2025/05/13 20:07:34 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3620  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.3900  data_time: 0.0016  time: 0.0375
2025/05/13 20:07:52 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:14:50  time: 0.3602  data_time: 0.0050  memory: 4359  loss: 0.8189  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.1113  loss_cls: 0.2948  acc: 86.9629  loss_bbox: 0.3723
2025/05/13 20:08:10 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:32  time: 0.3559  data_time: 0.0022  memory: 4359  loss: 0.8113  loss_rpn_cls: 0.0398  loss_rpn_bbox: 0.1129  loss_cls: 0.2902  acc: 88.7207  loss_bbox: 0.3684
2025/05/13 20:08:24 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:08:26 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:08:28 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.658 0.336 -1.000 0.205 0.378
2025/05/13 20:08:28 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.3360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3780  data_time: 0.0015  time: 0.0373
2025/05/13 20:08:46 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:13:59  time: 0.3595  data_time: 0.0049  memory: 4359  loss: 0.8123  loss_rpn_cls: 0.0408  loss_rpn_bbox: 0.1119  loss_cls: 0.2911  acc: 84.6191  loss_bbox: 0.3685
2025/05/13 20:09:04 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:13:41  time: 0.3549  data_time: 0.0024  memory: 4359  loss: 0.7977  loss_rpn_cls: 0.0353  loss_rpn_bbox: 0.1100  loss_cls: 0.2879  acc: 88.2324  loss_bbox: 0.3645
2025/05/13 20:09:18 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:09:20 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:09:21 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.662 0.342 -1.000 0.209 0.382
2025/05/13 20:09:21 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.3420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3820  data_time: 0.0015  time: 0.0376
2025/05/13 20:09:31 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:09:39 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:08  time: 0.3557  data_time: 0.0048  memory: 4359  loss: 0.7999  loss_rpn_cls: 0.0374  loss_rpn_bbox: 0.1104  loss_cls: 0.2879  acc: 90.8203  loss_bbox: 0.3642
2025/05/13 20:09:57 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:12:51  time: 0.3595  data_time: 0.0022  memory: 4359  loss: 0.8163  loss_rpn_cls: 0.0402  loss_rpn_bbox: 0.1126  loss_cls: 0.2899  acc: 87.5000  loss_bbox: 0.3736
2025/05/13 20:10:12 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:10:14 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:10:15 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.662 0.358 -1.000 0.213 0.388
2025/05/13 20:10:15 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.3580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3880  data_time: 0.0016  time: 0.0376
2025/05/13 20:10:33 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:18  time: 0.3551  data_time: 0.0050  memory: 4359  loss: 0.8112  loss_rpn_cls: 0.0388  loss_rpn_bbox: 0.1084  loss_cls: 0.2935  acc: 88.7695  loss_bbox: 0.3705
2025/05/13 20:10:51 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:00  time: 0.3584  data_time: 0.0023  memory: 4359  loss: 0.8123  loss_rpn_cls: 0.0380  loss_rpn_bbox: 0.1133  loss_cls: 0.2945  acc: 86.8164  loss_bbox: 0.3665
2025/05/13 20:11:05 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:11:07 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:11:09 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.664 0.348 -1.000 0.215 0.384
2025/05/13 20:11:09 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0370
2025/05/13 20:11:27 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:27  time: 0.3584  data_time: 0.0050  memory: 4359  loss: 0.8198  loss_rpn_cls: 0.0404  loss_rpn_bbox: 0.1132  loss_cls: 0.2949  acc: 88.5254  loss_bbox: 0.3712
2025/05/13 20:11:44 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:09  time: 0.3525  data_time: 0.0023  memory: 4359  loss: 0.8153  loss_rpn_cls: 0.0384  loss_rpn_bbox: 0.1119  loss_cls: 0.2948  acc: 88.0859  loss_bbox: 0.3702
2025/05/13 20:11:59 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:12:01 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:12:02 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.664 0.348 -1.000 0.211 0.383
2025/05/13 20:12:02 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3830  data_time: 0.0017  time: 0.0375
2025/05/13 20:12:20 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:37  time: 0.3572  data_time: 0.0050  memory: 4359  loss: 0.8061  loss_rpn_cls: 0.0386  loss_rpn_bbox: 0.1094  loss_cls: 0.2898  acc: 90.1367  loss_bbox: 0.3683
2025/05/13 20:12:38 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:19  time: 0.3554  data_time: 0.0023  memory: 4359  loss: 0.8261  loss_rpn_cls: 0.0442  loss_rpn_bbox: 0.1131  loss_cls: 0.2958  acc: 88.0371  loss_bbox: 0.3731
2025/05/13 20:12:52 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:12:54 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:12:56 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.661 0.350 -1.000 0.214 0.384
2025/05/13 20:12:56 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3840  data_time: 0.0016  time: 0.0375
2025/05/13 20:13:14 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:09:46  time: 0.3593  data_time: 0.0049  memory: 4359  loss: 0.8101  loss_rpn_cls: 0.0372  loss_rpn_bbox: 0.1083  loss_cls: 0.2944  acc: 89.2090  loss_bbox: 0.3703
2025/05/13 20:13:31 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:28  time: 0.3550  data_time: 0.0022  memory: 4359  loss: 0.8095  loss_rpn_cls: 0.0366  loss_rpn_bbox: 0.1131  loss_cls: 0.2898  acc: 89.4531  loss_bbox: 0.3700
2025/05/13 20:13:46 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:13:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:13:49 - mmengine - INFO - bbox_mAP_copypaste: 0.362 0.663 0.363 -1.000 0.219 0.390
2025/05/13 20:13:49 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3620  coco/bbox_mAP_50: 0.6630  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3900  data_time: 0.0016  time: 0.0375
2025/05/13 20:14:07 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:08:56  time: 0.3616  data_time: 0.0050  memory: 4359  loss: 0.8177  loss_rpn_cls: 0.0412  loss_rpn_bbox: 0.1112  loss_cls: 0.2976  acc: 87.8418  loss_bbox: 0.3677
2025/05/13 20:14:25 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:38  time: 0.3579  data_time: 0.0023  memory: 4359  loss: 0.8055  loss_rpn_cls: 0.0369  loss_rpn_bbox: 0.1106  loss_cls: 0.2913  acc: 89.8926  loss_bbox: 0.3667
2025/05/13 20:14:40 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:14:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:14:43 - mmengine - INFO - bbox_mAP_copypaste: 0.348 0.662 0.329 -1.000 0.202 0.376
2025/05/13 20:14:43 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3480  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.3290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2020  coco/bbox_mAP_l: 0.3760  data_time: 0.0017  time: 0.0376
2025/05/13 20:15:01 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:05  time: 0.3602  data_time: 0.0050  memory: 4359  loss: 0.7961  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1092  loss_cls: 0.2860  acc: 87.5000  loss_bbox: 0.3635
2025/05/13 20:15:19 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:07:47  time: 0.3547  data_time: 0.0022  memory: 4359  loss: 0.8062  loss_rpn_cls: 0.0373  loss_rpn_bbox: 0.1101  loss_cls: 0.2863  acc: 88.9160  loss_bbox: 0.3725
2025/05/13 20:15:33 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:15:35 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:15:37 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.661 0.354 -1.000 0.213 0.386
2025/05/13 20:15:37 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3860  data_time: 0.0017  time: 0.0374
2025/05/13 20:15:51 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:15:54 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:15  time: 0.3574  data_time: 0.0051  memory: 4359  loss: 0.7996  loss_rpn_cls: 0.0370  loss_rpn_bbox: 0.1094  loss_cls: 0.2826  acc: 92.2852  loss_bbox: 0.3706
2025/05/13 20:16:12 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:06:57  time: 0.3572  data_time: 0.0022  memory: 4359  loss: 0.8236  loss_rpn_cls: 0.0400  loss_rpn_bbox: 0.1126  loss_cls: 0.2991  acc: 86.3770  loss_bbox: 0.3719
2025/05/13 20:16:27 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:16:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:16:30 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.663 0.349 -1.000 0.215 0.384
2025/05/13 20:16:30 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6630  coco/bbox_mAP_75: 0.3490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0375
2025/05/13 20:16:48 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:24  time: 0.3567  data_time: 0.0048  memory: 4359  loss: 0.8187  loss_rpn_cls: 0.0404  loss_rpn_bbox: 0.1117  loss_cls: 0.2968  acc: 89.6973  loss_bbox: 0.3698
2025/05/13 20:17:06 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:07  time: 0.3542  data_time: 0.0022  memory: 4359  loss: 0.8085  loss_rpn_cls: 0.0376  loss_rpn_bbox: 0.1112  loss_cls: 0.2865  acc: 90.8691  loss_bbox: 0.3733
2025/05/13 20:17:20 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:17:22 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:17:24 - mmengine - INFO - bbox_mAP_copypaste: 0.352 0.660 0.344 -1.000 0.207 0.380
2025/05/13 20:17:24 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3520  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3800  data_time: 0.0016  time: 0.0373
2025/05/13 20:17:42 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:34  time: 0.3575  data_time: 0.0050  memory: 4359  loss: 0.8056  loss_rpn_cls: 0.0367  loss_rpn_bbox: 0.1082  loss_cls: 0.2883  acc: 87.6953  loss_bbox: 0.3723
2025/05/13 20:17:59 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:16  time: 0.3563  data_time: 0.0023  memory: 4359  loss: 0.8050  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1112  loss_cls: 0.2905  acc: 89.2090  loss_bbox: 0.3634
2025/05/13 20:18:14 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:18:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:18:17 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.665 0.343 -1.000 0.212 0.382
2025/05/13 20:18:17 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3820  data_time: 0.0016  time: 0.0389
2025/05/13 20:18:35 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:44  time: 0.3601  data_time: 0.0050  memory: 4359  loss: 0.8011  loss_rpn_cls: 0.0389  loss_rpn_bbox: 0.1112  loss_cls: 0.2868  acc: 86.8652  loss_bbox: 0.3642
2025/05/13 20:18:53 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:26  time: 0.3566  data_time: 0.0022  memory: 4359  loss: 0.7972  loss_rpn_cls: 0.0355  loss_rpn_bbox: 0.1094  loss_cls: 0.2854  acc: 88.2812  loss_bbox: 0.3669
2025/05/13 20:19:07 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:19:09 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:19:11 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.666 0.356 -1.000 0.214 0.387
2025/05/13 20:19:11 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6660  coco/bbox_mAP_75: 0.3560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3870  data_time: 0.0017  time: 0.0374
2025/05/13 20:19:29 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:03:53  time: 0.3609  data_time: 0.0050  memory: 4359  loss: 0.7995  loss_rpn_cls: 0.0406  loss_rpn_bbox: 0.1093  loss_cls: 0.2902  acc: 88.0371  loss_bbox: 0.3594
2025/05/13 20:19:46 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:35  time: 0.3547  data_time: 0.0023  memory: 4359  loss: 0.7991  loss_rpn_cls: 0.0377  loss_rpn_bbox: 0.1097  loss_cls: 0.2863  acc: 92.9199  loss_bbox: 0.3654
2025/05/13 20:20:01 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:20:03 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:20:04 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.669 0.342 -1.000 0.212 0.383
2025/05/13 20:20:04 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3830  data_time: 0.0017  time: 0.0375
2025/05/13 20:20:23 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:03  time: 0.3605  data_time: 0.0051  memory: 4359  loss: 0.7984  loss_rpn_cls: 0.0388  loss_rpn_bbox: 0.1079  loss_cls: 0.2841  acc: 89.9414  loss_bbox: 0.3676
2025/05/13 20:20:40 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:45  time: 0.3557  data_time: 0.0023  memory: 4359  loss: 0.8242  loss_rpn_cls: 0.0424  loss_rpn_bbox: 0.1134  loss_cls: 0.2961  acc: 89.3066  loss_bbox: 0.3723
2025/05/13 20:20:55 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:20:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:20:58 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.667 0.344 -1.000 0.211 0.382
2025/05/13 20:20:58 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6670  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3820  data_time: 0.0016  time: 0.0375
2025/05/13 20:21:16 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:13  time: 0.3595  data_time: 0.0049  memory: 4359  loss: 0.8003  loss_rpn_cls: 0.0379  loss_rpn_bbox: 0.1106  loss_cls: 0.2879  acc: 88.6230  loss_bbox: 0.3639
2025/05/13 20:21:34 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:55  time: 0.3564  data_time: 0.0023  memory: 4359  loss: 0.8083  loss_rpn_cls: 0.0406  loss_rpn_bbox: 0.1120  loss_cls: 0.2881  acc: 90.4297  loss_bbox: 0.3676
2025/05/13 20:21:48 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:21:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:21:52 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.661 0.332 -1.000 0.206 0.376
2025/05/13 20:21:52 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3760  data_time: 0.0016  time: 0.0373
2025/05/13 20:22:10 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:22  time: 0.3581  data_time: 0.0051  memory: 4359  loss: 0.8040  loss_rpn_cls: 0.0378  loss_rpn_bbox: 0.1108  loss_cls: 0.2878  acc: 91.4062  loss_bbox: 0.3675
2025/05/13 20:22:10 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:22:27 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:04  time: 0.3563  data_time: 0.0023  memory: 4359  loss: 0.8022  loss_rpn_cls: 0.0350  loss_rpn_bbox: 0.1108  loss_cls: 0.2908  acc: 89.5508  loss_bbox: 0.3655
2025/05/13 20:22:42 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:22:44 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:22:45 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.665 0.327 -1.000 0.205 0.375
2025/05/13 20:22:45 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3750  data_time: 0.0016  time: 0.0371
2025/05/13 20:23:03 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:32  time: 0.3591  data_time: 0.0050  memory: 4359  loss: 0.7866  loss_rpn_cls: 0.0361  loss_rpn_bbox: 0.1095  loss_cls: 0.2802  acc: 88.4766  loss_bbox: 0.3608
2025/05/13 20:23:21 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:14  time: 0.3543  data_time: 0.0023  memory: 4359  loss: 0.8017  loss_rpn_cls: 0.0371  loss_rpn_bbox: 0.1085  loss_cls: 0.2902  acc: 88.9648  loss_bbox: 0.3659
2025/05/13 20:23:35 - mmengine - INFO - Exp name: fasterrcnn_pt_aff_20250513_195631
2025/05/13 20:23:35 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 20:23:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:23:40 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.667 0.355 -1.000 0.215 0.387
2025/05/13 20:23:40 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6670  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3870  data_time: 0.0014  time: 0.0371
