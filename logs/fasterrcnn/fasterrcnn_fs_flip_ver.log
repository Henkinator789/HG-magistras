2025/05/19 12:11:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 909071157
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 909071157
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 12:11:41 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(direction='vertical', prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(direction='vertical', prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 12:11:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 12:11:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 12:11:43 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 12:11:43 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 12:11:43 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 12:11:43 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 12:11:43 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 12:11:43 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 12:12:06 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:25  time: 0.4655  data_time: 0.0904  memory: 4360  loss: 2.2456  loss_rpn_cls: 0.6051  loss_rpn_bbox: 0.2523  loss_cls: 0.8716  acc: 75.0000  loss_bbox: 0.5166
2025/05/19 12:12:24 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:48  time: 0.3714  data_time: 0.0023  memory: 4360  loss: 1.9429  loss_rpn_cls: 0.3538  loss_rpn_bbox: 0.2329  loss_cls: 0.6824  acc: 79.2969  loss_bbox: 0.6738
2025/05/19 12:12:40 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:12:50 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:12:51 - mmengine - INFO - bbox_mAP_copypaste: 0.102 0.246 0.049 -1.000 0.013 0.115
2025/05/19 12:12:51 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1020  coco/bbox_mAP_50: 0.2460  coco/bbox_mAP_75: 0.0490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0130  coco/bbox_mAP_l: 0.1150  data_time: 0.1635  time: 0.2038
2025/05/19 12:12:52 - mmengine - INFO - The best checkpoint with 0.1020 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 12:13:11 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:40  time: 0.3716  data_time: 0.0049  memory: 4361  loss: 1.5526  loss_rpn_cls: 0.1645  loss_rpn_bbox: 0.1956  loss_cls: 0.5459  acc: 81.4453  loss_bbox: 0.6467
2025/05/19 12:13:29 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:51  time: 0.3609  data_time: 0.0023  memory: 4361  loss: 1.4886  loss_rpn_cls: 0.1424  loss_rpn_bbox: 0.1980  loss_cls: 0.5271  acc: 81.5430  loss_bbox: 0.6210
2025/05/19 12:13:44 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:13:45 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:13:47 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.637 0.280 -1.000 0.192 0.352
2025/05/19 12:13:47 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.6370  coco/bbox_mAP_75: 0.2800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1920  coco/bbox_mAP_l: 0.3520  data_time: 0.0018  time: 0.0378
2025/05/19 12:13:47 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 12:13:48 - mmengine - INFO - The best checkpoint with 0.3260 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 12:14:06 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:47  time: 0.3645  data_time: 0.0051  memory: 4361  loss: 1.3108  loss_rpn_cls: 0.1018  loss_rpn_bbox: 0.1736  loss_cls: 0.4766  acc: 81.3872  loss_bbox: 0.5589
2025/05/19 12:14:24 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:17  time: 0.3604  data_time: 0.0023  memory: 4361  loss: 1.2159  loss_rpn_cls: 0.0873  loss_rpn_bbox: 0.1621  loss_cls: 0.4348  acc: 86.9141  loss_bbox: 0.5316
2025/05/19 12:14:39 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:14:41 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:14:42 - mmengine - INFO - bbox_mAP_copypaste: 0.385 0.675 0.405 -1.000 0.259 0.411
2025/05/19 12:14:42 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3850  coco/bbox_mAP_50: 0.6750  coco/bbox_mAP_75: 0.4050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2590  coco/bbox_mAP_l: 0.4110  data_time: 0.0015  time: 0.0373
2025/05/19 12:14:42 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 12:14:43 - mmengine - INFO - The best checkpoint with 0.3850 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 12:15:01 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:31  time: 0.3658  data_time: 0.0049  memory: 4361  loss: 1.1494  loss_rpn_cls: 0.0859  loss_rpn_bbox: 0.1517  loss_cls: 0.4257  acc: 83.4473  loss_bbox: 0.4860
2025/05/19 12:15:19 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:07  time: 0.3625  data_time: 0.0024  memory: 4361  loss: 1.2201  loss_rpn_cls: 0.0882  loss_rpn_bbox: 0.1610  loss_cls: 0.4671  acc: 83.3496  loss_bbox: 0.5039
2025/05/19 12:15:34 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:15:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:15:37 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.628 0.388 -1.000 0.204 0.388
2025/05/19 12:15:37 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6280  coco/bbox_mAP_75: 0.3880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3880  data_time: 0.0016  time: 0.0375
2025/05/19 12:15:55 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:25  time: 0.3594  data_time: 0.0049  memory: 4361  loss: 1.0553  loss_rpn_cls: 0.0714  loss_rpn_bbox: 0.1416  loss_cls: 0.3799  acc: 88.4277  loss_bbox: 0.4624
2025/05/19 12:16:13 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:03  time: 0.3607  data_time: 0.0023  memory: 4361  loss: 1.0629  loss_rpn_cls: 0.0711  loss_rpn_bbox: 0.1422  loss_cls: 0.3896  acc: 83.3496  loss_bbox: 0.4600
2025/05/19 12:16:28 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:16:30 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:16:31 - mmengine - INFO - bbox_mAP_copypaste: 0.406 0.704 0.434 -1.000 0.217 0.436
2025/05/19 12:16:31 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4060  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.4340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.4360  data_time: 0.0016  time: 0.0376
2025/05/19 12:16:31 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 12:16:32 - mmengine - INFO - The best checkpoint with 0.4060 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 12:16:50 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:27  time: 0.3697  data_time: 0.0049  memory: 4361  loss: 1.0494  loss_rpn_cls: 0.0661  loss_rpn_bbox: 0.1372  loss_cls: 0.3870  acc: 84.8907  loss_bbox: 0.4591
2025/05/19 12:17:08 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:06  time: 0.3587  data_time: 0.0024  memory: 4361  loss: 0.9594  loss_rpn_cls: 0.0606  loss_rpn_bbox: 0.1281  loss_cls: 0.3433  acc: 88.7207  loss_bbox: 0.4274
2025/05/19 12:17:23 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:17:25 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:17:26 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.627 0.348 -1.000 0.240 0.367
2025/05/19 12:17:26 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6270  coco/bbox_mAP_75: 0.3480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2400  coco/bbox_mAP_l: 0.3670  data_time: 0.0018  time: 0.0375
2025/05/19 12:17:45 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:29  time: 0.3633  data_time: 0.0048  memory: 4361  loss: 0.9647  loss_rpn_cls: 0.0561  loss_rpn_bbox: 0.1250  loss_cls: 0.3613  acc: 88.5686  loss_bbox: 0.4223
2025/05/19 12:18:03 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:10  time: 0.3609  data_time: 0.0024  memory: 4361  loss: 0.9491  loss_rpn_cls: 0.0541  loss_rpn_bbox: 0.1279  loss_cls: 0.3445  acc: 88.1836  loss_bbox: 0.4225
2025/05/19 12:18:17 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:18:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:18:21 - mmengine - INFO - bbox_mAP_copypaste: 0.426 0.712 0.466 -1.000 0.268 0.456
2025/05/19 12:18:21 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4260  coco/bbox_mAP_50: 0.7120  coco/bbox_mAP_75: 0.4660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2680  coco/bbox_mAP_l: 0.4560  data_time: 0.0017  time: 0.0370
2025/05/19 12:18:21 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 12:18:22 - mmengine - INFO - The best checkpoint with 0.4260 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/19 12:18:27 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:18:40 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:35  time: 0.3693  data_time: 0.0050  memory: 4361  loss: 0.8836  loss_rpn_cls: 0.0459  loss_rpn_bbox: 0.1212  loss_cls: 0.3114  acc: 85.5957  loss_bbox: 0.4051
2025/05/19 12:18:58 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:16  time: 0.3625  data_time: 0.0024  memory: 4360  loss: 0.8890  loss_rpn_cls: 0.0481  loss_rpn_bbox: 0.1185  loss_cls: 0.3209  acc: 86.8652  loss_bbox: 0.4016
2025/05/19 12:19:13 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:19:15 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:19:16 - mmengine - INFO - bbox_mAP_copypaste: 0.449 0.756 0.494 -1.000 0.299 0.471
2025/05/19 12:19:16 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4490  coco/bbox_mAP_50: 0.7560  coco/bbox_mAP_75: 0.4940  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4710  data_time: 0.0016  time: 0.0369
2025/05/19 12:19:16 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/19 12:19:17 - mmengine - INFO - The best checkpoint with 0.4490 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/19 12:19:36 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:42  time: 0.3696  data_time: 0.0049  memory: 4361  loss: 0.7967  loss_rpn_cls: 0.0381  loss_rpn_bbox: 0.1050  loss_cls: 0.2815  acc: 90.8691  loss_bbox: 0.3722
2025/05/19 12:19:54 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:24  time: 0.3673  data_time: 0.0024  memory: 4360  loss: 0.7876  loss_rpn_cls: 0.0378  loss_rpn_bbox: 0.1034  loss_cls: 0.2787  acc: 90.3809  loss_bbox: 0.3677
2025/05/19 12:20:09 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:20:11 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:20:12 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.752 0.533 -1.000 0.305 0.489
2025/05/19 12:20:12 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5330  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4890  data_time: 0.0017  time: 0.0366
2025/05/19 12:20:12 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/19 12:20:13 - mmengine - INFO - The best checkpoint with 0.4630 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 12:20:31 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:50  time: 0.3697  data_time: 0.0050  memory: 4360  loss: 0.7632  loss_rpn_cls: 0.0338  loss_rpn_bbox: 0.1024  loss_cls: 0.2655  acc: 87.6953  loss_bbox: 0.3615
2025/05/19 12:20:50 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:32  time: 0.3669  data_time: 0.0023  memory: 4360  loss: 0.7615  loss_rpn_cls: 0.0372  loss_rpn_bbox: 0.1008  loss_cls: 0.2640  acc: 91.8457  loss_bbox: 0.3596
2025/05/19 12:21:05 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:21:06 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:21:08 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.746 0.536 -1.000 0.306 0.488
2025/05/19 12:21:08 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0368
2025/05/19 12:21:26 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:58  time: 0.3720  data_time: 0.0049  memory: 4360  loss: 0.7643  loss_rpn_cls: 0.0358  loss_rpn_bbox: 0.1014  loss_cls: 0.2660  acc: 87.7441  loss_bbox: 0.3611
2025/05/19 12:21:45 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:40  time: 0.3681  data_time: 0.0023  memory: 4360  loss: 0.7394  loss_rpn_cls: 0.0283  loss_rpn_bbox: 0.1003  loss_cls: 0.2538  acc: 89.8926  loss_bbox: 0.3570
2025/05/19 12:22:00 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:22:02 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:22:03 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.748 0.534 -1.000 0.314 0.486
2025/05/19 12:22:03 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0367
2025/05/19 12:22:21 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:06  time: 0.3688  data_time: 0.0050  memory: 4360  loss: 0.7328  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0980  loss_cls: 0.2551  acc: 91.0156  loss_bbox: 0.3499
2025/05/19 12:22:40 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:48  time: 0.3676  data_time: 0.0023  memory: 4360  loss: 0.7303  loss_rpn_cls: 0.0325  loss_rpn_bbox: 0.0977  loss_cls: 0.2525  acc: 89.8926  loss_bbox: 0.3475
2025/05/19 12:22:55 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:22:56 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:22:58 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.740 0.538 -1.000 0.318 0.485
2025/05/19 12:22:58 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0364
2025/05/19 12:23:16 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:14  time: 0.3688  data_time: 0.0048  memory: 4360  loss: 0.7301  loss_rpn_cls: 0.0320  loss_rpn_bbox: 0.0980  loss_cls: 0.2526  acc: 90.7227  loss_bbox: 0.3475
2025/05/19 12:23:35 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:56  time: 0.3672  data_time: 0.0023  memory: 4360  loss: 0.7400  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.0993  loss_cls: 0.2546  acc: 88.9160  loss_bbox: 0.3546
2025/05/19 12:23:50 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:23:51 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:23:53 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.740 0.537 -1.000 0.316 0.482
2025/05/19 12:23:53 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0364
2025/05/19 12:24:11 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:22  time: 0.3669  data_time: 0.0049  memory: 4360  loss: 0.7334  loss_rpn_cls: 0.0323  loss_rpn_bbox: 0.0968  loss_cls: 0.2534  acc: 87.6953  loss_bbox: 0.3510
2025/05/19 12:24:29 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:03  time: 0.3653  data_time: 0.0022  memory: 4360  loss: 0.7347  loss_rpn_cls: 0.0325  loss_rpn_bbox: 0.0984  loss_cls: 0.2541  acc: 89.5996  loss_bbox: 0.3495
2025/05/19 12:24:44 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:24:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:24:48 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.742 0.537 -1.000 0.313 0.486
2025/05/19 12:24:48 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0369
2025/05/19 12:24:58 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:25:06 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:30  time: 0.3726  data_time: 0.0049  memory: 4360  loss: 0.7438  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.1008  loss_cls: 0.2588  acc: 93.7012  loss_bbox: 0.3534
2025/05/19 12:25:25 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:12  time: 0.3652  data_time: 0.0025  memory: 4360  loss: 0.7229  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0966  loss_cls: 0.2490  acc: 90.2832  loss_bbox: 0.3471
2025/05/19 12:25:40 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:25:41 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:25:43 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.745 0.534 -1.000 0.315 0.487
2025/05/19 12:25:43 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0365
2025/05/19 12:26:01 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:38  time: 0.3725  data_time: 0.0049  memory: 4360  loss: 0.7163  loss_rpn_cls: 0.0311  loss_rpn_bbox: 0.0956  loss_cls: 0.2435  acc: 91.1621  loss_bbox: 0.3462
2025/05/19 12:26:20 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:20  time: 0.3653  data_time: 0.0024  memory: 4360  loss: 0.7315  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0987  loss_cls: 0.2560  acc: 89.3066  loss_bbox: 0.3470
2025/05/19 12:26:35 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:26:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:26:38 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.742 0.531 -1.000 0.312 0.485
2025/05/19 12:26:38 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0364
2025/05/19 12:26:56 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:47  time: 0.3729  data_time: 0.0050  memory: 4360  loss: 0.7410  loss_rpn_cls: 0.0319  loss_rpn_bbox: 0.0997  loss_cls: 0.2566  acc: 90.3320  loss_bbox: 0.3528
2025/05/19 12:27:15 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:28  time: 0.3633  data_time: 0.0023  memory: 4360  loss: 0.7099  loss_rpn_cls: 0.0291  loss_rpn_bbox: 0.0950  loss_cls: 0.2439  acc: 90.5762  loss_bbox: 0.3418
2025/05/19 12:27:29 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:27:31 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:27:33 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.743 0.538 -1.000 0.318 0.486
2025/05/19 12:27:33 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0364
2025/05/19 12:27:51 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:54  time: 0.3669  data_time: 0.0048  memory: 4360  loss: 0.7322  loss_rpn_cls: 0.0305  loss_rpn_bbox: 0.0973  loss_cls: 0.2529  acc: 89.0625  loss_bbox: 0.3516
2025/05/19 12:28:09 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:36  time: 0.3677  data_time: 0.0023  memory: 4360  loss: 0.7197  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0955  loss_cls: 0.2487  acc: 91.3086  loss_bbox: 0.3457
2025/05/19 12:28:24 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:28:26 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:28:28 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.742 0.536 -1.000 0.316 0.486
2025/05/19 12:28:28 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0363
2025/05/19 12:28:46 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:03  time: 0.3677  data_time: 0.0049  memory: 4360  loss: 0.7358  loss_rpn_cls: 0.0321  loss_rpn_bbox: 0.0985  loss_cls: 0.2553  acc: 90.3809  loss_bbox: 0.3498
2025/05/19 12:29:04 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:44  time: 0.3671  data_time: 0.0023  memory: 4360  loss: 0.7179  loss_rpn_cls: 0.0273  loss_rpn_bbox: 0.0958  loss_cls: 0.2491  acc: 89.4043  loss_bbox: 0.3457
2025/05/19 12:29:19 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:29:21 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:29:23 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.735 0.530 -1.000 0.311 0.480
2025/05/19 12:29:23 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4800  data_time: 0.0016  time: 0.0363
2025/05/19 12:29:41 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:11  time: 0.3650  data_time: 0.0049  memory: 4360  loss: 0.7166  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0958  loss_cls: 0.2481  acc: 90.9668  loss_bbox: 0.3452
2025/05/19 12:29:59 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:52  time: 0.3693  data_time: 0.0023  memory: 4360  loss: 0.7245  loss_rpn_cls: 0.0318  loss_rpn_bbox: 0.0984  loss_cls: 0.2477  acc: 89.3066  loss_bbox: 0.3466
2025/05/19 12:30:14 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:30:16 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:30:17 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.742 0.535 -1.000 0.313 0.488
2025/05/19 12:30:17 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0364
2025/05/19 12:30:36 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:19  time: 0.3682  data_time: 0.0049  memory: 4360  loss: 0.7184  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0978  loss_cls: 0.2490  acc: 86.8164  loss_bbox: 0.3427
2025/05/19 12:30:54 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:01  time: 0.3641  data_time: 0.0022  memory: 4360  loss: 0.7304  loss_rpn_cls: 0.0304  loss_rpn_bbox: 0.0967  loss_cls: 0.2545  acc: 90.4785  loss_bbox: 0.3489
2025/05/19 12:31:09 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:31:11 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:31:12 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.738 0.541 -1.000 0.315 0.485
2025/05/19 12:31:12 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0363
2025/05/19 12:31:27 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:31:31 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:27  time: 0.3671  data_time: 0.0049  memory: 4360  loss: 0.7054  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.0943  loss_cls: 0.2410  acc: 90.6250  loss_bbox: 0.3449
2025/05/19 12:31:49 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:09  time: 0.3668  data_time: 0.0022  memory: 4360  loss: 0.7304  loss_rpn_cls: 0.0302  loss_rpn_bbox: 0.0979  loss_cls: 0.2541  acc: 90.7715  loss_bbox: 0.3482
2025/05/19 12:32:04 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:32:06 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:32:07 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.746 0.545 -1.000 0.315 0.487
2025/05/19 12:32:07 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0376
2025/05/19 12:32:26 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:35  time: 0.3681  data_time: 0.0049  memory: 4360  loss: 0.7182  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0973  loss_cls: 0.2445  acc: 89.5508  loss_bbox: 0.3485
2025/05/19 12:32:44 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:17  time: 0.3637  data_time: 0.0025  memory: 4360  loss: 0.7177  loss_rpn_cls: 0.0301  loss_rpn_bbox: 0.0955  loss_cls: 0.2503  acc: 90.3809  loss_bbox: 0.3419
2025/05/19 12:32:59 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:33:01 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:33:02 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.745 0.541 -1.000 0.318 0.487
2025/05/19 12:33:02 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0366
2025/05/19 12:33:21 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:44  time: 0.3720  data_time: 0.0048  memory: 4360  loss: 0.7251  loss_rpn_cls: 0.0321  loss_rpn_bbox: 0.0977  loss_cls: 0.2496  acc: 90.5762  loss_bbox: 0.3458
2025/05/19 12:33:39 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:25  time: 0.3681  data_time: 0.0022  memory: 4360  loss: 0.7219  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0992  loss_cls: 0.2479  acc: 91.7969  loss_bbox: 0.3454
2025/05/19 12:33:54 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:33:56 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:33:57 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.739 0.534 -1.000 0.318 0.483
2025/05/19 12:33:57 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0365
2025/05/19 12:34:16 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:52  time: 0.3678  data_time: 0.0049  memory: 4360  loss: 0.7203  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0967  loss_cls: 0.2498  acc: 90.7227  loss_bbox: 0.3443
2025/05/19 12:34:34 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:33  time: 0.3685  data_time: 0.0023  memory: 4360  loss: 0.7342  loss_rpn_cls: 0.0323  loss_rpn_bbox: 0.0987  loss_cls: 0.2521  acc: 89.8438  loss_bbox: 0.3511
2025/05/19 12:34:49 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:34:51 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:34:52 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.741 0.539 -1.000 0.316 0.487
2025/05/19 12:34:52 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4870  data_time: 0.0017  time: 0.0364
2025/05/19 12:35:11 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:00  time: 0.3699  data_time: 0.0048  memory: 4360  loss: 0.7229  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0983  loss_cls: 0.2519  acc: 90.4297  loss_bbox: 0.3437
2025/05/19 12:35:29 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3710  data_time: 0.0025  memory: 4360  loss: 0.7212  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0961  loss_cls: 0.2520  acc: 89.8926  loss_bbox: 0.3444
2025/05/19 12:35:44 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:35:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:35:47 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.740 0.534 -1.000 0.314 0.485
2025/05/19 12:35:47 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4850  data_time: 0.0015  time: 0.0361
2025/05/19 12:36:06 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:08  time: 0.3677  data_time: 0.0049  memory: 4360  loss: 0.7108  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0959  loss_cls: 0.2410  acc: 90.4297  loss_bbox: 0.3446
2025/05/19 12:36:24 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3699  data_time: 0.0023  memory: 4360  loss: 0.7200  loss_rpn_cls: 0.0295  loss_rpn_bbox: 0.0975  loss_cls: 0.2482  acc: 89.7461  loss_bbox: 0.3448
2025/05/19 12:36:39 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:36:41 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:36:42 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.736 0.536 -1.000 0.310 0.483
2025/05/19 12:36:42 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0361
2025/05/19 12:37:01 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:16  time: 0.3701  data_time: 0.0048  memory: 4360  loss: 0.7312  loss_rpn_cls: 0.0327  loss_rpn_bbox: 0.0977  loss_cls: 0.2532  acc: 88.6230  loss_bbox: 0.3476
2025/05/19 12:37:19 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3620  data_time: 0.0024  memory: 4360  loss: 0.7132  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0961  loss_cls: 0.2459  acc: 93.0664  loss_bbox: 0.3423
2025/05/19 12:37:34 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:37:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:37:37 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.738 0.534 -1.000 0.314 0.485
2025/05/19 12:37:37 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0363
2025/05/19 12:37:55 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3668  data_time: 0.0048  memory: 4360  loss: 0.7159  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0966  loss_cls: 0.2475  acc: 91.6016  loss_bbox: 0.3432
2025/05/19 12:37:56 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:38:14 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3680  data_time: 0.0023  memory: 4360  loss: 0.7245  loss_rpn_cls: 0.0310  loss_rpn_bbox: 0.0977  loss_cls: 0.2500  acc: 90.0879  loss_bbox: 0.3458
2025/05/19 12:38:29 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:38:31 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:38:32 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.736 0.538 -1.000 0.314 0.486
2025/05/19 12:38:32 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0368
2025/05/19 12:38:51 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3878  data_time: 0.0049  memory: 4360  loss: 0.7156  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0960  loss_cls: 0.2455  acc: 88.8184  loss_bbox: 0.3444
2025/05/19 12:39:10 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3650  data_time: 0.0024  memory: 4360  loss: 0.7206  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0981  loss_cls: 0.2469  acc: 92.5293  loss_bbox: 0.3461
2025/05/19 12:39:25 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_ver_20250519_121137
2025/05/19 12:39:25 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 12:39:29 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:39:30 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.739 0.540 -1.000 0.318 0.485
2025/05/19 12:39:30 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4850  data_time: 0.0017  time: 0.0387
