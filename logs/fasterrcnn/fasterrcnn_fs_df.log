2025/05/17 18:41:03 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 309747174
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 309747174
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/17 18:41:03 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/17 18:41:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/17 18:41:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/17 18:41:05 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/17 18:41:05 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/17 18:41:05 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/17 18:41:05 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/17 18:41:05 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/17 18:41:05 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/17 18:41:28 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:11  time: 0.4620  data_time: 0.0925  memory: 4362  loss: 2.1693  loss_rpn_cls: 0.6329  loss_rpn_bbox: 0.2498  loss_cls: 0.8210  acc: 78.4668  loss_bbox: 0.4655
2025/05/17 18:41:47 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:48  time: 0.3749  data_time: 0.0023  memory: 4362  loss: 1.9515  loss_rpn_cls: 0.3458  loss_rpn_bbox: 0.2239  loss_cls: 0.6713  acc: 79.6875  loss_bbox: 0.7106
2025/05/17 18:42:02 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:42:12 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:42:14 - mmengine - INFO - bbox_mAP_copypaste: 0.139 0.350 0.061 -1.000 0.045 0.155
2025/05/17 18:42:14 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1390  coco/bbox_mAP_50: 0.3500  coco/bbox_mAP_75: 0.0610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0450  coco/bbox_mAP_l: 0.1550  data_time: 0.1640  time: 0.2062
2025/05/17 18:42:15 - mmengine - INFO - The best checkpoint with 0.1390 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/17 18:42:33 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:39  time: 0.3701  data_time: 0.0048  memory: 4362  loss: 1.5399  loss_rpn_cls: 0.1698  loss_rpn_bbox: 0.1985  loss_cls: 0.5283  acc: 79.0025  loss_bbox: 0.6433
2025/05/17 18:42:51 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:50  time: 0.3605  data_time: 0.0024  memory: 4362  loss: 1.4429  loss_rpn_cls: 0.1256  loss_rpn_bbox: 0.1902  loss_cls: 0.5218  acc: 85.1074  loss_bbox: 0.6053
2025/05/17 18:43:06 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:43:08 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:43:09 - mmengine - INFO - bbox_mAP_copypaste: 0.283 0.605 0.196 -1.000 0.207 0.297
2025/05/17 18:43:09 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2830  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.1960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.2970  data_time: 0.0015  time: 0.0374
2025/05/17 18:43:09 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/17 18:43:10 - mmengine - INFO - The best checkpoint with 0.2830 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/17 18:43:29 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:48  time: 0.3668  data_time: 0.0048  memory: 4362  loss: 1.3229  loss_rpn_cls: 0.1064  loss_rpn_bbox: 0.1780  loss_cls: 0.4783  acc: 82.5684  loss_bbox: 0.5602
2025/05/17 18:43:46 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:17  time: 0.3569  data_time: 0.0023  memory: 4362  loss: 1.2139  loss_rpn_cls: 0.0852  loss_rpn_bbox: 0.1579  loss_cls: 0.4428  acc: 83.5455  loss_bbox: 0.5280
2025/05/17 18:44:01 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:44:03 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:44:04 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.636 0.352 -1.000 0.253 0.374
2025/05/17 18:44:04 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6360  coco/bbox_mAP_75: 0.3520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2530  coco/bbox_mAP_l: 0.3740  data_time: 0.0016  time: 0.0371
2025/05/17 18:44:04 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/17 18:44:05 - mmengine - INFO - The best checkpoint with 0.3530 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/17 18:44:23 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:31  time: 0.3666  data_time: 0.0049  memory: 4362  loss: 1.1683  loss_rpn_cls: 0.0816  loss_rpn_bbox: 0.1580  loss_cls: 0.4360  acc: 85.0098  loss_bbox: 0.4927
2025/05/17 18:44:41 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:07  time: 0.3608  data_time: 0.0024  memory: 4362  loss: 1.1426  loss_rpn_cls: 0.0847  loss_rpn_bbox: 0.1522  loss_cls: 0.4122  acc: 86.6211  loss_bbox: 0.4936
2025/05/17 18:44:56 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:44:58 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:44:59 - mmengine - INFO - bbox_mAP_copypaste: 0.368 0.640 0.394 -1.000 0.204 0.396
2025/05/17 18:44:59 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3680  coco/bbox_mAP_50: 0.6400  coco/bbox_mAP_75: 0.3940  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3960  data_time: 0.0016  time: 0.0369
2025/05/17 18:44:59 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/17 18:45:00 - mmengine - INFO - The best checkpoint with 0.3680 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/17 18:45:19 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:27  time: 0.3710  data_time: 0.0047  memory: 4362  loss: 1.0455  loss_rpn_cls: 0.0736  loss_rpn_bbox: 0.1447  loss_cls: 0.3734  acc: 85.4980  loss_bbox: 0.4538
2025/05/17 18:45:37 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:06  time: 0.3627  data_time: 0.0024  memory: 4362  loss: 1.0120  loss_rpn_cls: 0.0637  loss_rpn_bbox: 0.1374  loss_cls: 0.3697  acc: 88.0859  loss_bbox: 0.4412
2025/05/17 18:45:51 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:45:53 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:45:55 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.733 0.499 -1.000 0.299 0.468
2025/05/17 18:45:55 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.4990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4680  data_time: 0.0016  time: 0.0371
2025/05/17 18:45:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/17 18:45:56 - mmengine - INFO - The best checkpoint with 0.4400 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/17 18:46:14 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:29  time: 0.3691  data_time: 0.0047  memory: 4362  loss: 0.9472  loss_rpn_cls: 0.0590  loss_rpn_bbox: 0.1288  loss_cls: 0.3384  acc: 87.8906  loss_bbox: 0.4209
2025/05/17 18:46:32 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:08  time: 0.3600  data_time: 0.0022  memory: 4362  loss: 0.9723  loss_rpn_cls: 0.0643  loss_rpn_bbox: 0.1358  loss_cls: 0.3462  acc: 87.1094  loss_bbox: 0.4260
2025/05/17 18:46:47 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:46:49 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:46:50 - mmengine - INFO - bbox_mAP_copypaste: 0.439 0.742 0.485 -1.000 0.294 0.464
2025/05/17 18:46:50 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4390  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.4850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4640  data_time: 0.0016  time: 0.0364
2025/05/17 18:47:08 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:32  time: 0.3651  data_time: 0.0047  memory: 4362  loss: 0.8929  loss_rpn_cls: 0.0524  loss_rpn_bbox: 0.1223  loss_cls: 0.3172  acc: 89.1602  loss_bbox: 0.4011
2025/05/17 18:47:27 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:12  time: 0.3643  data_time: 0.0022  memory: 4362  loss: 0.9380  loss_rpn_cls: 0.0537  loss_rpn_bbox: 0.1287  loss_cls: 0.3419  acc: 84.7168  loss_bbox: 0.4138
2025/05/17 18:47:41 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:47:43 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:47:45 - mmengine - INFO - bbox_mAP_copypaste: 0.418 0.696 0.476 -1.000 0.314 0.440
2025/05/17 18:47:45 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4180  coco/bbox_mAP_50: 0.6960  coco/bbox_mAP_75: 0.4760  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4400  data_time: 0.0016  time: 0.0368
2025/05/17 18:47:49 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:48:03 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:37  time: 0.3658  data_time: 0.0048  memory: 4362  loss: 0.8872  loss_rpn_cls: 0.0475  loss_rpn_bbox: 0.1238  loss_cls: 0.3162  acc: 87.4023  loss_bbox: 0.3996
2025/05/17 18:48:21 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:18  time: 0.3637  data_time: 0.0024  memory: 4362  loss: 0.8708  loss_rpn_cls: 0.0466  loss_rpn_bbox: 0.1191  loss_cls: 0.3112  acc: 89.9902  loss_bbox: 0.3938
2025/05/17 18:48:36 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:48:38 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:48:39 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.747 0.504 -1.000 0.291 0.472
2025/05/17 18:48:39 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.5040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4720  data_time: 0.0014  time: 0.0369
2025/05/17 18:48:39 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/17 18:48:40 - mmengine - INFO - The best checkpoint with 0.4480 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/17 18:48:58 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:43  time: 0.3657  data_time: 0.0050  memory: 4362  loss: 0.7836  loss_rpn_cls: 0.0376  loss_rpn_bbox: 0.1043  loss_cls: 0.2773  acc: 90.6250  loss_bbox: 0.3643
2025/05/17 18:49:16 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:24  time: 0.3645  data_time: 0.0023  memory: 4362  loss: 0.7583  loss_rpn_cls: 0.0336  loss_rpn_bbox: 0.1019  loss_cls: 0.2664  acc: 88.2812  loss_bbox: 0.3564
2025/05/17 18:49:32 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:49:33 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:49:35 - mmengine - INFO - bbox_mAP_copypaste: 0.473 0.754 0.553 -1.000 0.305 0.502
2025/05/17 18:49:35 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4730  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.5530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.5020  data_time: 0.0015  time: 0.0362
2025/05/17 18:49:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/17 18:49:36 - mmengine - INFO - The best checkpoint with 0.4730 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/17 18:49:54 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:51  time: 0.3706  data_time: 0.0050  memory: 4362  loss: 0.7452  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.1003  loss_cls: 0.2606  acc: 90.2832  loss_bbox: 0.3529
2025/05/17 18:50:12 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:32  time: 0.3652  data_time: 0.0023  memory: 4362  loss: 0.7303  loss_rpn_cls: 0.0301  loss_rpn_bbox: 0.0989  loss_cls: 0.2511  acc: 89.6484  loss_bbox: 0.3502
2025/05/17 18:50:27 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:50:29 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:50:30 - mmengine - INFO - bbox_mAP_copypaste: 0.476 0.758 0.565 -1.000 0.325 0.503
2025/05/17 18:50:30 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4760  coco/bbox_mAP_50: 0.7580  coco/bbox_mAP_75: 0.5650  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3250  coco/bbox_mAP_l: 0.5030  data_time: 0.0014  time: 0.0362
2025/05/17 18:50:30 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/17 18:50:31 - mmengine - INFO - The best checkpoint with 0.4760 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/17 18:50:50 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:59  time: 0.3698  data_time: 0.0049  memory: 4362  loss: 0.7330  loss_rpn_cls: 0.0321  loss_rpn_bbox: 0.0997  loss_cls: 0.2526  acc: 90.5762  loss_bbox: 0.3486
2025/05/17 18:51:08 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:40  time: 0.3659  data_time: 0.0023  memory: 4362  loss: 0.7285  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0974  loss_cls: 0.2564  acc: 90.0391  loss_bbox: 0.3459
2025/05/17 18:51:23 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:51:25 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:51:26 - mmengine - INFO - bbox_mAP_copypaste: 0.483 0.766 0.567 -1.000 0.321 0.510
2025/05/17 18:51:26 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4830  coco/bbox_mAP_50: 0.7660  coco/bbox_mAP_75: 0.5670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3210  coco/bbox_mAP_l: 0.5100  data_time: 0.0016  time: 0.0364
2025/05/17 18:51:26 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_10.pth is removed
2025/05/17 18:51:27 - mmengine - INFO - The best checkpoint with 0.4830 coco/bbox_mAP at 11 epoch is saved to best_coco_bbox_mAP_epoch_11.pth.
2025/05/17 18:51:46 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:07  time: 0.3728  data_time: 0.0048  memory: 4362  loss: 0.7106  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0957  loss_cls: 0.2471  acc: 92.8223  loss_bbox: 0.3384
2025/05/17 18:52:04 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:48  time: 0.3635  data_time: 0.0023  memory: 4362  loss: 0.7196  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0969  loss_cls: 0.2502  acc: 91.3086  loss_bbox: 0.3431
2025/05/17 18:52:19 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:52:21 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:52:22 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.747 0.554 -1.000 0.313 0.498
2025/05/17 18:52:22 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.5540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4980  data_time: 0.0013  time: 0.0363
2025/05/17 18:52:40 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:14  time: 0.3683  data_time: 0.0048  memory: 4362  loss: 0.7039  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0959  loss_cls: 0.2404  acc: 89.3555  loss_bbox: 0.3398
2025/05/17 18:52:59 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:56  time: 0.3661  data_time: 0.0022  memory: 4362  loss: 0.7258  loss_rpn_cls: 0.0284  loss_rpn_bbox: 0.0965  loss_cls: 0.2536  acc: 87.2559  loss_bbox: 0.3472
2025/05/17 18:53:14 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:53:15 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:53:17 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.741 0.558 -1.000 0.312 0.496
2025/05/17 18:53:17 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4960  data_time: 0.0017  time: 0.0366
2025/05/17 18:53:35 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:22  time: 0.3718  data_time: 0.0048  memory: 4362  loss: 0.7108  loss_rpn_cls: 0.0310  loss_rpn_bbox: 0.0961  loss_cls: 0.2437  acc: 90.4297  loss_bbox: 0.3399
2025/05/17 18:53:54 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:04  time: 0.3633  data_time: 0.0023  memory: 4362  loss: 0.7156  loss_rpn_cls: 0.0296  loss_rpn_bbox: 0.0959  loss_cls: 0.2449  acc: 91.1621  loss_bbox: 0.3452
2025/05/17 18:54:09 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:54:10 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:54:12 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.743 0.562 -1.000 0.310 0.499
2025/05/17 18:54:12 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4990  data_time: 0.0016  time: 0.0364
2025/05/17 18:54:21 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:54:30 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:30  time: 0.3652  data_time: 0.0049  memory: 4362  loss: 0.7086  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0961  loss_cls: 0.2414  acc: 92.0898  loss_bbox: 0.3422
2025/05/17 18:54:49 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:12  time: 0.3696  data_time: 0.0022  memory: 4362  loss: 0.7155  loss_rpn_cls: 0.0280  loss_rpn_bbox: 0.0964  loss_cls: 0.2482  acc: 89.9902  loss_bbox: 0.3429
2025/05/17 18:55:03 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:55:05 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:55:07 - mmengine - INFO - bbox_mAP_copypaste: 0.477 0.756 0.565 -1.000 0.321 0.505
2025/05/17 18:55:07 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4770  coco/bbox_mAP_50: 0.7560  coco/bbox_mAP_75: 0.5650  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3210  coco/bbox_mAP_l: 0.5050  data_time: 0.0015  time: 0.0362
2025/05/17 18:55:25 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:38  time: 0.3665  data_time: 0.0049  memory: 4362  loss: 0.7025  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0956  loss_cls: 0.2416  acc: 90.9668  loss_bbox: 0.3379
2025/05/17 18:55:43 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:20  time: 0.3646  data_time: 0.0023  memory: 4362  loss: 0.7082  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0959  loss_cls: 0.2437  acc: 90.8203  loss_bbox: 0.3412
2025/05/17 18:55:58 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:56:00 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:56:02 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.744 0.560 -1.000 0.312 0.499
2025/05/17 18:56:02 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4990  data_time: 0.0016  time: 0.0363
2025/05/17 18:56:20 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:47  time: 0.3702  data_time: 0.0048  memory: 4362  loss: 0.7062  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0957  loss_cls: 0.2390  acc: 89.6484  loss_bbox: 0.3426
2025/05/17 18:56:38 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:28  time: 0.3644  data_time: 0.0022  memory: 4362  loss: 0.7136  loss_rpn_cls: 0.0284  loss_rpn_bbox: 0.0963  loss_cls: 0.2515  acc: 91.6504  loss_bbox: 0.3375
2025/05/17 18:56:53 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:56:55 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:56:56 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.745 0.560 -1.000 0.313 0.498
2025/05/17 18:56:56 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4980  data_time: 0.0015  time: 0.0365
2025/05/17 18:57:15 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:55  time: 0.3692  data_time: 0.0048  memory: 4362  loss: 0.7048  loss_rpn_cls: 0.0291  loss_rpn_bbox: 0.0965  loss_cls: 0.2387  acc: 92.3828  loss_bbox: 0.3405
2025/05/17 18:57:33 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:36  time: 0.3650  data_time: 0.0023  memory: 4362  loss: 0.7076  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0959  loss_cls: 0.2467  acc: 89.1113  loss_bbox: 0.3380
2025/05/17 18:57:48 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:57:50 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:57:51 - mmengine - INFO - bbox_mAP_copypaste: 0.474 0.749 0.563 -1.000 0.308 0.503
2025/05/17 18:57:51 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4740  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.5030  data_time: 0.0015  time: 0.0365
2025/05/17 18:58:10 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:03  time: 0.3667  data_time: 0.0046  memory: 4362  loss: 0.7090  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0948  loss_cls: 0.2461  acc: 88.3789  loss_bbox: 0.3400
2025/05/17 18:58:28 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:44  time: 0.3650  data_time: 0.0023  memory: 4362  loss: 0.7141  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0966  loss_cls: 0.2475  acc: 92.7246  loss_bbox: 0.3406
2025/05/17 18:58:43 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:58:45 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:58:46 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.745 0.557 -1.000 0.310 0.496
2025/05/17 18:58:46 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4960  data_time: 0.0017  time: 0.0363
2025/05/17 18:59:05 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:11  time: 0.3727  data_time: 0.0048  memory: 4362  loss: 0.7160  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0961  loss_cls: 0.2500  acc: 88.1348  loss_bbox: 0.3412
2025/05/17 18:59:23 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:52  time: 0.3647  data_time: 0.0022  memory: 4362  loss: 0.7071  loss_rpn_cls: 0.0277  loss_rpn_bbox: 0.0957  loss_cls: 0.2431  acc: 89.5020  loss_bbox: 0.3406
2025/05/17 18:59:38 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 18:59:40 - mmengine - INFO - Evaluating bbox...
2025/05/17 18:59:41 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.743 0.557 -1.000 0.310 0.497
2025/05/17 18:59:41 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4970  data_time: 0.0016  time: 0.0361
2025/05/17 19:00:00 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:19  time: 0.3701  data_time: 0.0048  memory: 4362  loss: 0.7198  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0974  loss_cls: 0.2476  acc: 90.5762  loss_bbox: 0.3445
2025/05/17 19:00:18 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:01  time: 0.3673  data_time: 0.0022  memory: 4362  loss: 0.7001  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.0963  loss_cls: 0.2395  acc: 91.9434  loss_bbox: 0.3357
2025/05/17 19:00:33 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:00:35 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:00:36 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.744 0.560 -1.000 0.311 0.500
2025/05/17 19:00:36 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.5000  data_time: 0.0016  time: 0.0362
2025/05/17 19:00:50 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:00:54 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:27  time: 0.3664  data_time: 0.0048  memory: 4362  loss: 0.7109  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0967  loss_cls: 0.2434  acc: 91.6504  loss_bbox: 0.3421
2025/05/17 19:01:13 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:09  time: 0.3724  data_time: 0.0024  memory: 4362  loss: 0.7165  loss_rpn_cls: 0.0293  loss_rpn_bbox: 0.0983  loss_cls: 0.2477  acc: 89.8926  loss_bbox: 0.3413
2025/05/17 19:01:27 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:01:29 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:01:31 - mmengine - INFO - bbox_mAP_copypaste: 0.472 0.748 0.564 -1.000 0.307 0.501
2025/05/17 19:01:31 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4720  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.5010  data_time: 0.0015  time: 0.0364
2025/05/17 19:01:49 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:35  time: 0.3680  data_time: 0.0048  memory: 4362  loss: 0.7057  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0957  loss_cls: 0.2423  acc: 92.0410  loss_bbox: 0.3406
2025/05/17 19:02:07 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:17  time: 0.3685  data_time: 0.0023  memory: 4362  loss: 0.7128  loss_rpn_cls: 0.0286  loss_rpn_bbox: 0.0958  loss_cls: 0.2489  acc: 90.9180  loss_bbox: 0.3394
2025/05/17 19:02:22 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:02:24 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:02:26 - mmengine - INFO - bbox_mAP_copypaste: 0.474 0.750 0.562 -1.000 0.308 0.502
2025/05/17 19:02:26 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4740  coco/bbox_mAP_50: 0.7500  coco/bbox_mAP_75: 0.5620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.5020  data_time: 0.0016  time: 0.0364
2025/05/17 19:02:44 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:43  time: 0.3673  data_time: 0.0048  memory: 4362  loss: 0.7048  loss_rpn_cls: 0.0279  loss_rpn_bbox: 0.0960  loss_cls: 0.2440  acc: 90.6738  loss_bbox: 0.3369
2025/05/17 19:03:02 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:25  time: 0.3664  data_time: 0.0023  memory: 4362  loss: 0.6975  loss_rpn_cls: 0.0268  loss_rpn_bbox: 0.0945  loss_cls: 0.2425  acc: 90.5273  loss_bbox: 0.3337
2025/05/17 19:03:17 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:03:19 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:03:21 - mmengine - INFO - bbox_mAP_copypaste: 0.473 0.748 0.563 -1.000 0.310 0.502
2025/05/17 19:03:21 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4730  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.5020  data_time: 0.0015  time: 0.0362
2025/05/17 19:03:39 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:52  time: 0.3711  data_time: 0.0047  memory: 4362  loss: 0.7074  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.0968  loss_cls: 0.2409  acc: 89.7949  loss_bbox: 0.3390
2025/05/17 19:03:58 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:33  time: 0.3653  data_time: 0.0022  memory: 4362  loss: 0.7042  loss_rpn_cls: 0.0277  loss_rpn_bbox: 0.0951  loss_cls: 0.2455  acc: 89.4531  loss_bbox: 0.3360
2025/05/17 19:04:12 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:04:14 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:04:16 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.745 0.557 -1.000 0.305 0.501
2025/05/17 19:04:16 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.5010  data_time: 0.0017  time: 0.0365
2025/05/17 19:04:34 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:00  time: 0.3668  data_time: 0.0048  memory: 4362  loss: 0.7064  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0958  loss_cls: 0.2413  acc: 91.8945  loss_bbox: 0.3406
2025/05/17 19:04:52 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3651  data_time: 0.0023  memory: 4362  loss: 0.6997  loss_rpn_cls: 0.0266  loss_rpn_bbox: 0.0962  loss_cls: 0.2395  acc: 91.5039  loss_bbox: 0.3374
2025/05/17 19:05:07 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:05:09 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:05:10 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.743 0.560 -1.000 0.309 0.498
2025/05/17 19:05:10 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4980  data_time: 0.0014  time: 0.0363
2025/05/17 19:05:29 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:08  time: 0.3713  data_time: 0.0049  memory: 4362  loss: 0.7043  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0965  loss_cls: 0.2434  acc: 91.3086  loss_bbox: 0.3363
2025/05/17 19:05:48 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3775  data_time: 0.0023  memory: 4362  loss: 0.7082  loss_rpn_cls: 0.0254  loss_rpn_bbox: 0.0950  loss_cls: 0.2475  acc: 94.1406  loss_bbox: 0.3402
2025/05/17 19:06:03 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:06:05 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:06:06 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.743 0.553 -1.000 0.309 0.498
2025/05/17 19:06:06 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4980  data_time: 0.0016  time: 0.0363
2025/05/17 19:06:24 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:16  time: 0.3650  data_time: 0.0047  memory: 4362  loss: 0.6903  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0932  loss_cls: 0.2326  acc: 89.7949  loss_bbox: 0.3375
2025/05/17 19:06:43 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3652  data_time: 0.0023  memory: 4362  loss: 0.7125  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0960  loss_cls: 0.2483  acc: 90.5273  loss_bbox: 0.3390
2025/05/17 19:06:58 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:07:00 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:07:01 - mmengine - INFO - bbox_mAP_copypaste: 0.472 0.748 0.561 -1.000 0.310 0.500
2025/05/17 19:07:01 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4720  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.5000  data_time: 0.0015  time: 0.0363
2025/05/17 19:07:19 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3711  data_time: 0.0047  memory: 4362  loss: 0.7003  loss_rpn_cls: 0.0279  loss_rpn_bbox: 0.0959  loss_cls: 0.2411  acc: 89.7461  loss_bbox: 0.3354
2025/05/17 19:07:20 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:07:38 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3643  data_time: 0.0022  memory: 4362  loss: 0.7017  loss_rpn_cls: 0.0245  loss_rpn_bbox: 0.0944  loss_cls: 0.2460  acc: 90.8203  loss_bbox: 0.3368
2025/05/17 19:07:53 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:07:54 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:07:56 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.746 0.559 -1.000 0.310 0.501
2025/05/17 19:07:56 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.5590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.5010  data_time: 0.0017  time: 0.0377
2025/05/17 19:08:14 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3659  data_time: 0.0048  memory: 4362  loss: 0.6985  loss_rpn_cls: 0.0286  loss_rpn_bbox: 0.0934  loss_cls: 0.2433  acc: 89.7949  loss_bbox: 0.3331
2025/05/17 19:08:32 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3661  data_time: 0.0022  memory: 4362  loss: 0.7088  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0964  loss_cls: 0.2445  acc: 88.2812  loss_bbox: 0.3398
2025/05/17 19:08:47 - mmengine - INFO - Exp name: fasterrcnn_fs_df_20250517_184059
2025/05/17 19:08:47 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/17 19:08:51 - mmengine - INFO - Evaluating bbox...
2025/05/17 19:08:52 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.742 0.550 -1.000 0.309 0.496
2025/05/17 19:08:52 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4960  data_time: 0.0015  time: 0.0365
