2025/05/19 13:18:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1110982929
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1110982929
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 13:18:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='ShearX'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='ShearX'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 13:18:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 13:18:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 13:18:02 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 13:18:02 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 13:18:02 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 13:18:02 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 13:18:02 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 13:18:02 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 13:18:25 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:00  time: 0.4594  data_time: 0.0914  memory: 4362  loss: nan  loss_rpn_cls: 0.6362  loss_rpn_bbox: 0.2540  loss_cls: 0.7832  acc: 75.0000  loss_bbox: nan
2025/05/19 13:18:44 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:27  time: 0.3675  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.3665  loss_rpn_bbox: 0.2403  loss_cls: 0.7058  acc: 75.0977  loss_bbox: nan
2025/05/19 13:18:59 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:19:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:19:11 - mmengine - INFO - bbox_mAP_copypaste: 0.064 0.192 0.016 -1.000 0.020 0.070
2025/05/19 13:19:11 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0640  coco/bbox_mAP_50: 0.1920  coco/bbox_mAP_75: 0.0160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0200  coco/bbox_mAP_l: 0.0700  data_time: 0.1646  time: 0.2052
2025/05/19 13:19:12 - mmengine - INFO - The best checkpoint with 0.0640 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 13:19:30 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:37  time: 0.3771  data_time: 0.0052  memory: 4362  loss: nan  loss_rpn_cls: 0.2216  loss_rpn_bbox: 0.2238  loss_cls: 0.6139  acc: 81.0547  loss_bbox: nan
2025/05/19 13:19:48 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:49  time: 0.3621  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.1691  loss_rpn_bbox: 0.2104  loss_cls: 0.5616  acc: 76.7578  loss_bbox: nan
2025/05/19 13:20:03 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:20:05 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:20:07 - mmengine - INFO - bbox_mAP_copypaste: 0.239 0.494 0.197 -1.000 0.135 0.262
2025/05/19 13:20:07 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2390  coco/bbox_mAP_50: 0.4940  coco/bbox_mAP_75: 0.1970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2620  data_time: 0.0016  time: 0.0370
2025/05/19 13:20:07 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 13:20:07 - mmengine - INFO - The best checkpoint with 0.2390 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 13:20:26 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:48  time: 0.3684  data_time: 0.0051  memory: 4362  loss: nan  loss_rpn_cls: 0.1508  loss_rpn_bbox: 0.1947  loss_cls: 0.5359  acc: 81.6895  loss_bbox: nan
2025/05/19 13:20:44 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:20  time: 0.3632  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.1218  loss_rpn_bbox: 0.1864  loss_cls: 0.5044  acc: 80.0293  loss_bbox: nan
2025/05/19 13:20:59 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:21:01 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:21:02 - mmengine - INFO - bbox_mAP_copypaste: 0.370 0.685 0.345 -1.000 0.242 0.391
2025/05/19 13:21:02 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3700  coco/bbox_mAP_50: 0.6850  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2420  coco/bbox_mAP_l: 0.3910  data_time: 0.0017  time: 0.0388
2025/05/19 13:21:02 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 13:21:03 - mmengine - INFO - The best checkpoint with 0.3700 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 13:21:21 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:33  time: 0.3653  data_time: 0.0050  memory: 4362  loss: nan  loss_rpn_cls: 0.1004  loss_rpn_bbox: 0.1672  loss_cls: 0.4643  acc: 85.4315  loss_bbox: nan
2025/05/19 13:21:39 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:10  time: 0.3631  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.1072  loss_rpn_bbox: 0.1752  loss_cls: 0.4573  acc: 84.3750  loss_bbox: nan
2025/05/19 13:21:54 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:21:56 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:21:58 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.655 0.359 -1.000 0.252 0.385
2025/05/19 13:21:58 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.3850  data_time: 0.0016  time: 0.0375
2025/05/19 13:22:16 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:28  time: 0.3605  data_time: 0.0051  memory: 4362  loss: nan  loss_rpn_cls: 0.0808  loss_rpn_bbox: 0.1571  loss_cls: 0.3961  acc: 86.7676  loss_bbox: nan
2025/05/19 13:22:34 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:08  time: 0.3665  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0823  loss_rpn_bbox: 0.1602  loss_cls: 0.4262  acc: 81.4649  loss_bbox: nan
2025/05/19 13:22:49 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:22:50 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:22:52 - mmengine - INFO - bbox_mAP_copypaste: 0.410 0.714 0.432 -1.000 0.294 0.428
2025/05/19 13:22:52 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4100  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.4320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4280  data_time: 0.0017  time: 0.0374
2025/05/19 13:22:52 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 13:22:53 - mmengine - INFO - The best checkpoint with 0.4100 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 13:23:11 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:30  time: 0.3665  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0737  loss_rpn_bbox: 0.1484  loss_cls: 0.3904  acc: 88.0371  loss_bbox: nan
2025/05/19 13:23:29 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:09  time: 0.3604  data_time: 0.0024  memory: 4363  loss: nan  loss_rpn_cls: 0.0822  loss_rpn_bbox: 0.1545  loss_cls: 0.3870  acc: 88.1348  loss_bbox: nan
2025/05/19 13:23:44 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:23:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:23:47 - mmengine - INFO - bbox_mAP_copypaste: 0.378 0.662 0.407 -1.000 0.273 0.400
2025/05/19 13:23:47 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3780  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.4070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2730  coco/bbox_mAP_l: 0.4000  data_time: 0.0016  time: 0.0372
2025/05/19 13:24:05 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:32  time: 0.3650  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0709  loss_rpn_bbox: 0.1508  loss_cls: 0.3787  acc: 85.0586  loss_bbox: nan
2025/05/19 13:24:23 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:12  time: 0.3583  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0639  loss_rpn_bbox: 0.1380  loss_cls: 0.3617  acc: 86.8182  loss_bbox: nan
2025/05/19 13:24:38 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:24:40 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:24:42 - mmengine - INFO - bbox_mAP_copypaste: 0.414 0.743 0.408 -1.000 0.256 0.442
2025/05/19 13:24:42 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4140  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.4080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2560  coco/bbox_mAP_l: 0.4420  data_time: 0.0015  time: 0.0373
2025/05/19 13:24:42 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 13:24:42 - mmengine - INFO - The best checkpoint with 0.4140 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/19 13:24:47 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:25:01 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:37  time: 0.3664  data_time: 0.0050  memory: 4362  loss: nan  loss_rpn_cls: 0.0626  loss_rpn_bbox: 0.1403  loss_cls: 0.3506  acc: 87.2559  loss_bbox: nan
2025/05/19 13:25:19 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:18  time: 0.3639  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0599  loss_rpn_bbox: 0.1328  loss_cls: 0.3548  acc: 89.4531  loss_bbox: nan
2025/05/19 13:25:34 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:25:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:25:37 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.747 0.481 -1.000 0.291 0.465
2025/05/19 13:25:37 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.4810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4650  data_time: 0.0015  time: 0.0371
2025/05/19 13:25:37 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/19 13:25:38 - mmengine - INFO - The best checkpoint with 0.4380 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/19 13:25:56 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:43  time: 0.3655  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0489  loss_rpn_bbox: 0.1158  loss_cls: 0.3062  acc: 86.1816  loss_bbox: nan
2025/05/19 13:26:14 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:24  time: 0.3646  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0468  loss_rpn_bbox: 0.1140  loss_cls: 0.3017  acc: 89.5996  loss_bbox: nan
2025/05/19 13:26:29 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:26:31 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:26:32 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.751 0.532 -1.000 0.305 0.488
2025/05/19 13:26:32 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7510  coco/bbox_mAP_75: 0.5320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0367
2025/05/19 13:26:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/19 13:26:33 - mmengine - INFO - The best checkpoint with 0.4610 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 13:26:52 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:50  time: 0.3706  data_time: 0.0051  memory: 4362  loss: nan  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.1115  loss_cls: 0.2929  acc: 88.8672  loss_bbox: nan
2025/05/19 13:27:10 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:32  time: 0.3657  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0448  loss_rpn_bbox: 0.1139  loss_cls: 0.2957  acc: 86.9629  loss_bbox: nan
2025/05/19 13:27:25 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:27:27 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:27:28 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.758 0.548 -1.000 0.328 0.496
2025/05/19 13:27:28 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7580  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3280  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0365
2025/05/19 13:27:28 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/19 13:27:29 - mmengine - INFO - The best checkpoint with 0.4700 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/19 13:27:48 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:58  time: 0.3748  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0447  loss_rpn_bbox: 0.1111  loss_cls: 0.2882  acc: 87.1582  loss_bbox: nan
2025/05/19 13:28:06 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:39  time: 0.3610  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0439  loss_rpn_bbox: 0.1077  loss_cls: 0.2809  acc: 85.7422  loss_bbox: nan
2025/05/19 13:28:20 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:28:22 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:28:24 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.758 0.541 -1.000 0.299 0.496
2025/05/19 13:28:24 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7580  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0365
2025/05/19 13:28:42 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:05  time: 0.3638  data_time: 0.0050  memory: 4362  loss: nan  loss_rpn_cls: 0.0387  loss_rpn_bbox: 0.1078  loss_cls: 0.2929  acc: 89.8926  loss_bbox: nan
2025/05/19 13:29:00 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:47  time: 0.3669  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0380  loss_rpn_bbox: 0.1061  loss_cls: 0.2758  acc: 85.7422  loss_bbox: nan
2025/05/19 13:29:15 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:29:17 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:29:18 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.750 0.547 -1.000 0.310 0.494
2025/05/19 13:29:18 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7500  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4940  data_time: 0.0015  time: 0.0365
2025/05/19 13:29:37 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:13  time: 0.3688  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0410  loss_rpn_bbox: 0.1085  loss_cls: 0.2822  acc: 91.4551  loss_bbox: nan
2025/05/19 13:29:55 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:54  time: 0.3641  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.0369  loss_rpn_bbox: 0.1055  loss_cls: 0.2716  acc: 89.5508  loss_bbox: nan
2025/05/19 13:30:10 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:30:12 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:30:13 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.749 0.545 -1.000 0.314 0.492
2025/05/19 13:30:13 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4920  data_time: 0.0017  time: 0.0367
2025/05/19 13:30:31 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:20  time: 0.3646  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0422  loss_rpn_bbox: 0.1068  loss_cls: 0.2818  acc: 89.5996  loss_bbox: nan
2025/05/19 13:30:49 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:02  time: 0.3621  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1067  loss_cls: 0.2788  acc: 89.3555  loss_bbox: nan
2025/05/19 13:31:04 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:31:06 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:31:08 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.752 0.551 -1.000 0.313 0.495
2025/05/19 13:31:08 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0364
2025/05/19 13:31:17 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:31:26 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:28  time: 0.3635  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0397  loss_rpn_bbox: 0.1054  loss_cls: 0.2839  acc: 87.3535  loss_bbox: nan
2025/05/19 13:31:44 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:10  time: 0.3654  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0391  loss_rpn_bbox: 0.1067  loss_cls: 0.2695  acc: 87.2070  loss_bbox: nan
2025/05/19 13:31:59 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:32:01 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:32:02 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.749 0.545 -1.000 0.313 0.492
2025/05/19 13:32:02 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4920  data_time: 0.0015  time: 0.0370
2025/05/19 13:32:21 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:36  time: 0.3652  data_time: 0.0051  memory: 4362  loss: nan  loss_rpn_cls: 0.0403  loss_rpn_bbox: 0.1070  loss_cls: 0.2848  acc: 88.7695  loss_bbox: nan
2025/05/19 13:32:39 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:18  time: 0.3636  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.1064  loss_cls: 0.2747  acc: 90.0879  loss_bbox: nan
2025/05/19 13:32:53 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:32:55 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:32:57 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.752 0.548 -1.000 0.313 0.495
2025/05/19 13:32:57 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4950  data_time: 0.0015  time: 0.0363
2025/05/19 13:33:15 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:44  time: 0.3686  data_time: 0.0048  memory: 4362  loss: nan  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1078  loss_cls: 0.2790  acc: 88.0371  loss_bbox: nan
2025/05/19 13:33:34 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:26  time: 0.3659  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0413  loss_rpn_bbox: 0.1051  loss_cls: 0.2807  acc: 89.4531  loss_bbox: nan
2025/05/19 13:33:48 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:33:50 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:33:52 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.756 0.553 -1.000 0.311 0.497
2025/05/19 13:33:52 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7560  coco/bbox_mAP_75: 0.5530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4970  data_time: 0.0014  time: 0.0362
2025/05/19 13:34:10 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:53  time: 0.3672  data_time: 0.0048  memory: 4362  loss: nan  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.1054  loss_cls: 0.2735  acc: 87.3047  loss_bbox: nan
2025/05/19 13:34:28 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:34  time: 0.3651  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0383  loss_rpn_bbox: 0.1053  loss_cls: 0.2735  acc: 89.9902  loss_bbox: nan
2025/05/19 13:34:43 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:34:45 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:34:46 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.753 0.548 -1.000 0.312 0.495
2025/05/19 13:34:46 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7530  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0362
2025/05/19 13:35:05 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:01  time: 0.3685  data_time: 0.0051  memory: 4362  loss: nan  loss_rpn_cls: 0.0394  loss_rpn_bbox: 0.1084  loss_cls: 0.2792  acc: 90.3809  loss_bbox: nan
2025/05/19 13:35:23 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:42  time: 0.3631  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0414  loss_rpn_bbox: 0.1063  loss_cls: 0.2855  acc: 88.7695  loss_bbox: nan
2025/05/19 13:35:38 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:35:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:35:41 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.753 0.549 -1.000 0.309 0.494
2025/05/19 13:35:41 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7530  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0364
2025/05/19 13:35:59 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:09  time: 0.3674  data_time: 0.0048  memory: 4362  loss: nan  loss_rpn_cls: 0.0424  loss_rpn_bbox: 0.1091  loss_cls: 0.2778  acc: 88.4766  loss_bbox: nan
2025/05/19 13:36:18 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:51  time: 0.3655  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.0404  loss_rpn_bbox: 0.1074  loss_cls: 0.2795  acc: 88.4277  loss_bbox: nan
2025/05/19 13:36:32 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:36:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:36:36 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.751 0.546 -1.000 0.314 0.492
2025/05/19 13:36:36 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7510  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4920  data_time: 0.0015  time: 0.0363
2025/05/19 13:36:54 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:17  time: 0.3674  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0370  loss_rpn_bbox: 0.1059  loss_cls: 0.2715  acc: 86.3770  loss_bbox: nan
2025/05/19 13:37:12 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:07:59  time: 0.3626  data_time: 0.0025  memory: 4362  loss: nan  loss_rpn_cls: 0.0383  loss_rpn_bbox: 0.1078  loss_cls: 0.2744  acc: 91.3086  loss_bbox: nan
2025/05/19 13:37:27 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:37:29 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:37:30 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.755 0.550 -1.000 0.314 0.496
2025/05/19 13:37:30 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0370
2025/05/19 13:37:44 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:37:48 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:26  time: 0.3636  data_time: 0.0048  memory: 4362  loss: nan  loss_rpn_cls: 0.0390  loss_rpn_bbox: 0.1037  loss_cls: 0.2735  acc: 90.1367  loss_bbox: nan
2025/05/19 13:38:07 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:07  time: 0.3646  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.0381  loss_rpn_bbox: 0.1086  loss_cls: 0.2758  acc: 89.4531  loss_bbox: nan
2025/05/19 13:38:22 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:38:24 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:38:25 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.752 0.545 -1.000 0.313 0.493
2025/05/19 13:38:25 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4930  data_time: 0.0015  time: 0.0366
2025/05/19 13:38:43 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:34  time: 0.3657  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0392  loss_rpn_bbox: 0.1061  loss_cls: 0.2777  acc: 90.5273  loss_bbox: nan
2025/05/19 13:39:02 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:16  time: 0.3647  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.1050  loss_cls: 0.2714  acc: 87.1582  loss_bbox: nan
2025/05/19 13:39:16 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:39:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:39:20 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.758 0.551 -1.000 0.319 0.497
2025/05/19 13:39:20 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7580  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3190  coco/bbox_mAP_l: 0.4970  data_time: 0.0016  time: 0.0363
2025/05/19 13:39:20 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_10.pth is removed
2025/05/19 13:39:21 - mmengine - INFO - The best checkpoint with 0.4710 coco/bbox_mAP at 23 epoch is saved to best_coco_bbox_mAP_epoch_23.pth.
2025/05/19 13:39:39 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:42  time: 0.3712  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0392  loss_rpn_bbox: 0.1049  loss_cls: 0.2759  acc: 88.4277  loss_bbox: nan
2025/05/19 13:39:57 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:24  time: 0.3629  data_time: 0.0022  memory: 4362  loss: nan  loss_rpn_cls: 0.0366  loss_rpn_bbox: 0.1055  loss_cls: 0.2785  acc: 90.0391  loss_bbox: nan
2025/05/19 13:40:12 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:40:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:40:15 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.751 0.549 -1.000 0.315 0.492
2025/05/19 13:40:15 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7510  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0368
2025/05/19 13:40:34 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:51  time: 0.3714  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0401  loss_rpn_bbox: 0.1075  loss_cls: 0.2714  acc: 89.5508  loss_bbox: nan
2025/05/19 13:40:52 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:32  time: 0.3627  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0354  loss_rpn_bbox: 0.1034  loss_cls: 0.2705  acc: 90.7715  loss_bbox: nan
2025/05/19 13:41:07 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:41:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:41:10 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.752 0.548 -1.000 0.316 0.494
2025/05/19 13:41:10 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4940  data_time: 0.0017  time: 0.0366
2025/05/19 13:41:29 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:03:59  time: 0.3703  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0391  loss_rpn_bbox: 0.1072  loss_cls: 0.2862  acc: 88.7695  loss_bbox: nan
2025/05/19 13:41:47 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:41  time: 0.3638  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0377  loss_rpn_bbox: 0.1075  loss_cls: 0.2739  acc: 89.2090  loss_bbox: nan
2025/05/19 13:42:02 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:42:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:42:05 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.755 0.550 -1.000 0.314 0.494
2025/05/19 13:42:05 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0363
2025/05/19 13:42:23 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:08  time: 0.3640  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.1057  loss_cls: 0.2697  acc: 91.3574  loss_bbox: nan
2025/05/19 13:42:42 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:49  time: 0.3698  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1056  loss_cls: 0.2749  acc: 88.6230  loss_bbox: nan
2025/05/19 13:42:56 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:42:58 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:43:00 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.755 0.551 -1.000 0.317 0.495
2025/05/19 13:43:00 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0364
2025/05/19 13:43:18 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:16  time: 0.3686  data_time: 0.0050  memory: 4362  loss: nan  loss_rpn_cls: 0.0367  loss_rpn_bbox: 0.1045  loss_cls: 0.2658  acc: 88.9160  loss_bbox: nan
2025/05/19 13:43:36 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3677  data_time: 0.0023  memory: 4362  loss: nan  loss_rpn_cls: 0.0392  loss_rpn_bbox: 0.1066  loss_cls: 0.2749  acc: 87.7930  loss_bbox: nan
2025/05/19 13:43:51 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:43:53 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:43:55 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.755 0.554 -1.000 0.319 0.494
2025/05/19 13:43:55 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3190  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0365
2025/05/19 13:44:13 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:24  time: 0.3662  data_time: 0.0050  memory: 4362  loss: nan  loss_rpn_cls: 0.0397  loss_rpn_bbox: 0.1055  loss_cls: 0.2712  acc: 87.1094  loss_bbox: nan
2025/05/19 13:44:14 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:44:31 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3661  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1056  loss_cls: 0.2701  acc: 90.9668  loss_bbox: nan
2025/05/19 13:44:46 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:44:48 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:44:49 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.754 0.550 -1.000 0.316 0.495
2025/05/19 13:44:49 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4950  data_time: 0.0015  time: 0.0365
2025/05/19 13:45:08 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3661  data_time: 0.0049  memory: 4362  loss: nan  loss_rpn_cls: 0.0353  loss_rpn_bbox: 0.1037  loss_cls: 0.2623  acc: 89.0625  loss_bbox: nan
2025/05/19 13:45:27 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3799  data_time: 0.0024  memory: 4362  loss: nan  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.1061  loss_cls: 0.2732  acc: 90.7227  loss_bbox: nan
2025/05/19 13:45:42 - mmengine - INFO - Exp name: fasterrcnn_fs_shear_x_20250519_131756
2025/05/19 13:45:42 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 13:45:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:45:47 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.755 0.547 -1.000 0.313 0.494
2025/05/19 13:45:47 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0394
