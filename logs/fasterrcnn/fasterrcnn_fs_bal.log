2025/05/11 18:55:02 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1373557261
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1373557261
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 18:55:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/11 18:55:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 18:55:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 18:55:04 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/11 18:55:04 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/11 18:55:04 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/11 18:55:05 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 18:55:05 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 18:55:05 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/11 18:55:29 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:34:32  time: 0.4958  data_time: 0.1003  memory: 4362  loss: 2.2061  loss_rpn_cls: 0.6387  loss_rpn_bbox: 0.2532  loss_cls: 0.8790  acc: 75.0000  loss_bbox: 0.4352
2025/05/11 18:55:48 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:30:03  time: 0.3778  data_time: 0.0023  memory: 4362  loss: 1.9109  loss_rpn_cls: 0.3458  loss_rpn_bbox: 0.2221  loss_cls: 0.6433  acc: 77.0508  loss_bbox: 0.6997
2025/05/11 18:56:04 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 18:56:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 18:56:15 - mmengine - INFO - bbox_mAP_copypaste: 0.151 0.364 0.073 -1.000 0.045 0.174
2025/05/11 18:56:15 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1510  coco/bbox_mAP_50: 0.3640  coco/bbox_mAP_75: 0.0730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0450  coco/bbox_mAP_l: 0.1740  data_time: 0.1648  time: 0.2061
2025/05/11 18:56:16 - mmengine - INFO - The best checkpoint with 0.1510 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 18:56:35 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:27:22  time: 0.3717  data_time: 0.0050  memory: 4362  loss: 1.5299  loss_rpn_cls: 0.1567  loss_rpn_bbox: 0.1994  loss_cls: 0.5357  acc: 80.1758  loss_bbox: 0.6382
2025/05/11 18:56:53 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:26  time: 0.3637  data_time: 0.0024  memory: 4362  loss: 1.4167  loss_rpn_cls: 0.1317  loss_rpn_bbox: 0.1862  loss_cls: 0.5078  acc: 84.0332  loss_bbox: 0.5909
2025/05/11 18:57:07 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 18:57:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 18:57:11 - mmengine - INFO - bbox_mAP_copypaste: 0.271 0.532 0.237 -1.000 0.212 0.287
2025/05/11 18:57:11 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2710  coco/bbox_mAP_50: 0.5320  coco/bbox_mAP_75: 0.2370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.2870  data_time: 0.0017  time: 0.0375
2025/05/11 18:57:11 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 18:57:12 - mmengine - INFO - The best checkpoint with 0.2710 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 18:57:30 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:10  time: 0.3663  data_time: 0.0052  memory: 4362  loss: 1.3042  loss_rpn_cls: 0.1021  loss_rpn_bbox: 0.1702  loss_cls: 0.4700  acc: 81.4941  loss_bbox: 0.5620
2025/05/11 18:57:48 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:36  time: 0.3581  data_time: 0.0025  memory: 4362  loss: 1.2291  loss_rpn_cls: 0.0887  loss_rpn_bbox: 0.1678  loss_cls: 0.4504  acc: 84.1309  loss_bbox: 0.5223
2025/05/11 18:58:02 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 18:58:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 18:58:06 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.636 0.354 -1.000 0.242 0.375
2025/05/11 18:58:06 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6360  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2420  coco/bbox_mAP_l: 0.3750  data_time: 0.0016  time: 0.0370
2025/05/11 18:58:06 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 18:58:07 - mmengine - INFO - The best checkpoint with 0.3540 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 18:58:25 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:46  time: 0.3653  data_time: 0.0052  memory: 4362  loss: 1.0977  loss_rpn_cls: 0.0775  loss_rpn_bbox: 0.1479  loss_cls: 0.3956  acc: 86.9629  loss_bbox: 0.4767
2025/05/11 18:58:43 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:20  time: 0.3597  data_time: 0.0025  memory: 4362  loss: 1.1101  loss_rpn_cls: 0.0787  loss_rpn_bbox: 0.1492  loss_cls: 0.4015  acc: 86.2305  loss_bbox: 0.4807
2025/05/11 18:58:57 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 18:58:59 - mmengine - INFO - Evaluating bbox...
2025/05/11 18:59:01 - mmengine - INFO - bbox_mAP_copypaste: 0.420 0.743 0.441 -1.000 0.254 0.447
2025/05/11 18:59:01 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.4200  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.4410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2540  coco/bbox_mAP_l: 0.4470  data_time: 0.0016  time: 0.0369
2025/05/11 18:59:01 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 18:59:02 - mmengine - INFO - The best checkpoint with 0.4200 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 18:59:20 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:36  time: 0.3649  data_time: 0.0052  memory: 4362  loss: 1.0160  loss_rpn_cls: 0.0665  loss_rpn_bbox: 0.1383  loss_cls: 0.3668  acc: 85.7853  loss_bbox: 0.4445
2025/05/11 18:59:38 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:14  time: 0.3626  data_time: 0.0025  memory: 4362  loss: 1.0248  loss_rpn_cls: 0.0684  loss_rpn_bbox: 0.1363  loss_cls: 0.3674  acc: 85.2051  loss_bbox: 0.4527
2025/05/11 18:59:53 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 18:59:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 18:59:56 - mmengine - INFO - bbox_mAP_copypaste: 0.374 0.640 0.404 -1.000 0.253 0.400
2025/05/11 18:59:56 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3740  coco/bbox_mAP_50: 0.6400  coco/bbox_mAP_75: 0.4040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2530  coco/bbox_mAP_l: 0.4000  data_time: 0.0017  time: 0.0373
2025/05/11 19:00:14 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:36  time: 0.3675  data_time: 0.0050  memory: 4362  loss: 0.9606  loss_rpn_cls: 0.0607  loss_rpn_bbox: 0.1311  loss_cls: 0.3467  acc: 89.0625  loss_bbox: 0.4221
2025/05/11 19:00:33 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:15  time: 0.3604  data_time: 0.0024  memory: 4362  loss: 0.9252  loss_rpn_cls: 0.0518  loss_rpn_bbox: 0.1233  loss_cls: 0.3350  acc: 85.4492  loss_bbox: 0.4152
2025/05/11 19:00:47 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:00:49 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:00:51 - mmengine - INFO - bbox_mAP_copypaste: 0.430 0.720 0.489 -1.000 0.277 0.459
2025/05/11 19:00:51 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4300  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.4890  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2770  coco/bbox_mAP_l: 0.4590  data_time: 0.0015  time: 0.0368
2025/05/11 19:00:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 19:00:51 - mmengine - INFO - The best checkpoint with 0.4300 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 19:01:10 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:39  time: 0.3709  data_time: 0.0049  memory: 4362  loss: 0.9070  loss_rpn_cls: 0.0482  loss_rpn_bbox: 0.1254  loss_cls: 0.3260  acc: 90.0391  loss_bbox: 0.4075
2025/05/11 19:01:28 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:19  time: 0.3640  data_time: 0.0025  memory: 4362  loss: 0.8922  loss_rpn_cls: 0.0472  loss_rpn_bbox: 0.1214  loss_cls: 0.3217  acc: 86.0352  loss_bbox: 0.4019
2025/05/11 19:01:43 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:01:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:01:46 - mmengine - INFO - bbox_mAP_copypaste: 0.421 0.722 0.470 -1.000 0.280 0.447
2025/05/11 19:01:46 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4210  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.4700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2800  coco/bbox_mAP_l: 0.4470  data_time: 0.0015  time: 0.0380
2025/05/11 19:01:51 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:02:05 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:44  time: 0.3659  data_time: 0.0050  memory: 4362  loss: 0.8650  loss_rpn_cls: 0.0452  loss_rpn_bbox: 0.1215  loss_cls: 0.3053  acc: 90.6738  loss_bbox: 0.3930
2025/05/11 19:02:23 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:24  time: 0.3611  data_time: 0.0023  memory: 4362  loss: 0.8385  loss_rpn_cls: 0.0398  loss_rpn_bbox: 0.1162  loss_cls: 0.2995  acc: 85.8911  loss_bbox: 0.3830
2025/05/11 19:02:38 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:02:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:02:41 - mmengine - INFO - bbox_mAP_copypaste: 0.417 0.721 0.445 -1.000 0.252 0.440
2025/05/11 19:02:41 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4170  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.4450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.4400  data_time: 0.0017  time: 0.0370
2025/05/11 19:02:59 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:49  time: 0.3716  data_time: 0.0050  memory: 4362  loss: 0.7730  loss_rpn_cls: 0.0329  loss_rpn_bbox: 0.1034  loss_cls: 0.2747  acc: 91.4551  loss_bbox: 0.3620
2025/05/11 19:03:18 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:30  time: 0.3665  data_time: 0.0024  memory: 4362  loss: 0.7260  loss_rpn_cls: 0.0283  loss_rpn_bbox: 0.0971  loss_cls: 0.2565  acc: 87.8418  loss_bbox: 0.3441
2025/05/11 19:03:33 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:03:34 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:03:36 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.746 0.541 -1.000 0.292 0.490
2025/05/11 19:03:36 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0363
2025/05/11 19:03:36 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 19:03:37 - mmengine - INFO - The best checkpoint with 0.4620 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/11 19:03:55 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:56  time: 0.3737  data_time: 0.0050  memory: 4362  loss: 0.6800  loss_rpn_cls: 0.0237  loss_rpn_bbox: 0.0938  loss_cls: 0.2335  acc: 93.6035  loss_bbox: 0.3290
2025/05/11 19:04:14 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:38  time: 0.3669  data_time: 0.0024  memory: 4362  loss: 0.6909  loss_rpn_cls: 0.0266  loss_rpn_bbox: 0.0953  loss_cls: 0.2341  acc: 91.8457  loss_bbox: 0.3349
2025/05/11 19:04:29 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:04:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:04:32 - mmengine - INFO - bbox_mAP_copypaste: 0.474 0.759 0.558 -1.000 0.294 0.502
2025/05/11 19:04:32 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4740  coco/bbox_mAP_50: 0.7590  coco/bbox_mAP_75: 0.5580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.5020  data_time: 0.0016  time: 0.0366
2025/05/11 19:04:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/11 19:04:33 - mmengine - INFO - The best checkpoint with 0.4740 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/11 19:04:51 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:04  time: 0.3721  data_time: 0.0050  memory: 4362  loss: 0.6747  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0933  loss_cls: 0.2310  acc: 91.4062  loss_bbox: 0.3264
2025/05/11 19:05:10 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:45  time: 0.3686  data_time: 0.0023  memory: 4362  loss: 0.6787  loss_rpn_cls: 0.0237  loss_rpn_bbox: 0.0941  loss_cls: 0.2309  acc: 94.5801  loss_bbox: 0.3301
2025/05/11 19:05:25 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:05:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:05:28 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.736 0.544 -1.000 0.302 0.487
2025/05/11 19:05:28 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4870  data_time: 0.0017  time: 0.0365
2025/05/11 19:05:46 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:11  time: 0.3679  data_time: 0.0049  memory: 4362  loss: 0.6470  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0907  loss_cls: 0.2163  acc: 92.4805  loss_bbox: 0.3174
2025/05/11 19:06:05 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:52  time: 0.3687  data_time: 0.0023  memory: 4362  loss: 0.6557  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0916  loss_cls: 0.2203  acc: 92.3340  loss_bbox: 0.3213
2025/05/11 19:06:20 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:06:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:06:23 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.741 0.543 -1.000 0.304 0.490
2025/05/11 19:06:23 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4900  data_time: 0.0015  time: 0.0360
2025/05/11 19:06:41 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:18  time: 0.3675  data_time: 0.0051  memory: 4362  loss: 0.6556  loss_rpn_cls: 0.0217  loss_rpn_bbox: 0.0897  loss_cls: 0.2252  acc: 93.4082  loss_bbox: 0.3190
2025/05/11 19:07:00 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:00  time: 0.3714  data_time: 0.0025  memory: 4362  loss: 0.6499  loss_rpn_cls: 0.0213  loss_rpn_bbox: 0.0929  loss_cls: 0.2129  acc: 91.6016  loss_bbox: 0.3228
2025/05/11 19:07:15 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:07:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:07:18 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.741 0.542 -1.000 0.299 0.490
2025/05/11 19:07:18 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0365
2025/05/11 19:07:37 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:26  time: 0.3727  data_time: 0.0049  memory: 4362  loss: 0.6531  loss_rpn_cls: 0.0217  loss_rpn_bbox: 0.0920  loss_cls: 0.2213  acc: 92.4805  loss_bbox: 0.3181
2025/05/11 19:07:55 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:08  time: 0.3656  data_time: 0.0023  memory: 4362  loss: 0.6556  loss_rpn_cls: 0.0211  loss_rpn_bbox: 0.0906  loss_cls: 0.2225  acc: 90.2832  loss_bbox: 0.3215
2025/05/11 19:08:10 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:08:12 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:08:13 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.738 0.543 -1.000 0.303 0.490
2025/05/11 19:08:13 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0363
2025/05/11 19:08:23 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:08:31 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:34  time: 0.3663  data_time: 0.0048  memory: 4362  loss: 0.6446  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0907  loss_cls: 0.2156  acc: 91.8457  loss_bbox: 0.3176
2025/05/11 19:08:50 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:15  time: 0.3648  data_time: 0.0024  memory: 4362  loss: 0.6487  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0901  loss_cls: 0.2165  acc: 91.2598  loss_bbox: 0.3203
2025/05/11 19:09:05 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:09:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:09:08 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.740 0.548 -1.000 0.302 0.491
2025/05/11 19:09:08 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4910  data_time: 0.0016  time: 0.0376
2025/05/11 19:09:26 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:41  time: 0.3663  data_time: 0.0050  memory: 4362  loss: 0.6422  loss_rpn_cls: 0.0196  loss_rpn_bbox: 0.0902  loss_cls: 0.2165  acc: 90.8203  loss_bbox: 0.3159
2025/05/11 19:09:45 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:23  time: 0.3666  data_time: 0.0023  memory: 4362  loss: 0.6479  loss_rpn_cls: 0.0219  loss_rpn_bbox: 0.0904  loss_cls: 0.2175  acc: 91.1621  loss_bbox: 0.3180
2025/05/11 19:10:00 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:10:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:10:03 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.739 0.542 -1.000 0.300 0.490
2025/05/11 19:10:03 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0365
2025/05/11 19:10:22 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:49  time: 0.3733  data_time: 0.0050  memory: 4362  loss: 0.6553  loss_rpn_cls: 0.0216  loss_rpn_bbox: 0.0914  loss_cls: 0.2219  acc: 91.2598  loss_bbox: 0.3204
2025/05/11 19:10:40 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:31  time: 0.3650  data_time: 0.0023  memory: 4362  loss: 0.6492  loss_rpn_cls: 0.0211  loss_rpn_bbox: 0.0909  loss_cls: 0.2221  acc: 89.9414  loss_bbox: 0.3152
2025/05/11 19:10:55 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:10:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:10:58 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.739 0.540 -1.000 0.300 0.489
2025/05/11 19:10:58 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0363
2025/05/11 19:11:16 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:57  time: 0.3698  data_time: 0.0050  memory: 4362  loss: 0.6433  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0893  loss_cls: 0.2183  acc: 92.1875  loss_bbox: 0.3153
2025/05/11 19:11:35 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:39  time: 0.3687  data_time: 0.0023  memory: 4362  loss: 0.6586  loss_rpn_cls: 0.0220  loss_rpn_bbox: 0.0919  loss_cls: 0.2207  acc: 92.4805  loss_bbox: 0.3240
2025/05/11 19:11:50 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:11:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:11:53 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.745 0.552 -1.000 0.303 0.495
2025/05/11 19:11:53 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0363
2025/05/11 19:12:11 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:05  time: 0.3702  data_time: 0.0050  memory: 4362  loss: 0.6537  loss_rpn_cls: 0.0219  loss_rpn_bbox: 0.0913  loss_cls: 0.2221  acc: 89.3066  loss_bbox: 0.3185
2025/05/11 19:12:30 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:46  time: 0.3687  data_time: 0.0024  memory: 4362  loss: 0.6461  loss_rpn_cls: 0.0214  loss_rpn_bbox: 0.0911  loss_cls: 0.2143  acc: 90.7715  loss_bbox: 0.3193
2025/05/11 19:12:45 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:12:47 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:12:48 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.736 0.538 -1.000 0.301 0.487
2025/05/11 19:12:48 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0363
2025/05/11 19:13:07 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:13  time: 0.3731  data_time: 0.0048  memory: 4362  loss: 0.6505  loss_rpn_cls: 0.0220  loss_rpn_bbox: 0.0923  loss_cls: 0.2161  acc: 92.9199  loss_bbox: 0.3200
2025/05/11 19:13:25 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:55  time: 0.3691  data_time: 0.0023  memory: 4362  loss: 0.6419  loss_rpn_cls: 0.0203  loss_rpn_bbox: 0.0907  loss_cls: 0.2132  acc: 90.5273  loss_bbox: 0.3177
2025/05/11 19:13:40 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:13:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:13:43 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.739 0.544 -1.000 0.300 0.491
2025/05/11 19:13:43 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4910  data_time: 0.0017  time: 0.0362
2025/05/11 19:14:01 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:21  time: 0.3669  data_time: 0.0050  memory: 4362  loss: 0.6348  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0890  loss_cls: 0.2127  acc: 91.1621  loss_bbox: 0.3141
2025/05/11 19:14:20 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:02  time: 0.3672  data_time: 0.0025  memory: 4362  loss: 0.6469  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0915  loss_cls: 0.2177  acc: 89.7461  loss_bbox: 0.3173
2025/05/11 19:14:35 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:14:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:14:38 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.743 0.545 -1.000 0.299 0.492
2025/05/11 19:14:38 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4920  data_time: 0.0017  time: 0.0362
2025/05/11 19:14:52 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:14:56 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:29  time: 0.3679  data_time: 0.0050  memory: 4362  loss: 0.6387  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0892  loss_cls: 0.2160  acc: 90.5273  loss_bbox: 0.3139
2025/05/11 19:15:15 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:10  time: 0.3660  data_time: 0.0024  memory: 4362  loss: 0.6436  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0903  loss_cls: 0.2183  acc: 93.0176  loss_bbox: 0.3143
2025/05/11 19:15:30 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:15:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:15:33 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.739 0.541 -1.000 0.299 0.489
2025/05/11 19:15:33 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4890  data_time: 0.0015  time: 0.0361
2025/05/11 19:15:51 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:37  time: 0.3677  data_time: 0.0049  memory: 4362  loss: 0.6477  loss_rpn_cls: 0.0225  loss_rpn_bbox: 0.0905  loss_cls: 0.2170  acc: 91.8457  loss_bbox: 0.3176
2025/05/11 19:16:09 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:18  time: 0.3631  data_time: 0.0024  memory: 4362  loss: 0.6364  loss_rpn_cls: 0.0212  loss_rpn_bbox: 0.0890  loss_cls: 0.2146  acc: 90.6738  loss_bbox: 0.3115
2025/05/11 19:16:24 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:16:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:16:28 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.742 0.546 -1.000 0.298 0.493
2025/05/11 19:16:28 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4930  data_time: 0.0016  time: 0.0363
2025/05/11 19:16:46 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:45  time: 0.3690  data_time: 0.0048  memory: 4362  loss: 0.6370  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0911  loss_cls: 0.2140  acc: 92.2363  loss_bbox: 0.3128
2025/05/11 19:17:04 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:26  time: 0.3620  data_time: 0.0023  memory: 4362  loss: 0.6367  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0891  loss_cls: 0.2126  acc: 92.3340  loss_bbox: 0.3150
2025/05/11 19:17:19 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:17:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:17:22 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.736 0.537 -1.000 0.296 0.487
2025/05/11 19:17:22 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0366
2025/05/11 19:17:41 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:53  time: 0.3732  data_time: 0.0050  memory: 4362  loss: 0.6387  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0912  loss_cls: 0.2110  acc: 90.6250  loss_bbox: 0.3166
2025/05/11 19:17:59 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:34  time: 0.3639  data_time: 0.0022  memory: 4362  loss: 0.6364  loss_rpn_cls: 0.0206  loss_rpn_bbox: 0.0887  loss_cls: 0.2140  acc: 92.1875  loss_bbox: 0.3131
2025/05/11 19:18:14 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:18:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:18:17 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.739 0.542 -1.000 0.296 0.491
2025/05/11 19:18:17 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4910  data_time: 0.0017  time: 0.0363
2025/05/11 19:18:36 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:01  time: 0.3734  data_time: 0.0049  memory: 4362  loss: 0.6344  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0902  loss_cls: 0.2127  acc: 91.4062  loss_bbox: 0.3124
2025/05/11 19:18:54 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3637  data_time: 0.0022  memory: 4362  loss: 0.6271  loss_rpn_cls: 0.0181  loss_rpn_bbox: 0.0892  loss_cls: 0.2088  acc: 91.7480  loss_bbox: 0.3109
2025/05/11 19:19:09 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:19:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:19:12 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.735 0.541 -1.000 0.299 0.486
2025/05/11 19:19:12 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0359
2025/05/11 19:19:31 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3685  data_time: 0.0049  memory: 4362  loss: 0.6288  loss_rpn_cls: 0.0205  loss_rpn_bbox: 0.0888  loss_cls: 0.2113  acc: 90.6738  loss_bbox: 0.3083
2025/05/11 19:19:49 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3701  data_time: 0.0024  memory: 4362  loss: 0.6375  loss_rpn_cls: 0.0203  loss_rpn_bbox: 0.0906  loss_cls: 0.2115  acc: 90.7227  loss_bbox: 0.3150
2025/05/11 19:20:04 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:20:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:20:07 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.738 0.544 -1.000 0.300 0.488
2025/05/11 19:20:07 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0363
2025/05/11 19:20:26 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3640  data_time: 0.0051  memory: 4362  loss: 0.6316  loss_rpn_cls: 0.0178  loss_rpn_bbox: 0.0889  loss_cls: 0.2146  acc: 89.5996  loss_bbox: 0.3103
2025/05/11 19:20:44 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3707  data_time: 0.0024  memory: 4362  loss: 0.6415  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0903  loss_cls: 0.2166  acc: 91.9922  loss_bbox: 0.3147
2025/05/11 19:20:59 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:21:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:21:02 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.741 0.544 -1.000 0.296 0.491
2025/05/11 19:21:02 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4910  data_time: 0.0015  time: 0.0362
2025/05/11 19:21:21 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3681  data_time: 0.0048  memory: 4362  loss: 0.6358  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0899  loss_cls: 0.2138  acc: 90.7227  loss_bbox: 0.3133
2025/05/11 19:21:21 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:21:39 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3694  data_time: 0.0024  memory: 4362  loss: 0.6414  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0896  loss_cls: 0.2168  acc: 91.5527  loss_bbox: 0.3147
2025/05/11 19:21:54 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:21:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:21:57 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.736 0.538 -1.000 0.298 0.488
2025/05/11 19:21:57 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0364
2025/05/11 19:22:16 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3685  data_time: 0.0050  memory: 4362  loss: 0.6350  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0894  loss_cls: 0.2117  acc: 89.3066  loss_bbox: 0.3138
2025/05/11 19:22:34 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3604  data_time: 0.0023  memory: 4362  loss: 0.6258  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0885  loss_cls: 0.2100  acc: 92.1387  loss_bbox: 0.3086
2025/05/11 19:22:49 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_20250511_185457
2025/05/11 19:22:49 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 19:22:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:22:54 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.740 0.544 -1.000 0.298 0.492
2025/05/11 19:22:54 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4920  data_time: 0.0015  time: 0.0362
