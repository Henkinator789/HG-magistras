2025/05/19 11:39:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1556339094
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1556339094
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 11:39:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 11:39:35 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 11:39:35 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 11:39:36 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 11:39:36 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 11:39:36 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 11:39:36 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 11:39:36 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 11:39:36 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 11:39:59 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:26  time: 0.4657  data_time: 0.0917  memory: 4361  loss: 2.1776  loss_rpn_cls: 0.6031  loss_rpn_bbox: 0.2513  loss_cls: 0.8794  acc: 75.0000  loss_bbox: 0.4437
2025/05/19 11:40:18 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:49  time: 0.3718  data_time: 0.0023  memory: 4361  loss: 1.9205  loss_rpn_cls: 0.3469  loss_rpn_bbox: 0.2248  loss_cls: 0.6580  acc: 77.0020  loss_bbox: 0.6908
2025/05/19 11:40:33 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:40:43 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:40:45 - mmengine - INFO - bbox_mAP_copypaste: 0.108 0.232 0.069 -1.000 0.031 0.118
2025/05/19 11:40:45 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1080  coco/bbox_mAP_50: 0.2320  coco/bbox_mAP_75: 0.0690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0310  coco/bbox_mAP_l: 0.1180  data_time: 0.1644  time: 0.2053
2025/05/19 11:40:46 - mmengine - INFO - The best checkpoint with 0.1080 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 11:41:04 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:41  time: 0.3716  data_time: 0.0051  memory: 4361  loss: 1.5726  loss_rpn_cls: 0.1742  loss_rpn_bbox: 0.2060  loss_cls: 0.5523  acc: 75.6348  loss_bbox: 0.6401
2025/05/19 11:41:22 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:52  time: 0.3611  data_time: 0.0024  memory: 4361  loss: 1.3968  loss_rpn_cls: 0.1222  loss_rpn_bbox: 0.1836  loss_cls: 0.4985  acc: 80.7316  loss_bbox: 0.5925
2025/05/19 11:41:37 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:41:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:41:40 - mmengine - INFO - bbox_mAP_copypaste: 0.312 0.589 0.285 -1.000 0.184 0.340
2025/05/19 11:41:40 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3120  coco/bbox_mAP_50: 0.5890  coco/bbox_mAP_75: 0.2850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.3400  data_time: 0.0017  time: 0.0376
2025/05/19 11:41:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 11:41:41 - mmengine - INFO - The best checkpoint with 0.3120 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 11:41:59 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:49  time: 0.3686  data_time: 0.0050  memory: 4361  loss: 1.2882  loss_rpn_cls: 0.1035  loss_rpn_bbox: 0.1714  loss_cls: 0.4596  acc: 85.2051  loss_bbox: 0.5537
2025/05/19 11:42:17 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:19  time: 0.3601  data_time: 0.0023  memory: 4361  loss: 1.2268  loss_rpn_cls: 0.0903  loss_rpn_bbox: 0.1681  loss_cls: 0.4478  acc: 81.0120  loss_bbox: 0.5207
2025/05/19 11:42:32 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:42:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:42:35 - mmengine - INFO - bbox_mAP_copypaste: 0.308 0.581 0.292 -1.000 0.210 0.329
2025/05/19 11:42:35 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3080  coco/bbox_mAP_50: 0.5810  coco/bbox_mAP_75: 0.2920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3290  data_time: 0.0016  time: 0.0374
2025/05/19 11:42:53 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:28  time: 0.3584  data_time: 0.0050  memory: 4361  loss: 1.2308  loss_rpn_cls: 0.0878  loss_rpn_bbox: 0.1619  loss_cls: 0.4594  acc: 84.4250  loss_bbox: 0.5216
2025/05/19 11:43:11 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:05  time: 0.3634  data_time: 0.0024  memory: 4361  loss: 1.1551  loss_rpn_cls: 0.0865  loss_rpn_bbox: 0.1534  loss_cls: 0.4264  acc: 85.6445  loss_bbox: 0.4888
2025/05/19 11:43:26 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:43:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:43:29 - mmengine - INFO - bbox_mAP_copypaste: 0.385 0.702 0.380 -1.000 0.260 0.409
2025/05/19 11:43:29 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3850  coco/bbox_mAP_50: 0.7020  coco/bbox_mAP_75: 0.3800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2600  coco/bbox_mAP_l: 0.4090  data_time: 0.0015  time: 0.0375
2025/05/19 11:43:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 11:43:30 - mmengine - INFO - The best checkpoint with 0.3850 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/19 11:43:48 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:24  time: 0.3655  data_time: 0.0049  memory: 4361  loss: 1.1005  loss_rpn_cls: 0.0778  loss_rpn_bbox: 0.1544  loss_cls: 0.4014  acc: 87.3047  loss_bbox: 0.4670
2025/05/19 11:44:06 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:03  time: 0.3607  data_time: 0.0024  memory: 4361  loss: 1.0382  loss_rpn_cls: 0.0692  loss_rpn_bbox: 0.1416  loss_cls: 0.3766  acc: 84.8145  loss_bbox: 0.4508
2025/05/19 11:44:21 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:44:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:44:24 - mmengine - INFO - bbox_mAP_copypaste: 0.411 0.700 0.439 -1.000 0.279 0.432
2025/05/19 11:44:24 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4110  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.4390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2790  coco/bbox_mAP_l: 0.4320  data_time: 0.0016  time: 0.0369
2025/05/19 11:44:24 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/19 11:44:25 - mmengine - INFO - The best checkpoint with 0.4110 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 11:44:44 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:26  time: 0.3674  data_time: 0.0050  memory: 4361  loss: 0.9965  loss_rpn_cls: 0.0617  loss_rpn_bbox: 0.1339  loss_cls: 0.3630  acc: 85.1074  loss_bbox: 0.4379
2025/05/19 11:45:02 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:06  time: 0.3623  data_time: 0.0023  memory: 4361  loss: 0.9516  loss_rpn_cls: 0.0551  loss_rpn_bbox: 0.1262  loss_cls: 0.3434  acc: 85.9863  loss_bbox: 0.4270
2025/05/19 11:45:17 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:45:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:45:20 - mmengine - INFO - bbox_mAP_copypaste: 0.407 0.690 0.452 -1.000 0.261 0.434
2025/05/19 11:45:20 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4070  coco/bbox_mAP_50: 0.6900  coco/bbox_mAP_75: 0.4520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2610  coco/bbox_mAP_l: 0.4340  data_time: 0.0018  time: 0.0369
2025/05/19 11:45:38 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:30  time: 0.3639  data_time: 0.0050  memory: 4361  loss: 0.9099  loss_rpn_cls: 0.0521  loss_rpn_bbox: 0.1232  loss_cls: 0.3271  acc: 87.5488  loss_bbox: 0.4075
2025/05/19 11:45:56 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:10  time: 0.3616  data_time: 0.0022  memory: 4361  loss: 0.9426  loss_rpn_cls: 0.0568  loss_rpn_bbox: 0.1207  loss_cls: 0.3441  acc: 82.9102  loss_bbox: 0.4210
2025/05/19 11:46:11 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:46:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:46:14 - mmengine - INFO - bbox_mAP_copypaste: 0.434 0.709 0.504 -1.000 0.285 0.462
2025/05/19 11:46:14 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4340  coco/bbox_mAP_50: 0.7090  coco/bbox_mAP_75: 0.5040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2850  coco/bbox_mAP_l: 0.4620  data_time: 0.0016  time: 0.0367
2025/05/19 11:46:14 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 11:46:15 - mmengine - INFO - The best checkpoint with 0.4340 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/19 11:46:20 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:46:33 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:35  time: 0.3688  data_time: 0.0047  memory: 4362  loss: 0.8745  loss_rpn_cls: 0.0457  loss_rpn_bbox: 0.1188  loss_cls: 0.3127  acc: 88.8672  loss_bbox: 0.3973
2025/05/19 11:46:51 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:16  time: 0.3614  data_time: 0.0023  memory: 4361  loss: 0.8735  loss_rpn_cls: 0.0486  loss_rpn_bbox: 0.1183  loss_cls: 0.3140  acc: 88.1348  loss_bbox: 0.3926
2025/05/19 11:47:06 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:47:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:47:10 - mmengine - INFO - bbox_mAP_copypaste: 0.429 0.717 0.486 -1.000 0.275 0.459
2025/05/19 11:47:10 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4290  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.4860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2750  coco/bbox_mAP_l: 0.4590  data_time: 0.0015  time: 0.0365
2025/05/19 11:47:28 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:42  time: 0.3721  data_time: 0.0050  memory: 4361  loss: 0.8119  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.1068  loss_cls: 0.2889  acc: 90.2344  loss_bbox: 0.3757
2025/05/19 11:47:46 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:23  time: 0.3619  data_time: 0.0023  memory: 4361  loss: 0.7561  loss_rpn_cls: 0.0371  loss_rpn_bbox: 0.1000  loss_cls: 0.2582  acc: 87.6465  loss_bbox: 0.3607
2025/05/19 11:48:01 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:48:03 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:48:05 - mmengine - INFO - bbox_mAP_copypaste: 0.481 0.772 0.570 -1.000 0.320 0.507
2025/05/19 11:48:05 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4810  coco/bbox_mAP_50: 0.7720  coco/bbox_mAP_75: 0.5700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3200  coco/bbox_mAP_l: 0.5070  data_time: 0.0016  time: 0.0364
2025/05/19 11:48:05 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/19 11:48:05 - mmengine - INFO - The best checkpoint with 0.4810 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 11:48:24 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:50  time: 0.3750  data_time: 0.0048  memory: 4361  loss: 0.7535  loss_rpn_cls: 0.0343  loss_rpn_bbox: 0.0998  loss_cls: 0.2628  acc: 91.1621  loss_bbox: 0.3565
2025/05/19 11:48:42 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:32  time: 0.3648  data_time: 0.0023  memory: 4361  loss: 0.7338  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0994  loss_cls: 0.2548  acc: 88.4277  loss_bbox: 0.3507
2025/05/19 11:48:57 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:48:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:49:01 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.748 0.547 -1.000 0.306 0.492
2025/05/19 11:49:01 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0365
2025/05/19 11:49:19 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:58  time: 0.3670  data_time: 0.0049  memory: 4361  loss: 0.7339  loss_rpn_cls: 0.0345  loss_rpn_bbox: 0.0981  loss_cls: 0.2516  acc: 89.6484  loss_bbox: 0.3497
2025/05/19 11:49:37 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:40  time: 0.3691  data_time: 0.0023  memory: 4361  loss: 0.7465  loss_rpn_cls: 0.0332  loss_rpn_bbox: 0.0994  loss_cls: 0.2584  acc: 89.2090  loss_bbox: 0.3554
2025/05/19 11:49:52 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:49:54 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:49:56 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.738 0.548 -1.000 0.301 0.490
2025/05/19 11:49:56 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4900  data_time: 0.0015  time: 0.0363
2025/05/19 11:50:14 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:06  time: 0.3675  data_time: 0.0047  memory: 4361  loss: 0.7246  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0992  loss_cls: 0.2488  acc: 88.9648  loss_bbox: 0.3463
2025/05/19 11:50:32 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:48  time: 0.3663  data_time: 0.0023  memory: 4361  loss: 0.7200  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0960  loss_cls: 0.2486  acc: 90.4297  loss_bbox: 0.3450
2025/05/19 11:50:47 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:50:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:50:50 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.752 0.555 -1.000 0.310 0.498
2025/05/19 11:50:50 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4980  data_time: 0.0016  time: 0.0362
2025/05/19 11:51:09 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:14  time: 0.3702  data_time: 0.0050  memory: 4361  loss: 0.7406  loss_rpn_cls: 0.0318  loss_rpn_bbox: 0.0993  loss_cls: 0.2551  acc: 90.5762  loss_bbox: 0.3544
2025/05/19 11:51:27 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:56  time: 0.3664  data_time: 0.0023  memory: 4361  loss: 0.7182  loss_rpn_cls: 0.0295  loss_rpn_bbox: 0.0970  loss_cls: 0.2466  acc: 91.8945  loss_bbox: 0.3451
2025/05/19 11:51:42 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:51:44 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:51:45 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.742 0.548 -1.000 0.311 0.492
2025/05/19 11:51:45 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0363
2025/05/19 11:52:04 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:22  time: 0.3671  data_time: 0.0048  memory: 4361  loss: 0.7246  loss_rpn_cls: 0.0300  loss_rpn_bbox: 0.0972  loss_cls: 0.2494  acc: 90.3809  loss_bbox: 0.3479
2025/05/19 11:52:22 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:03  time: 0.3634  data_time: 0.0025  memory: 4361  loss: 0.7191  loss_rpn_cls: 0.0268  loss_rpn_bbox: 0.0972  loss_cls: 0.2476  acc: 90.8691  loss_bbox: 0.3474
2025/05/19 11:52:37 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:52:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:52:40 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.752 0.552 -1.000 0.309 0.497
2025/05/19 11:52:40 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7520  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4970  data_time: 0.0015  time: 0.0361
2025/05/19 11:52:50 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:52:59 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:30  time: 0.3659  data_time: 0.0048  memory: 4361  loss: 0.7062  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0961  loss_cls: 0.2399  acc: 93.3594  loss_bbox: 0.3433
2025/05/19 11:53:17 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:12  time: 0.3677  data_time: 0.0023  memory: 4361  loss: 0.7241  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.0964  loss_cls: 0.2502  acc: 90.5762  loss_bbox: 0.3460
2025/05/19 11:53:32 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:53:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:53:35 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.753 0.551 -1.000 0.316 0.498
2025/05/19 11:53:35 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7530  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4980  data_time: 0.0017  time: 0.0360
2025/05/19 11:53:54 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:38  time: 0.3696  data_time: 0.0048  memory: 4361  loss: 0.7298  loss_rpn_cls: 0.0311  loss_rpn_bbox: 0.0972  loss_cls: 0.2552  acc: 88.1836  loss_bbox: 0.3462
2025/05/19 11:54:12 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:20  time: 0.3655  data_time: 0.0023  memory: 4361  loss: 0.7199  loss_rpn_cls: 0.0322  loss_rpn_bbox: 0.0968  loss_cls: 0.2452  acc: 92.6758  loss_bbox: 0.3456
2025/05/19 11:54:27 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:54:29 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:54:30 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.743 0.548 -1.000 0.309 0.493
2025/05/19 11:54:30 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4930  data_time: 0.0016  time: 0.0364
2025/05/19 11:54:49 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:46  time: 0.3718  data_time: 0.0048  memory: 4361  loss: 0.7249  loss_rpn_cls: 0.0321  loss_rpn_bbox: 0.0964  loss_cls: 0.2502  acc: 92.7734  loss_bbox: 0.3462
2025/05/19 11:55:07 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:28  time: 0.3658  data_time: 0.0022  memory: 4361  loss: 0.7150  loss_rpn_cls: 0.0280  loss_rpn_bbox: 0.0962  loss_cls: 0.2461  acc: 91.5039  loss_bbox: 0.3446
2025/05/19 11:55:22 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:55:24 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:55:25 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.742 0.540 -1.000 0.313 0.490
2025/05/19 11:55:25 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4900  data_time: 0.0015  time: 0.0363
2025/05/19 11:55:44 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:55  time: 0.3704  data_time: 0.0049  memory: 4361  loss: 0.7191  loss_rpn_cls: 0.0305  loss_rpn_bbox: 0.0970  loss_cls: 0.2471  acc: 87.6953  loss_bbox: 0.3445
2025/05/19 11:56:02 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:36  time: 0.3659  data_time: 0.0023  memory: 4361  loss: 0.7162  loss_rpn_cls: 0.0316  loss_rpn_bbox: 0.0971  loss_cls: 0.2430  acc: 91.9922  loss_bbox: 0.3445
2025/05/19 11:56:17 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:56:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:56:20 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.745 0.545 -1.000 0.309 0.494
2025/05/19 11:56:20 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0363
2025/05/19 11:56:39 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:03  time: 0.3699  data_time: 0.0047  memory: 4361  loss: 0.7232  loss_rpn_cls: 0.0317  loss_rpn_bbox: 0.0974  loss_cls: 0.2483  acc: 87.9883  loss_bbox: 0.3458
2025/05/19 11:56:57 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:44  time: 0.3684  data_time: 0.0023  memory: 4361  loss: 0.7152  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0980  loss_cls: 0.2457  acc: 89.9902  loss_bbox: 0.3435
2025/05/19 11:57:12 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:57:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:57:15 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.745 0.544 -1.000 0.306 0.495
2025/05/19 11:57:15 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0360
2025/05/19 11:57:33 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:11  time: 0.3691  data_time: 0.0050  memory: 4361  loss: 0.7071  loss_rpn_cls: 0.0276  loss_rpn_bbox: 0.0964  loss_cls: 0.2402  acc: 89.7949  loss_bbox: 0.3429
2025/05/19 11:57:52 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:52  time: 0.3685  data_time: 0.0022  memory: 4361  loss: 0.7058  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0957  loss_cls: 0.2406  acc: 88.8672  loss_bbox: 0.3396
2025/05/19 11:58:07 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:58:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:58:10 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.748 0.553 -1.000 0.315 0.498
2025/05/19 11:58:10 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4980  data_time: 0.0016  time: 0.0361
2025/05/19 11:58:29 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:19  time: 0.3694  data_time: 0.0050  memory: 4361  loss: 0.7151  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0976  loss_cls: 0.2448  acc: 91.1133  loss_bbox: 0.3435
2025/05/19 11:58:47 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:01  time: 0.3678  data_time: 0.0024  memory: 4361  loss: 0.7161  loss_rpn_cls: 0.0291  loss_rpn_bbox: 0.0973  loss_cls: 0.2458  acc: 93.0176  loss_bbox: 0.3439
2025/05/19 11:59:02 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:59:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 11:59:05 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.737 0.541 -1.000 0.309 0.490
2025/05/19 11:59:05 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4900  data_time: 0.0015  time: 0.0363
2025/05/19 11:59:19 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:59:24 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:27  time: 0.3683  data_time: 0.0049  memory: 4361  loss: 0.7169  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.0965  loss_cls: 0.2484  acc: 90.5762  loss_bbox: 0.3412
2025/05/19 11:59:42 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:09  time: 0.3679  data_time: 0.0023  memory: 4361  loss: 0.7241  loss_rpn_cls: 0.0314  loss_rpn_bbox: 0.0974  loss_cls: 0.2493  acc: 89.4043  loss_bbox: 0.3459
2025/05/19 11:59:57 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 11:59:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:00:00 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.749 0.550 -1.000 0.312 0.498
2025/05/19 12:00:00 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4980  data_time: 0.0017  time: 0.0364
2025/05/19 12:00:19 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:36  time: 0.3706  data_time: 0.0049  memory: 4361  loss: 0.7116  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0970  loss_cls: 0.2439  acc: 88.0371  loss_bbox: 0.3404
2025/05/19 12:00:37 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:17  time: 0.3668  data_time: 0.0024  memory: 4361  loss: 0.7211  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0972  loss_cls: 0.2489  acc: 87.6465  loss_bbox: 0.3460
2025/05/19 12:00:52 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:00:54 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:00:55 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.749 0.551 -1.000 0.313 0.497
2025/05/19 12:00:55 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4970  data_time: 0.0017  time: 0.0362
2025/05/19 12:01:14 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:44  time: 0.3712  data_time: 0.0049  memory: 4361  loss: 0.7038  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0949  loss_cls: 0.2429  acc: 89.8926  loss_bbox: 0.3390
2025/05/19 12:01:32 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:25  time: 0.3657  data_time: 0.0023  memory: 4361  loss: 0.7141  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0977  loss_cls: 0.2446  acc: 88.2324  loss_bbox: 0.3429
2025/05/19 12:01:47 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:01:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:01:50 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.749 0.548 -1.000 0.314 0.496
2025/05/19 12:01:50 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0362
2025/05/19 12:02:09 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:52  time: 0.3720  data_time: 0.0048  memory: 4361  loss: 0.7142  loss_rpn_cls: 0.0286  loss_rpn_bbox: 0.0977  loss_cls: 0.2457  acc: 87.6465  loss_bbox: 0.3421
2025/05/19 12:02:27 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:34  time: 0.3665  data_time: 0.0023  memory: 4361  loss: 0.7086  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0964  loss_cls: 0.2399  acc: 89.5996  loss_bbox: 0.3436
2025/05/19 12:02:42 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:02:44 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:02:45 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.750 0.550 -1.000 0.311 0.500
2025/05/19 12:02:45 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7500  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.5000  data_time: 0.0014  time: 0.0360
2025/05/19 12:03:04 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:00  time: 0.3702  data_time: 0.0049  memory: 4361  loss: 0.7127  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.0947  loss_cls: 0.2442  acc: 90.4297  loss_bbox: 0.3452
2025/05/19 12:03:22 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3650  data_time: 0.0023  memory: 4361  loss: 0.7055  loss_rpn_cls: 0.0272  loss_rpn_bbox: 0.0965  loss_cls: 0.2421  acc: 93.9453  loss_bbox: 0.3397
2025/05/19 12:03:37 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:03:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:03:40 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.737 0.543 -1.000 0.308 0.490
2025/05/19 12:03:40 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4900  data_time: 0.0014  time: 0.0361
2025/05/19 12:03:58 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:08  time: 0.3675  data_time: 0.0050  memory: 4361  loss: 0.7209  loss_rpn_cls: 0.0298  loss_rpn_bbox: 0.0976  loss_cls: 0.2504  acc: 89.5020  loss_bbox: 0.3431
2025/05/19 12:04:17 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3668  data_time: 0.0023  memory: 4361  loss: 0.6944  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0941  loss_cls: 0.2348  acc: 91.6992  loss_bbox: 0.3383
2025/05/19 12:04:32 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:04:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:04:35 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.749 0.547 -1.000 0.312 0.498
2025/05/19 12:04:35 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7490  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4980  data_time: 0.0015  time: 0.0361
2025/05/19 12:04:53 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:16  time: 0.3680  data_time: 0.0050  memory: 4361  loss: 0.6973  loss_rpn_cls: 0.0253  loss_rpn_bbox: 0.0940  loss_cls: 0.2425  acc: 91.4062  loss_bbox: 0.3356
2025/05/19 12:05:12 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3714  data_time: 0.0023  memory: 4361  loss: 0.7156  loss_rpn_cls: 0.0284  loss_rpn_bbox: 0.0967  loss_cls: 0.2468  acc: 89.9414  loss_bbox: 0.3438
2025/05/19 12:05:27 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:05:29 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:05:30 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.747 0.552 -1.000 0.317 0.495
2025/05/19 12:05:30 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0366
2025/05/19 12:05:49 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3687  data_time: 0.0049  memory: 4361  loss: 0.7041  loss_rpn_cls: 0.0280  loss_rpn_bbox: 0.0952  loss_cls: 0.2442  acc: 92.0410  loss_bbox: 0.3366
2025/05/19 12:05:49 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:06:07 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3698  data_time: 0.0022  memory: 4361  loss: 0.7175  loss_rpn_cls: 0.0300  loss_rpn_bbox: 0.0975  loss_cls: 0.2446  acc: 90.4785  loss_bbox: 0.3454
2025/05/19 12:06:22 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:06:24 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:06:25 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.741 0.548 -1.000 0.308 0.494
2025/05/19 12:06:25 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4940  data_time: 0.0015  time: 0.0362
2025/05/19 12:06:44 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3676  data_time: 0.0049  memory: 4361  loss: 0.7085  loss_rpn_cls: 0.0272  loss_rpn_bbox: 0.0959  loss_cls: 0.2461  acc: 88.5742  loss_bbox: 0.3393
2025/05/19 12:07:02 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3732  data_time: 0.0023  memory: 4361  loss: 0.7236  loss_rpn_cls: 0.0302  loss_rpn_bbox: 0.0976  loss_cls: 0.2481  acc: 89.3066  loss_bbox: 0.3477
2025/05/19 12:07:17 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_20250519_113930
2025/05/19 12:07:17 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 12:07:20 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:07:22 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.748 0.550 -1.000 0.315 0.495
2025/05/19 12:07:22 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0364
