2025/05/10 16:34:25 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1154601384
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1154601384
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/10 16:34:25 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/10 16:34:26 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/10 16:34:26 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/10 16:34:27 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/10 16:34:27 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/10 16:34:27 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/10 16:34:28 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/10 16:34:28 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/10 16:34:28 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/10 16:34:28 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/10 16:34:51 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:33:18  time: 0.4781  data_time: 0.0929  memory: 4363  loss: 2.3267  loss_rpn_cls: 0.5418  loss_rpn_bbox: 0.1745  loss_cls: 0.9267  acc: 76.2695  loss_bbox: 0.6838
2025/05/10 16:35:10 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:26  time: 0.3776  data_time: 0.0024  memory: 4363  loss: 1.2459  loss_rpn_cls: 0.0865  loss_rpn_bbox: 0.1327  loss_cls: 0.5091  acc: 86.1933  loss_bbox: 0.5175
2025/05/10 16:35:25 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:35:35 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:35:37 - mmengine - INFO - bbox_mAP_copypaste: 0.289 0.500 0.315 -1.000 0.154 0.310
2025/05/10 16:35:37 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.2890  coco/bbox_mAP_50: 0.5000  coco/bbox_mAP_75: 0.3150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1540  coco/bbox_mAP_l: 0.3100  data_time: 0.1664  time: 0.2086
2025/05/10 16:35:38 - mmengine - INFO - The best checkpoint with 0.2890 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/10 16:35:56 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:48  time: 0.3700  data_time: 0.0053  memory: 4363  loss: 1.0330  loss_rpn_cls: 0.0635  loss_rpn_bbox: 0.1320  loss_cls: 0.4072  acc: 84.3750  loss_bbox: 0.4303
2025/05/10 16:36:14 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:54  time: 0.3574  data_time: 0.0024  memory: 4363  loss: 0.9822  loss_rpn_cls: 0.0584  loss_rpn_bbox: 0.1201  loss_cls: 0.3898  acc: 79.3313  loss_bbox: 0.4139
2025/05/10 16:36:29 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:36:31 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:36:32 - mmengine - INFO - bbox_mAP_copypaste: 0.377 0.627 0.422 -1.000 0.257 0.405
2025/05/10 16:36:32 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3770  coco/bbox_mAP_50: 0.6270  coco/bbox_mAP_75: 0.4220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2570  coco/bbox_mAP_l: 0.4050  data_time: 0.0017  time: 0.0369
2025/05/10 16:36:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/10 16:36:33 - mmengine - INFO - The best checkpoint with 0.3770 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/10 16:36:51 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:52  time: 0.3676  data_time: 0.0049  memory: 4363  loss: 0.9369  loss_rpn_cls: 0.0482  loss_rpn_bbox: 0.1288  loss_cls: 0.3609  acc: 89.2090  loss_bbox: 0.3990
2025/05/10 16:37:09 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:22  time: 0.3625  data_time: 0.0024  memory: 4363  loss: 0.9381  loss_rpn_cls: 0.0536  loss_rpn_bbox: 0.1276  loss_cls: 0.3572  acc: 85.1699  loss_bbox: 0.3997
2025/05/10 16:37:24 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:37:26 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:37:27 - mmengine - INFO - bbox_mAP_copypaste: 0.398 0.660 0.460 -1.000 0.277 0.416
2025/05/10 16:37:27 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3980  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.4600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2770  coco/bbox_mAP_l: 0.4160  data_time: 0.0017  time: 0.0377
2025/05/10 16:37:27 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/10 16:37:28 - mmengine - INFO - The best checkpoint with 0.3980 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/10 16:37:47 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:37  time: 0.3703  data_time: 0.0050  memory: 4363  loss: 0.8933  loss_rpn_cls: 0.0460  loss_rpn_bbox: 0.1235  loss_cls: 0.3417  acc: 87.7930  loss_bbox: 0.3821
2025/05/10 16:38:05 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:13  time: 0.3646  data_time: 0.0023  memory: 4363  loss: 0.8918  loss_rpn_cls: 0.0473  loss_rpn_bbox: 0.1192  loss_cls: 0.3403  acc: 86.3905  loss_bbox: 0.3850
2025/05/10 16:38:20 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:38:22 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:38:23 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.746 0.531 -1.000 0.298 0.479
2025/05/10 16:38:23 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.5310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4790  data_time: 0.0016  time: 0.0374
2025/05/10 16:38:23 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/10 16:38:24 - mmengine - INFO - The best checkpoint with 0.4540 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/10 16:38:43 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:38  time: 0.3783  data_time: 0.0053  memory: 4363  loss: 0.8442  loss_rpn_cls: 0.0390  loss_rpn_bbox: 0.1146  loss_cls: 0.3193  acc: 89.2578  loss_bbox: 0.3712
2025/05/10 16:39:01 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:17  time: 0.3697  data_time: 0.0024  memory: 4363  loss: 0.8211  loss_rpn_cls: 0.0372  loss_rpn_bbox: 0.1126  loss_cls: 0.3055  acc: 86.8164  loss_bbox: 0.3658
2025/05/10 16:39:16 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:39:18 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:39:19 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.744 0.492 -1.000 0.298 0.466
2025/05/10 16:39:19 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.4920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4660  data_time: 0.0016  time: 0.0371
2025/05/10 16:39:38 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:38  time: 0.3655  data_time: 0.0049  memory: 4363  loss: 0.7785  loss_rpn_cls: 0.0322  loss_rpn_bbox: 0.1081  loss_cls: 0.2911  acc: 90.1367  loss_bbox: 0.3470
2025/05/10 16:39:56 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:18  time: 0.3670  data_time: 0.0022  memory: 4363  loss: 0.7991  loss_rpn_cls: 0.0307  loss_rpn_bbox: 0.1111  loss_cls: 0.3026  acc: 90.6738  loss_bbox: 0.3547
2025/05/10 16:40:11 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:40:13 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:40:14 - mmengine - INFO - bbox_mAP_copypaste: 0.405 0.670 0.455 -1.000 0.284 0.429
2025/05/10 16:40:14 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4050  coco/bbox_mAP_50: 0.6700  coco/bbox_mAP_75: 0.4550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2840  coco/bbox_mAP_l: 0.4290  data_time: 0.0015  time: 0.0375
2025/05/10 16:40:33 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:42  time: 0.3657  data_time: 0.0048  memory: 4363  loss: 0.7359  loss_rpn_cls: 0.0293  loss_rpn_bbox: 0.1041  loss_cls: 0.2698  acc: 91.6992  loss_bbox: 0.3327
2025/05/10 16:40:51 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:21  time: 0.3624  data_time: 0.0023  memory: 4363  loss: 0.7523  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.1084  loss_cls: 0.2743  acc: 89.7449  loss_bbox: 0.3406
2025/05/10 16:41:06 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:41:08 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:41:09 - mmengine - INFO - bbox_mAP_copypaste: 0.445 0.721 0.513 -1.000 0.289 0.471
2025/05/10 16:41:09 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4450  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2890  coco/bbox_mAP_l: 0.4710  data_time: 0.0016  time: 0.0376
2025/05/10 16:41:14 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:41:28 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:46  time: 0.3690  data_time: 0.0049  memory: 4363  loss: 0.7222  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.1041  loss_cls: 0.2651  acc: 88.1836  loss_bbox: 0.3278
2025/05/10 16:41:46 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:26  time: 0.3625  data_time: 0.0024  memory: 4363  loss: 0.7115  loss_rpn_cls: 0.0265  loss_rpn_bbox: 0.1022  loss_cls: 0.2584  acc: 91.1133  loss_bbox: 0.3244
2025/05/10 16:42:01 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:42:03 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:42:04 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.738 0.525 -1.000 0.303 0.475
2025/05/10 16:42:04 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4750  data_time: 0.0016  time: 0.0387
2025/05/10 16:42:22 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:51  time: 0.3697  data_time: 0.0050  memory: 4363  loss: 0.6316  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0883  loss_cls: 0.2328  acc: 90.2344  loss_bbox: 0.2906
2025/05/10 16:42:41 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:32  time: 0.3651  data_time: 0.0024  memory: 4363  loss: 0.5885  loss_rpn_cls: 0.0154  loss_rpn_bbox: 0.0829  loss_cls: 0.2103  acc: 93.7012  loss_bbox: 0.2799
2025/05/10 16:42:56 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:42:57 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:42:59 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.728 0.537 -1.000 0.303 0.485
2025/05/10 16:42:59 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7280  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4850  data_time: 0.0018  time: 0.0371
2025/05/10 16:42:59 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/10 16:43:00 - mmengine - INFO - The best checkpoint with 0.4580 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/10 16:43:18 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:58  time: 0.3771  data_time: 0.0050  memory: 4363  loss: 0.5806  loss_rpn_cls: 0.0154  loss_rpn_bbox: 0.0830  loss_cls: 0.2075  acc: 91.6992  loss_bbox: 0.2747
2025/05/10 16:43:37 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:39  time: 0.3653  data_time: 0.0023  memory: 4363  loss: 0.5703  loss_rpn_cls: 0.0141  loss_rpn_bbox: 0.0809  loss_cls: 0.2052  acc: 93.8477  loss_bbox: 0.2702
2025/05/10 16:43:52 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:43:53 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:43:55 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.708 0.508 -1.000 0.293 0.470
2025/05/10 16:43:55 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7080  coco/bbox_mAP_75: 0.5080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2930  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0372
2025/05/10 16:44:13 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:05  time: 0.3713  data_time: 0.0048  memory: 4363  loss: 0.5646  loss_rpn_cls: 0.0136  loss_rpn_bbox: 0.0812  loss_cls: 0.1997  acc: 93.6035  loss_bbox: 0.2700
2025/05/10 16:44:32 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:46  time: 0.3662  data_time: 0.0024  memory: 4363  loss: 0.5643  loss_rpn_cls: 0.0138  loss_rpn_bbox: 0.0803  loss_cls: 0.2017  acc: 93.4570  loss_bbox: 0.2685
2025/05/10 16:44:47 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:44:48 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:44:50 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.716 0.507 -1.000 0.307 0.473
2025/05/10 16:44:50 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7160  coco/bbox_mAP_75: 0.5070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4730  data_time: 0.0017  time: 0.0373
2025/05/10 16:45:08 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:12  time: 0.3702  data_time: 0.0049  memory: 4363  loss: 0.5335  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0771  loss_cls: 0.1866  acc: 89.6973  loss_bbox: 0.2586
2025/05/10 16:45:27 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:53  time: 0.3700  data_time: 0.0023  memory: 4363  loss: 0.5433  loss_rpn_cls: 0.0128  loss_rpn_bbox: 0.0779  loss_cls: 0.1916  acc: 93.7988  loss_bbox: 0.2610
2025/05/10 16:45:42 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:45:44 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:45:45 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.723 0.529 -1.000 0.314 0.484
2025/05/10 16:45:45 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0370
2025/05/10 16:46:04 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:20  time: 0.3734  data_time: 0.0050  memory: 4363  loss: 0.5396  loss_rpn_cls: 0.0131  loss_rpn_bbox: 0.0774  loss_cls: 0.1899  acc: 92.9199  loss_bbox: 0.2592
2025/05/10 16:46:22 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:01  time: 0.3688  data_time: 0.0024  memory: 4363  loss: 0.5388  loss_rpn_cls: 0.0112  loss_rpn_bbox: 0.0780  loss_cls: 0.1861  acc: 94.0918  loss_bbox: 0.2634
2025/05/10 16:46:37 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:46:39 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:46:40 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.721 0.526 -1.000 0.315 0.483
2025/05/10 16:46:40 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4830  data_time: 0.0017  time: 0.0372
2025/05/10 16:46:59 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:27  time: 0.3665  data_time: 0.0049  memory: 4363  loss: 0.5286  loss_rpn_cls: 0.0114  loss_rpn_bbox: 0.0757  loss_cls: 0.1856  acc: 92.9688  loss_bbox: 0.2559
2025/05/10 16:47:17 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:09  time: 0.3694  data_time: 0.0024  memory: 4363  loss: 0.5411  loss_rpn_cls: 0.0124  loss_rpn_bbox: 0.0780  loss_cls: 0.1887  acc: 91.7969  loss_bbox: 0.2621
2025/05/10 16:47:32 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:47:34 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:47:35 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.722 0.525 -1.000 0.312 0.484
2025/05/10 16:47:35 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0374
2025/05/10 16:47:45 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:47:54 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:35  time: 0.3669  data_time: 0.0048  memory: 4363  loss: 0.5259  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0763  loss_cls: 0.1813  acc: 93.6035  loss_bbox: 0.2571
2025/05/10 16:48:12 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:16  time: 0.3653  data_time: 0.0022  memory: 4363  loss: 0.5474  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0778  loss_cls: 0.1959  acc: 92.2852  loss_bbox: 0.2617
2025/05/10 16:48:27 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:48:29 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:48:30 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.721 0.529 -1.000 0.313 0.483
2025/05/10 16:48:30 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4830  data_time: 0.0017  time: 0.0371
2025/05/10 16:48:49 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:42  time: 0.3687  data_time: 0.0049  memory: 4363  loss: 0.5387  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0782  loss_cls: 0.1884  acc: 92.6758  loss_bbox: 0.2613
2025/05/10 16:49:07 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:24  time: 0.3629  data_time: 0.0023  memory: 4363  loss: 0.5333  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0762  loss_cls: 0.1874  acc: 93.1152  loss_bbox: 0.2577
2025/05/10 16:49:22 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:49:24 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:49:25 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.723 0.529 -1.000 0.313 0.483
2025/05/10 16:49:25 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0385
2025/05/10 16:49:44 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:50  time: 0.3707  data_time: 0.0049  memory: 4363  loss: 0.5273  loss_rpn_cls: 0.0121  loss_rpn_bbox: 0.0765  loss_cls: 0.1821  acc: 91.8945  loss_bbox: 0.2566
2025/05/10 16:50:02 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:32  time: 0.3720  data_time: 0.0023  memory: 4363  loss: 0.5509  loss_rpn_cls: 0.0126  loss_rpn_bbox: 0.0788  loss_cls: 0.1975  acc: 92.7246  loss_bbox: 0.2620
2025/05/10 16:50:17 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:50:19 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:50:20 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.722 0.527 -1.000 0.313 0.482
2025/05/10 16:50:20 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4820  data_time: 0.0017  time: 0.0372
2025/05/10 16:50:39 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:58  time: 0.3730  data_time: 0.0049  memory: 4363  loss: 0.5317  loss_rpn_cls: 0.0128  loss_rpn_bbox: 0.0774  loss_cls: 0.1821  acc: 94.3359  loss_bbox: 0.2594
2025/05/10 16:50:57 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:39  time: 0.3686  data_time: 0.0023  memory: 4363  loss: 0.5456  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0786  loss_cls: 0.1926  acc: 91.6992  loss_bbox: 0.2631
2025/05/10 16:51:12 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:51:14 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:51:15 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.722 0.530 -1.000 0.317 0.482
2025/05/10 16:51:15 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0374
2025/05/10 16:51:34 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:06  time: 0.3728  data_time: 0.0049  memory: 4363  loss: 0.5285  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0773  loss_cls: 0.1824  acc: 91.4062  loss_bbox: 0.2569
2025/05/10 16:51:52 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:47  time: 0.3649  data_time: 0.0022  memory: 4363  loss: 0.5339  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0767  loss_cls: 0.1884  acc: 91.6504  loss_bbox: 0.2578
2025/05/10 16:52:07 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:52:09 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:52:11 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.720 0.528 -1.000 0.315 0.481
2025/05/10 16:52:11 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4810  data_time: 0.0017  time: 0.0373
2025/05/10 16:52:29 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:13  time: 0.3672  data_time: 0.0049  memory: 4363  loss: 0.5309  loss_rpn_cls: 0.0121  loss_rpn_bbox: 0.0766  loss_cls: 0.1857  acc: 94.9707  loss_bbox: 0.2565
2025/05/10 16:52:47 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:55  time: 0.3688  data_time: 0.0022  memory: 4363  loss: 0.5273  loss_rpn_cls: 0.0116  loss_rpn_bbox: 0.0765  loss_cls: 0.1818  acc: 91.4551  loss_bbox: 0.2575
2025/05/10 16:53:02 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:53:04 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:53:06 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.719 0.525 -1.000 0.315 0.480
2025/05/10 16:53:06 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7190  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.4800  data_time: 0.0016  time: 0.0374
2025/05/10 16:53:24 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:21  time: 0.3683  data_time: 0.0048  memory: 4363  loss: 0.5287  loss_rpn_cls: 0.0109  loss_rpn_bbox: 0.0765  loss_cls: 0.1851  acc: 91.0156  loss_bbox: 0.2563
2025/05/10 16:53:42 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:03  time: 0.3695  data_time: 0.0024  memory: 4363  loss: 0.5318  loss_rpn_cls: 0.0116  loss_rpn_bbox: 0.0775  loss_cls: 0.1845  acc: 93.2129  loss_bbox: 0.2581
2025/05/10 16:53:57 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:53:59 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:54:01 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.727 0.533 -1.000 0.314 0.486
2025/05/10 16:54:01 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5330  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0372
2025/05/10 16:54:15 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:54:19 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:29  time: 0.3677  data_time: 0.0050  memory: 4363  loss: 0.5294  loss_rpn_cls: 0.0124  loss_rpn_bbox: 0.0772  loss_cls: 0.1832  acc: 95.0195  loss_bbox: 0.2567
2025/05/10 16:54:37 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:10  time: 0.3621  data_time: 0.0024  memory: 4363  loss: 0.5206  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0745  loss_cls: 0.1821  acc: 93.6035  loss_bbox: 0.2541
2025/05/10 16:54:52 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:54:54 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:54:56 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.722 0.532 -1.000 0.313 0.483
2025/05/10 16:54:56 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4830  data_time: 0.0015  time: 0.0369
2025/05/10 16:55:14 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:37  time: 0.3694  data_time: 0.0047  memory: 4363  loss: 0.5338  loss_rpn_cls: 0.0130  loss_rpn_bbox: 0.0783  loss_cls: 0.1832  acc: 91.5039  loss_bbox: 0.2593
2025/05/10 16:55:32 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:19  time: 0.3631  data_time: 0.0023  memory: 4363  loss: 0.5216  loss_rpn_cls: 0.0106  loss_rpn_bbox: 0.0749  loss_cls: 0.1844  acc: 93.0664  loss_bbox: 0.2517
2025/05/10 16:55:47 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:55:49 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:55:51 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.720 0.525 -1.000 0.312 0.481
2025/05/10 16:55:51 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0375
2025/05/10 16:56:09 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:45  time: 0.3678  data_time: 0.0049  memory: 4363  loss: 0.5268  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0759  loss_cls: 0.1838  acc: 91.9434  loss_bbox: 0.2552
2025/05/10 16:56:27 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:26  time: 0.3641  data_time: 0.0023  memory: 4363  loss: 0.5269  loss_rpn_cls: 0.0114  loss_rpn_bbox: 0.0769  loss_cls: 0.1837  acc: 94.2383  loss_bbox: 0.2550
2025/05/10 16:56:42 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:56:44 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:56:46 - mmengine - INFO - bbox_mAP_copypaste: 0.449 0.719 0.522 -1.000 0.313 0.479
2025/05/10 16:56:46 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4490  coco/bbox_mAP_50: 0.7190  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4790  data_time: 0.0016  time: 0.0383
2025/05/10 16:57:05 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:53  time: 0.3988  data_time: 0.0050  memory: 4363  loss: 0.5296  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0773  loss_cls: 0.1829  acc: 94.1406  loss_bbox: 0.2577
2025/05/10 16:57:27 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.4241  data_time: 0.0029  memory: 4363  loss: 0.5177  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0760  loss_cls: 0.1778  acc: 94.5801  loss_bbox: 0.2529
2025/05/10 16:57:45 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:57:47 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:57:49 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.721 0.528 -1.000 0.312 0.483
2025/05/10 16:57:49 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0444
2025/05/10 16:58:11 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:03  time: 0.4514  data_time: 0.0051  memory: 4363  loss: 0.5236  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0762  loss_cls: 0.1831  acc: 93.3105  loss_bbox: 0.2533
2025/05/10 16:58:34 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:45  time: 0.4491  data_time: 0.0026  memory: 4363  loss: 0.5259  loss_rpn_cls: 0.0122  loss_rpn_bbox: 0.0760  loss_cls: 0.1825  acc: 93.1152  loss_bbox: 0.2551
2025/05/10 16:58:52 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:58:54 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:58:56 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.712 0.520 -1.000 0.311 0.476
2025/05/10 16:58:56 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7120  coco/bbox_mAP_75: 0.5200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4760  data_time: 0.0019  time: 0.0421
2025/05/10 16:59:14 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:12  time: 0.3795  data_time: 0.0050  memory: 4363  loss: 0.5234  loss_rpn_cls: 0.0114  loss_rpn_bbox: 0.0754  loss_cls: 0.1838  acc: 93.9453  loss_bbox: 0.2528
2025/05/10 16:59:34 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:53  time: 0.3842  data_time: 0.0026  memory: 4363  loss: 0.5191  loss_rpn_cls: 0.0104  loss_rpn_bbox: 0.0766  loss_cls: 0.1773  acc: 94.2383  loss_bbox: 0.2549
2025/05/10 16:59:49 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 16:59:51 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:59:52 - mmengine - INFO - bbox_mAP_copypaste: 0.447 0.714 0.521 -1.000 0.312 0.476
2025/05/10 16:59:52 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4470  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4760  data_time: 0.0016  time: 0.0374
2025/05/10 17:00:11 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:19  time: 0.3759  data_time: 0.0051  memory: 4363  loss: 0.5256  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0759  loss_cls: 0.1848  acc: 91.9434  loss_bbox: 0.2547
2025/05/10 17:00:29 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:00  time: 0.3685  data_time: 0.0024  memory: 4363  loss: 0.5196  loss_rpn_cls: 0.0115  loss_rpn_bbox: 0.0756  loss_cls: 0.1807  acc: 93.1641  loss_bbox: 0.2518
2025/05/10 17:00:44 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 17:00:46 - mmengine - INFO - Evaluating bbox...
2025/05/10 17:00:48 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.719 0.528 -1.000 0.314 0.480
2025/05/10 17:00:48 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7190  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4800  data_time: 0.0015  time: 0.0374
2025/05/10 17:01:06 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:26  time: 0.3720  data_time: 0.0050  memory: 4363  loss: 0.5321  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0765  loss_cls: 0.1879  acc: 93.2617  loss_bbox: 0.2574
2025/05/10 17:01:07 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 17:01:25 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:08  time: 0.3670  data_time: 0.0023  memory: 4363  loss: 0.5101  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0743  loss_cls: 0.1748  acc: 92.1875  loss_bbox: 0.2508
2025/05/10 17:01:40 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 17:01:42 - mmengine - INFO - Evaluating bbox...
2025/05/10 17:01:43 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.717 0.524 -1.000 0.311 0.478
2025/05/10 17:01:43 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4780  data_time: 0.0016  time: 0.0375
2025/05/10 17:02:02 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3766  data_time: 0.0048  memory: 4363  loss: 0.5196  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0761  loss_cls: 0.1812  acc: 91.9434  loss_bbox: 0.2515
2025/05/10 17:02:20 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3700  data_time: 0.0023  memory: 4363  loss: 0.5171  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0754  loss_cls: 0.1795  acc: 92.7734  loss_bbox: 0.2511
2025/05/10 17:02:35 - mmengine - INFO - Exp name: fasterrcnn_pt_20250510_163421
2025/05/10 17:02:35 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/10 17:02:39 - mmengine - INFO - Evaluating bbox...
2025/05/10 17:02:40 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.724 0.526 -1.000 0.313 0.482
2025/05/10 17:02:40 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0378
