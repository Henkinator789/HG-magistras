2025/05/10 15:58:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 426641769
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 426641769
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/10 15:58:59 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/10 15:59:00 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/10 15:59:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/10 15:59:01 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/10 15:59:01 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/10 15:59:01 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/10 15:59:01 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/10 15:59:01 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/10 15:59:01 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/10 15:59:26 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:34:16  time: 0.4919  data_time: 0.0932  memory: 4360  loss: 2.0832  loss_rpn_cls: 0.6181  loss_rpn_bbox: 0.2475  loss_cls: 0.8246  acc: 76.7578  loss_bbox: 0.3931
2025/05/10 15:59:48 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:31:40  time: 0.4285  data_time: 0.0025  memory: 4360  loss: 1.9419  loss_rpn_cls: 0.3530  loss_rpn_bbox: 0.2349  loss_cls: 0.6542  acc: 78.2715  loss_bbox: 0.6997
2025/05/10 16:00:03 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:00:15 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:00:16 - mmengine - INFO - bbox_mAP_copypaste: 0.083 0.208 0.032 -1.000 0.022 0.088
2025/05/10 16:00:16 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0830  coco/bbox_mAP_50: 0.2080  coco/bbox_mAP_75: 0.0320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0220  coco/bbox_mAP_l: 0.0880  data_time: 0.1794  time: 0.2284
2025/05/10 16:00:17 - mmengine - INFO - The best checkpoint with 0.0830 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/10 16:00:37 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:28:46  time: 0.3964  data_time: 0.0052  memory: 4360  loss: 1.5763  loss_rpn_cls: 0.1718  loss_rpn_bbox: 0.2047  loss_cls: 0.5459  acc: 81.5918  loss_bbox: 0.6539
2025/05/10 16:00:59 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:28:34  time: 0.4387  data_time: 0.0025  memory: 4360  loss: 1.4316  loss_rpn_cls: 0.1263  loss_rpn_bbox: 0.1875  loss_cls: 0.5208  acc: 80.4802  loss_bbox: 0.5970
2025/05/10 16:01:17 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:01:19 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:01:21 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.558 0.259 -1.000 0.212 0.308
2025/05/10 16:01:21 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.2590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3080  data_time: 0.0017  time: 0.0457
2025/05/10 16:01:21 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/10 16:01:22 - mmengine - INFO - The best checkpoint with 0.2900 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/10 16:01:44 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:28:15  time: 0.4550  data_time: 0.0055  memory: 4360  loss: 1.2630  loss_rpn_cls: 0.0944  loss_rpn_bbox: 0.1641  loss_cls: 0.4617  acc: 79.5292  loss_bbox: 0.5428
2025/05/10 16:02:07 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:28:00  time: 0.4472  data_time: 0.0024  memory: 4360  loss: 1.2086  loss_rpn_cls: 0.0911  loss_rpn_bbox: 0.1631  loss_cls: 0.4330  acc: 84.9631  loss_bbox: 0.5215
2025/05/10 16:02:25 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:02:27 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:02:29 - mmengine - INFO - bbox_mAP_copypaste: 0.337 0.637 0.310 -1.000 0.266 0.353
2025/05/10 16:02:29 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3370  coco/bbox_mAP_50: 0.6370  coco/bbox_mAP_75: 0.3100  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2660  coco/bbox_mAP_l: 0.3530  data_time: 0.0016  time: 0.0449
2025/05/10 16:02:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/10 16:02:29 - mmengine - INFO - The best checkpoint with 0.3370 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/10 16:02:52 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:27:27  time: 0.4496  data_time: 0.0049  memory: 4360  loss: 1.1566  loss_rpn_cls: 0.0835  loss_rpn_bbox: 0.1499  loss_cls: 0.4341  acc: 87.5488  loss_bbox: 0.4891
2025/05/10 16:03:14 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:27:07  time: 0.4440  data_time: 0.0024  memory: 4360  loss: 1.1156  loss_rpn_cls: 0.0749  loss_rpn_bbox: 0.1524  loss_cls: 0.4092  acc: 84.9609  loss_bbox: 0.4791
2025/05/10 16:03:32 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:03:34 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:03:36 - mmengine - INFO - bbox_mAP_copypaste: 0.377 0.670 0.391 -1.000 0.286 0.399
2025/05/10 16:03:36 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3770  coco/bbox_mAP_50: 0.6700  coco/bbox_mAP_75: 0.3910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.3990  data_time: 0.0015  time: 0.0445
2025/05/10 16:03:36 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/10 16:03:36 - mmengine - INFO - The best checkpoint with 0.3770 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/10 16:03:58 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:26:27  time: 0.4410  data_time: 0.0052  memory: 4360  loss: 1.0282  loss_rpn_cls: 0.0663  loss_rpn_bbox: 0.1409  loss_cls: 0.3664  acc: 86.5723  loss_bbox: 0.4546
2025/05/10 16:04:17 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:25:49  time: 0.3796  data_time: 0.0026  memory: 4360  loss: 1.0367  loss_rpn_cls: 0.0684  loss_rpn_bbox: 0.1351  loss_cls: 0.3896  acc: 88.8184  loss_bbox: 0.4436
2025/05/10 16:04:33 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:04:35 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:04:36 - mmengine - INFO - bbox_mAP_copypaste: 0.404 0.700 0.444 -1.000 0.278 0.427
2025/05/10 16:04:36 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4040  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.4440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2780  coco/bbox_mAP_l: 0.4270  data_time: 0.0016  time: 0.0398
2025/05/10 16:04:36 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/10 16:04:37 - mmengine - INFO - The best checkpoint with 0.4040 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/10 16:04:56 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:24:46  time: 0.3848  data_time: 0.0050  memory: 4362  loss: 0.9271  loss_rpn_cls: 0.0506  loss_rpn_bbox: 0.1295  loss_cls: 0.3289  acc: 88.3789  loss_bbox: 0.4180
2025/05/10 16:05:15 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:24:15  time: 0.3827  data_time: 0.0023  memory: 4360  loss: 0.9382  loss_rpn_cls: 0.0567  loss_rpn_bbox: 0.1246  loss_cls: 0.3335  acc: 88.8184  loss_bbox: 0.4234
2025/05/10 16:05:31 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:05:33 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:05:34 - mmengine - INFO - bbox_mAP_copypaste: 0.417 0.713 0.459 -1.000 0.288 0.441
2025/05/10 16:05:34 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4170  coco/bbox_mAP_50: 0.7130  coco/bbox_mAP_75: 0.4590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4410  data_time: 0.0017  time: 0.0407
2025/05/10 16:05:34 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/10 16:05:35 - mmengine - INFO - The best checkpoint with 0.4170 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/10 16:05:54 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:23:22  time: 0.3807  data_time: 0.0049  memory: 4360  loss: 0.9016  loss_rpn_cls: 0.0503  loss_rpn_bbox: 0.1258  loss_cls: 0.3202  acc: 86.0840  loss_bbox: 0.4053
2025/05/10 16:06:13 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:22:52  time: 0.3706  data_time: 0.0023  memory: 4361  loss: 0.8983  loss_rpn_cls: 0.0499  loss_rpn_bbox: 0.1261  loss_cls: 0.3185  acc: 83.5703  loss_bbox: 0.4038
2025/05/10 16:06:28 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:06:30 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:06:31 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.766 0.525 -1.000 0.322 0.486
2025/05/10 16:06:31 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7660  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3220  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0391
2025/05/10 16:06:31 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/10 16:06:32 - mmengine - INFO - The best checkpoint with 0.4630 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/10 16:06:37 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:06:51 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:22:02  time: 0.3769  data_time: 0.0051  memory: 4360  loss: 0.8593  loss_rpn_cls: 0.0366  loss_rpn_bbox: 0.1220  loss_cls: 0.3121  acc: 86.6699  loss_bbox: 0.3886
2025/05/10 16:07:09 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:21:34  time: 0.3692  data_time: 0.0025  memory: 4360  loss: 0.8507  loss_rpn_cls: 0.0432  loss_rpn_bbox: 0.1154  loss_cls: 0.3051  acc: 87.8729  loss_bbox: 0.3870
2025/05/10 16:07:24 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:07:26 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:07:28 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.747 0.515 -1.000 0.316 0.475
2025/05/10 16:07:28 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4750  data_time: 0.0017  time: 0.0372
2025/05/10 16:07:46 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:20:47  time: 0.3746  data_time: 0.0048  memory: 4360  loss: 0.7350  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.1001  loss_cls: 0.2594  acc: 91.1133  loss_bbox: 0.3473
2025/05/10 16:08:05 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:20:23  time: 0.3763  data_time: 0.0025  memory: 4360  loss: 0.7076  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0976  loss_cls: 0.2432  acc: 90.6738  loss_bbox: 0.3386
2025/05/10 16:08:20 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:08:22 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:08:24 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.737 0.544 -1.000 0.314 0.486
2025/05/10 16:08:24 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0367
2025/05/10 16:08:42 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:19:38  time: 0.3710  data_time: 0.0050  memory: 4360  loss: 0.6730  loss_rpn_cls: 0.0251  loss_rpn_bbox: 0.0923  loss_cls: 0.2285  acc: 87.2559  loss_bbox: 0.3270
2025/05/10 16:09:01 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:19:15  time: 0.3782  data_time: 0.0023  memory: 4360  loss: 0.6858  loss_rpn_cls: 0.0250  loss_rpn_bbox: 0.0953  loss_cls: 0.2350  acc: 89.6973  loss_bbox: 0.3304
2025/05/10 16:09:16 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:09:18 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:09:19 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.745 0.545 -1.000 0.331 0.490
2025/05/10 16:09:19 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3310  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0370
2025/05/10 16:09:19 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/10 16:09:20 - mmengine - INFO - The best checkpoint with 0.4650 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/10 16:09:39 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:18:33  time: 0.3797  data_time: 0.0048  memory: 4360  loss: 0.6699  loss_rpn_cls: 0.0229  loss_rpn_bbox: 0.0935  loss_cls: 0.2281  acc: 89.6484  loss_bbox: 0.3255
2025/05/10 16:09:58 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:18:10  time: 0.3723  data_time: 0.0024  memory: 4360  loss: 0.6566  loss_rpn_cls: 0.0209  loss_rpn_bbox: 0.0914  loss_cls: 0.2237  acc: 90.9180  loss_bbox: 0.3206
2025/05/10 16:10:13 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:10:15 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:10:16 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.733 0.530 -1.000 0.313 0.483
2025/05/10 16:10:16 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.4830  data_time: 0.0014  time: 0.0384
2025/05/10 16:10:35 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:17:30  time: 0.3761  data_time: 0.0049  memory: 4360  loss: 0.6517  loss_rpn_cls: 0.0215  loss_rpn_bbox: 0.0924  loss_cls: 0.2163  acc: 91.9922  loss_bbox: 0.3215
2025/05/10 16:10:54 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:17:08  time: 0.3713  data_time: 0.0023  memory: 4360  loss: 0.6624  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0917  loss_cls: 0.2276  acc: 92.0410  loss_bbox: 0.3200
2025/05/10 16:11:09 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:11:11 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:11:12 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.741 0.547 -1.000 0.339 0.490
2025/05/10 16:11:12 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3390  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0367
2025/05/10 16:11:31 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:16:28  time: 0.3768  data_time: 0.0051  memory: 4360  loss: 0.6495  loss_rpn_cls: 0.0222  loss_rpn_bbox: 0.0901  loss_cls: 0.2209  acc: 94.2871  loss_bbox: 0.3163
2025/05/10 16:11:50 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:16:07  time: 0.3749  data_time: 0.0024  memory: 4360  loss: 0.6497  loss_rpn_cls: 0.0221  loss_rpn_bbox: 0.0920  loss_cls: 0.2151  acc: 91.3574  loss_bbox: 0.3204
2025/05/10 16:12:05 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:12:07 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:12:08 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.739 0.543 -1.000 0.328 0.490
2025/05/10 16:12:08 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3280  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0377
2025/05/10 16:12:27 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:15:28  time: 0.3776  data_time: 0.0050  memory: 4360  loss: 0.6466  loss_rpn_cls: 0.0215  loss_rpn_bbox: 0.0900  loss_cls: 0.2198  acc: 91.9922  loss_bbox: 0.3153
2025/05/10 16:12:46 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:15:07  time: 0.3713  data_time: 0.0025  memory: 4360  loss: 0.6460  loss_rpn_cls: 0.0205  loss_rpn_bbox: 0.0905  loss_cls: 0.2185  acc: 93.7012  loss_bbox: 0.3165
2025/05/10 16:13:01 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:13:03 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:13:04 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.733 0.537 -1.000 0.329 0.485
2025/05/10 16:13:04 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3290  coco/bbox_mAP_l: 0.4850  data_time: 0.0014  time: 0.0364
2025/05/10 16:13:14 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:13:23 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:14:29  time: 0.3791  data_time: 0.0049  memory: 4360  loss: 0.6474  loss_rpn_cls: 0.0229  loss_rpn_bbox: 0.0913  loss_cls: 0.2164  acc: 92.7734  loss_bbox: 0.3168
2025/05/10 16:13:42 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:14:08  time: 0.3716  data_time: 0.0023  memory: 4360  loss: 0.6496  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0904  loss_cls: 0.2213  acc: 90.6738  loss_bbox: 0.3192
2025/05/10 16:13:57 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:13:59 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:14:00 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.738 0.543 -1.000 0.332 0.489
2025/05/10 16:14:00 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3320  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0376
2025/05/10 16:14:19 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:13:31  time: 0.3793  data_time: 0.0050  memory: 4360  loss: 0.6549  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0915  loss_cls: 0.2202  acc: 90.9668  loss_bbox: 0.3209
2025/05/10 16:14:37 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:13:10  time: 0.3713  data_time: 0.0025  memory: 4360  loss: 0.6379  loss_rpn_cls: 0.0213  loss_rpn_bbox: 0.0895  loss_cls: 0.2137  acc: 89.8926  loss_bbox: 0.3135
2025/05/10 16:14:52 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:14:54 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:14:56 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.736 0.540 -1.000 0.329 0.488
2025/05/10 16:14:56 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3290  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0366
2025/05/10 16:15:14 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:12:33  time: 0.3750  data_time: 0.0050  memory: 4360  loss: 0.6337  loss_rpn_cls: 0.0192  loss_rpn_bbox: 0.0879  loss_cls: 0.2152  acc: 88.9648  loss_bbox: 0.3114
2025/05/10 16:15:33 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:12:12  time: 0.3740  data_time: 0.0024  memory: 4360  loss: 0.6443  loss_rpn_cls: 0.0208  loss_rpn_bbox: 0.0910  loss_cls: 0.2159  acc: 90.3320  loss_bbox: 0.3166
2025/05/10 16:15:48 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:15:50 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:15:52 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.736 0.544 -1.000 0.331 0.488
2025/05/10 16:15:52 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3310  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0366
2025/05/10 16:16:10 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:35  time: 0.3697  data_time: 0.0051  memory: 4360  loss: 0.6471  loss_rpn_cls: 0.0205  loss_rpn_bbox: 0.0886  loss_cls: 0.2225  acc: 87.8906  loss_bbox: 0.3156
2025/05/10 16:16:29 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:11:16  time: 0.3780  data_time: 0.0025  memory: 4360  loss: 0.6432  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0897  loss_cls: 0.2147  acc: 93.1152  loss_bbox: 0.3188
2025/05/10 16:16:44 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:16:46 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:16:48 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.736 0.537 -1.000 0.326 0.488
2025/05/10 16:16:48 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3260  coco/bbox_mAP_l: 0.4880  data_time: 0.0015  time: 0.0366
2025/05/10 16:17:06 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:39  time: 0.3731  data_time: 0.0049  memory: 4360  loss: 0.6196  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0866  loss_cls: 0.2055  acc: 94.2871  loss_bbox: 0.3084
2025/05/10 16:17:25 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:10:19  time: 0.3769  data_time: 0.0024  memory: 4360  loss: 0.6462  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0909  loss_cls: 0.2192  acc: 88.6230  loss_bbox: 0.3160
2025/05/10 16:17:40 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:17:42 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:17:43 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.735 0.541 -1.000 0.332 0.488
2025/05/10 16:17:43 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3320  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0370
2025/05/10 16:18:02 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:43  time: 0.3751  data_time: 0.0051  memory: 4360  loss: 0.6376  loss_rpn_cls: 0.0209  loss_rpn_bbox: 0.0901  loss_cls: 0.2133  acc: 94.9219  loss_bbox: 0.3133
2025/05/10 16:18:21 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:09:23  time: 0.3727  data_time: 0.0024  memory: 4360  loss: 0.6413  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0896  loss_cls: 0.2145  acc: 90.8203  loss_bbox: 0.3162
2025/05/10 16:18:36 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:18:38 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:18:39 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.740 0.544 -1.000 0.329 0.490
2025/05/10 16:18:39 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3290  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0367
2025/05/10 16:18:58 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:47  time: 0.3743  data_time: 0.0051  memory: 4360  loss: 0.6275  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0895  loss_cls: 0.2079  acc: 90.2832  loss_bbox: 0.3098
2025/05/10 16:19:17 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:27  time: 0.3725  data_time: 0.0025  memory: 4360  loss: 0.6420  loss_rpn_cls: 0.0213  loss_rpn_bbox: 0.0891  loss_cls: 0.2160  acc: 92.4316  loss_bbox: 0.3156
2025/05/10 16:19:32 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:19:34 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:19:35 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.733 0.538 -1.000 0.311 0.486
2025/05/10 16:19:35 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4860  data_time: 0.0017  time: 0.0369
2025/05/10 16:19:50 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:19:54 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:52  time: 0.3728  data_time: 0.0050  memory: 4360  loss: 0.6318  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0892  loss_cls: 0.2122  acc: 93.3105  loss_bbox: 0.3117
2025/05/10 16:20:13 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:32  time: 0.3715  data_time: 0.0024  memory: 4360  loss: 0.6364  loss_rpn_cls: 0.0214  loss_rpn_bbox: 0.0904  loss_cls: 0.2102  acc: 91.8457  loss_bbox: 0.3144
2025/05/10 16:20:28 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:20:30 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:20:31 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.729 0.537 -1.000 0.324 0.484
2025/05/10 16:20:31 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0395
2025/05/10 16:20:50 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:56  time: 0.3712  data_time: 0.0050  memory: 4360  loss: 0.6253  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0868  loss_cls: 0.2108  acc: 92.1387  loss_bbox: 0.3099
2025/05/10 16:21:08 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:37  time: 0.3741  data_time: 0.0025  memory: 4360  loss: 0.6472  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0897  loss_cls: 0.2221  acc: 86.9141  loss_bbox: 0.3144
2025/05/10 16:21:23 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:21:25 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:21:27 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.738 0.542 -1.000 0.324 0.490
2025/05/10 16:21:27 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0376
2025/05/10 16:21:46 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:06:01  time: 0.3782  data_time: 0.0049  memory: 4360  loss: 0.6313  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0893  loss_cls: 0.2099  acc: 92.3340  loss_bbox: 0.3127
2025/05/10 16:22:04 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:42  time: 0.3733  data_time: 0.0025  memory: 4360  loss: 0.6326  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0898  loss_cls: 0.2119  acc: 92.5781  loss_bbox: 0.3087
2025/05/10 16:22:20 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:22:21 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:22:23 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.739 0.546 -1.000 0.330 0.490
2025/05/10 16:22:23 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3300  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0368
2025/05/10 16:22:42 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:05:06  time: 0.3786  data_time: 0.0050  memory: 4360  loss: 0.6286  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0887  loss_cls: 0.2090  acc: 91.5039  loss_bbox: 0.3103
2025/05/10 16:23:00 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:47  time: 0.3738  data_time: 0.0024  memory: 4360  loss: 0.6290  loss_rpn_cls: 0.0194  loss_rpn_bbox: 0.0892  loss_cls: 0.2105  acc: 90.4297  loss_bbox: 0.3099
2025/05/10 16:23:16 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:23:18 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:23:19 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.737 0.541 -1.000 0.323 0.490
2025/05/10 16:23:19 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0369
2025/05/10 16:23:38 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:12  time: 0.3739  data_time: 0.0051  memory: 4360  loss: 0.6260  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0881  loss_cls: 0.2060  acc: 92.6270  loss_bbox: 0.3119
2025/05/10 16:23:56 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:52  time: 0.3723  data_time: 0.0023  memory: 4360  loss: 0.6317  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0891  loss_cls: 0.2130  acc: 92.3340  loss_bbox: 0.3108
2025/05/10 16:24:11 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:24:13 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:24:15 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.733 0.541 -1.000 0.312 0.486
2025/05/10 16:24:15 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0364
2025/05/10 16:24:33 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:17  time: 0.3767  data_time: 0.0050  memory: 4360  loss: 0.6425  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0903  loss_cls: 0.2179  acc: 93.4082  loss_bbox: 0.3142
2025/05/10 16:24:52 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:58  time: 0.3733  data_time: 0.0024  memory: 4360  loss: 0.6260  loss_rpn_cls: 0.0192  loss_rpn_bbox: 0.0883  loss_cls: 0.2094  acc: 91.5039  loss_bbox: 0.3090
2025/05/10 16:25:07 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:25:09 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:25:10 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.731 0.542 -1.000 0.311 0.484
2025/05/10 16:25:10 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4840  data_time: 0.0015  time: 0.0364
2025/05/10 16:25:29 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:23  time: 0.3729  data_time: 0.0050  memory: 4360  loss: 0.6281  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0875  loss_cls: 0.2117  acc: 87.4023  loss_bbox: 0.3086
2025/05/10 16:25:48 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:04  time: 0.3775  data_time: 0.0023  memory: 4360  loss: 0.6440  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0923  loss_cls: 0.2159  acc: 91.8457  loss_bbox: 0.3157
2025/05/10 16:26:03 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:26:05 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:26:06 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.732 0.538 -1.000 0.310 0.484
2025/05/10 16:26:06 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7320  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4840  data_time: 0.0017  time: 0.0369
2025/05/10 16:26:25 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:29  time: 0.3759  data_time: 0.0050  memory: 4360  loss: 0.6440  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0907  loss_cls: 0.2166  acc: 90.5273  loss_bbox: 0.3157
2025/05/10 16:26:26 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:26:44 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:09  time: 0.3718  data_time: 0.0024  memory: 4360  loss: 0.6326  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0886  loss_cls: 0.2145  acc: 91.6016  loss_bbox: 0.3095
2025/05/10 16:26:59 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:27:01 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:27:02 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.740 0.541 -1.000 0.322 0.490
2025/05/10 16:27:02 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3220  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0399
2025/05/10 16:27:21 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3715  data_time: 0.0050  memory: 4361  loss: 0.6212  loss_rpn_cls: 0.0173  loss_rpn_bbox: 0.0883  loss_cls: 0.2095  acc: 94.2383  loss_bbox: 0.3060
2025/05/10 16:27:39 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3733  data_time: 0.0023  memory: 4360  loss: 0.6342  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0889  loss_cls: 0.2131  acc: 92.7734  loss_bbox: 0.3103
2025/05/10 16:27:55 - mmengine - INFO - Exp name: fasterrcnn_fs_20250510_155854
2025/05/10 16:27:55 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/10 16:27:58 - mmengine - INFO - Evaluating bbox...
2025/05/10 16:27:59 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.729 0.535 -1.000 0.310 0.483
2025/05/10 16:27:59 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0370
