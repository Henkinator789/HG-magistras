2025/05/19 12:42:35 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 924441605
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 924441605
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 12:42:35 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(
                direction=[
                    'horizontal',
                    'vertical',
                ],
                prob=0.5,
                type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(direction=[
        'horizontal',
        'vertical',
    ], prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 12:42:36 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 12:42:36 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 12:42:37 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 12:42:37 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 12:42:37 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 12:42:37 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 12:42:37 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 12:42:37 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 12:43:00 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:18  time: 0.4638  data_time: 0.0911  memory: 4360  loss: 2.1878  loss_rpn_cls: 0.5668  loss_rpn_bbox: 0.2564  loss_cls: 0.8471  acc: 76.4648  loss_bbox: 0.5176
2025/05/19 12:43:19 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:48  time: 0.3731  data_time: 0.0022  memory: 4360  loss: 1.8797  loss_rpn_cls: 0.3278  loss_rpn_bbox: 0.2268  loss_cls: 0.6193  acc: 78.6621  loss_bbox: 0.7059
2025/05/19 12:43:34 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:43:44 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:43:45 - mmengine - INFO - bbox_mAP_copypaste: 0.165 0.395 0.080 -1.000 0.065 0.188
2025/05/19 12:43:45 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1650  coco/bbox_mAP_50: 0.3950  coco/bbox_mAP_75: 0.0800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0650  coco/bbox_mAP_l: 0.1880  data_time: 0.1640  time: 0.2034
2025/05/19 12:43:46 - mmengine - INFO - The best checkpoint with 0.1650 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 12:44:05 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:34  time: 0.3692  data_time: 0.0051  memory: 4360  loss: 1.5063  loss_rpn_cls: 0.1406  loss_rpn_bbox: 0.1984  loss_cls: 0.5302  acc: 78.8086  loss_bbox: 0.6371
2025/05/19 12:44:22 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:44  time: 0.3581  data_time: 0.0024  memory: 4360  loss: 1.4210  loss_rpn_cls: 0.1333  loss_rpn_bbox: 0.1889  loss_cls: 0.4999  acc: 84.6392  loss_bbox: 0.5989
2025/05/19 12:44:37 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:44:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:44:40 - mmengine - INFO - bbox_mAP_copypaste: 0.212 0.420 0.178 -1.000 0.167 0.224
2025/05/19 12:44:40 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2120  coco/bbox_mAP_50: 0.4200  coco/bbox_mAP_75: 0.1780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.2240  data_time: 0.0016  time: 0.0372
2025/05/19 12:44:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 12:44:41 - mmengine - INFO - The best checkpoint with 0.2120 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 12:44:59 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:40  time: 0.3664  data_time: 0.0049  memory: 4360  loss: 1.3442  loss_rpn_cls: 0.1103  loss_rpn_bbox: 0.1782  loss_cls: 0.4981  acc: 83.3418  loss_bbox: 0.5576
2025/05/19 12:45:17 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:09  time: 0.3558  data_time: 0.0025  memory: 4360  loss: 1.1933  loss_rpn_cls: 0.0823  loss_rpn_bbox: 0.1551  loss_cls: 0.4340  acc: 83.0566  loss_bbox: 0.5218
2025/05/19 12:45:32 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:45:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:45:35 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.612 0.344 -1.000 0.182 0.374
2025/05/19 12:45:35 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6120  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1820  coco/bbox_mAP_l: 0.3740  data_time: 0.0015  time: 0.0374
2025/05/19 12:45:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 12:45:36 - mmengine - INFO - The best checkpoint with 0.3420 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 12:45:54 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:23  time: 0.3645  data_time: 0.0050  memory: 4360  loss: 1.1778  loss_rpn_cls: 0.0806  loss_rpn_bbox: 0.1543  loss_cls: 0.4350  acc: 81.8083  loss_bbox: 0.5078
2025/05/19 12:46:12 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:22:59  time: 0.3574  data_time: 0.0024  memory: 4360  loss: 1.1401  loss_rpn_cls: 0.0743  loss_rpn_bbox: 0.1455  loss_cls: 0.4225  acc: 89.1045  loss_bbox: 0.4977
2025/05/19 12:46:27 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:46:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:46:30 - mmengine - INFO - bbox_mAP_copypaste: 0.393 0.671 0.431 -1.000 0.287 0.419
2025/05/19 12:46:30 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3930  coco/bbox_mAP_50: 0.6710  coco/bbox_mAP_75: 0.4310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2870  coco/bbox_mAP_l: 0.4190  data_time: 0.0018  time: 0.0372
2025/05/19 12:46:30 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 12:46:31 - mmengine - INFO - The best checkpoint with 0.3930 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/19 12:46:49 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:19  time: 0.3665  data_time: 0.0049  memory: 4361  loss: 1.0536  loss_rpn_cls: 0.0708  loss_rpn_bbox: 0.1372  loss_cls: 0.3885  acc: 86.1816  loss_bbox: 0.4572
2025/05/19 12:47:07 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:21:57  time: 0.3590  data_time: 0.0024  memory: 4361  loss: 1.0321  loss_rpn_cls: 0.0719  loss_rpn_bbox: 0.1383  loss_cls: 0.3674  acc: 84.3996  loss_bbox: 0.4544
2025/05/19 12:47:22 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:47:24 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:47:25 - mmengine - INFO - bbox_mAP_copypaste: 0.418 0.714 0.456 -1.000 0.328 0.438
2025/05/19 12:47:25 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4180  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.4560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3280  coco/bbox_mAP_l: 0.4380  data_time: 0.0016  time: 0.0369
2025/05/19 12:47:25 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/19 12:47:26 - mmengine - INFO - The best checkpoint with 0.4180 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 12:47:44 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:21  time: 0.3646  data_time: 0.0052  memory: 4360  loss: 0.9699  loss_rpn_cls: 0.0531  loss_rpn_bbox: 0.1328  loss_cls: 0.3509  acc: 87.6465  loss_bbox: 0.4332
2025/05/19 12:48:02 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:01  time: 0.3634  data_time: 0.0024  memory: 4360  loss: 1.0082  loss_rpn_cls: 0.0694  loss_rpn_bbox: 0.1306  loss_cls: 0.3744  acc: 90.1855  loss_bbox: 0.4338
2025/05/19 12:48:17 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:48:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:48:20 - mmengine - INFO - bbox_mAP_copypaste: 0.435 0.740 0.468 -1.000 0.290 0.461
2025/05/19 12:48:20 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4350  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.4680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.4610  data_time: 0.0016  time: 0.0368
2025/05/19 12:48:20 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 12:48:21 - mmengine - INFO - The best checkpoint with 0.4350 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/19 12:48:39 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:26  time: 0.3662  data_time: 0.0048  memory: 4361  loss: 0.9711  loss_rpn_cls: 0.0632  loss_rpn_bbox: 0.1270  loss_cls: 0.3528  acc: 85.7422  loss_bbox: 0.4280
2025/05/19 12:48:58 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:07  time: 0.3629  data_time: 0.0024  memory: 4360  loss: 0.9211  loss_rpn_cls: 0.0530  loss_rpn_bbox: 0.1229  loss_cls: 0.3353  acc: 84.7168  loss_bbox: 0.4100
2025/05/19 12:49:12 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:49:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:49:16 - mmengine - INFO - bbox_mAP_copypaste: 0.402 0.670 0.454 -1.000 0.307 0.426
2025/05/19 12:49:16 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4020  coco/bbox_mAP_50: 0.6700  coco/bbox_mAP_75: 0.4540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4260  data_time: 0.0016  time: 0.0368
2025/05/19 12:49:21 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:49:34 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:33  time: 0.3671  data_time: 0.0048  memory: 4361  loss: 0.8882  loss_rpn_cls: 0.0473  loss_rpn_bbox: 0.1197  loss_cls: 0.3160  acc: 86.1816  loss_bbox: 0.4052
2025/05/19 12:49:52 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:14  time: 0.3634  data_time: 0.0023  memory: 4361  loss: 0.8954  loss_rpn_cls: 0.0496  loss_rpn_bbox: 0.1212  loss_cls: 0.3231  acc: 88.6719  loss_bbox: 0.4015
2025/05/19 12:50:07 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:50:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:50:10 - mmengine - INFO - bbox_mAP_copypaste: 0.375 0.631 0.421 -1.000 0.262 0.401
2025/05/19 12:50:10 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3750  coco/bbox_mAP_50: 0.6310  coco/bbox_mAP_75: 0.4210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2620  coco/bbox_mAP_l: 0.4010  data_time: 0.0015  time: 0.0365
2025/05/19 12:50:28 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:39  time: 0.3666  data_time: 0.0047  memory: 4361  loss: 0.8061  loss_rpn_cls: 0.0400  loss_rpn_bbox: 0.1088  loss_cls: 0.2799  acc: 92.0898  loss_bbox: 0.3774
2025/05/19 12:50:47 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:21  time: 0.3652  data_time: 0.0023  memory: 4361  loss: 0.7799  loss_rpn_cls: 0.0367  loss_rpn_bbox: 0.1033  loss_cls: 0.2694  acc: 87.7441  loss_bbox: 0.3706
2025/05/19 12:51:02 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:51:03 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:51:05 - mmengine - INFO - bbox_mAP_copypaste: 0.472 0.756 0.559 -1.000 0.337 0.495
2025/05/19 12:51:05 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4720  coco/bbox_mAP_50: 0.7560  coco/bbox_mAP_75: 0.5590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3370  coco/bbox_mAP_l: 0.4950  data_time: 0.0016  time: 0.0365
2025/05/19 12:51:05 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/19 12:51:06 - mmengine - INFO - The best checkpoint with 0.4720 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 12:51:24 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:47  time: 0.3711  data_time: 0.0047  memory: 4361  loss: 0.7645  loss_rpn_cls: 0.0344  loss_rpn_bbox: 0.1010  loss_cls: 0.2648  acc: 87.0117  loss_bbox: 0.3643
2025/05/19 12:51:42 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:29  time: 0.3652  data_time: 0.0024  memory: 4361  loss: 0.7627  loss_rpn_cls: 0.0349  loss_rpn_bbox: 0.1019  loss_cls: 0.2646  acc: 90.9180  loss_bbox: 0.3613
2025/05/19 12:51:57 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:51:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:52:01 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.744 0.544 -1.000 0.333 0.486
2025/05/19 12:52:01 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3330  coco/bbox_mAP_l: 0.4860  data_time: 0.0017  time: 0.0365
2025/05/19 12:52:19 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:56  time: 0.3717  data_time: 0.0049  memory: 4361  loss: 0.7391  loss_rpn_cls: 0.0332  loss_rpn_bbox: 0.0995  loss_cls: 0.2534  acc: 91.4062  loss_bbox: 0.3530
2025/05/19 12:52:37 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:37  time: 0.3662  data_time: 0.0022  memory: 4361  loss: 0.7498  loss_rpn_cls: 0.0313  loss_rpn_bbox: 0.1012  loss_cls: 0.2567  acc: 91.1621  loss_bbox: 0.3605
2025/05/19 12:52:52 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:52:54 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:52:55 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.735 0.534 -1.000 0.318 0.482
2025/05/19 12:52:55 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0365
2025/05/19 12:53:14 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:03  time: 0.3686  data_time: 0.0049  memory: 4361  loss: 0.7493  loss_rpn_cls: 0.0341  loss_rpn_bbox: 0.0992  loss_cls: 0.2595  acc: 90.0391  loss_bbox: 0.3565
2025/05/19 12:53:32 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:45  time: 0.3666  data_time: 0.0023  memory: 4361  loss: 0.7270  loss_rpn_cls: 0.0291  loss_rpn_bbox: 0.0975  loss_cls: 0.2513  acc: 90.9668  loss_bbox: 0.3491
2025/05/19 12:53:47 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:53:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:53:50 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.741 0.543 -1.000 0.317 0.488
2025/05/19 12:53:50 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0361
2025/05/19 12:54:09 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:12  time: 0.3707  data_time: 0.0049  memory: 4361  loss: 0.7356  loss_rpn_cls: 0.0336  loss_rpn_bbox: 0.0998  loss_cls: 0.2472  acc: 90.1855  loss_bbox: 0.3549
2025/05/19 12:54:27 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:53  time: 0.3670  data_time: 0.0023  memory: 4361  loss: 0.7237  loss_rpn_cls: 0.0297  loss_rpn_bbox: 0.0971  loss_cls: 0.2488  acc: 89.0625  loss_bbox: 0.3481
2025/05/19 12:54:42 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:54:44 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:54:45 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.743 0.545 -1.000 0.323 0.488
2025/05/19 12:54:45 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4880  data_time: 0.0017  time: 0.0362
2025/05/19 12:55:03 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:20  time: 0.3668  data_time: 0.0050  memory: 4361  loss: 0.7287  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0972  loss_cls: 0.2500  acc: 89.2090  loss_bbox: 0.3524
2025/05/19 12:55:22 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:01  time: 0.3655  data_time: 0.0022  memory: 4361  loss: 0.7412  loss_rpn_cls: 0.0327  loss_rpn_bbox: 0.0984  loss_cls: 0.2546  acc: 89.9414  loss_bbox: 0.3555
2025/05/19 12:55:37 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:55:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:55:40 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.742 0.541 -1.000 0.323 0.488
2025/05/19 12:55:40 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4880  data_time: 0.0015  time: 0.0364
2025/05/19 12:55:50 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:55:58 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:28  time: 0.3680  data_time: 0.0049  memory: 4361  loss: 0.7278  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0983  loss_cls: 0.2470  acc: 90.2344  loss_bbox: 0.3533
2025/05/19 12:56:17 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:10  time: 0.3668  data_time: 0.0024  memory: 4361  loss: 0.7400  loss_rpn_cls: 0.0327  loss_rpn_bbox: 0.0991  loss_cls: 0.2559  acc: 89.1113  loss_bbox: 0.3523
2025/05/19 12:56:32 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:56:33 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:56:35 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.743 0.545 -1.000 0.321 0.486
2025/05/19 12:56:35 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3210  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0363
2025/05/19 12:56:53 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:36  time: 0.3682  data_time: 0.0047  memory: 4361  loss: 0.7270  loss_rpn_cls: 0.0309  loss_rpn_bbox: 0.0972  loss_cls: 0.2499  acc: 90.1855  loss_bbox: 0.3490
2025/05/19 12:57:12 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:18  time: 0.3661  data_time: 0.0023  memory: 4361  loss: 0.7295  loss_rpn_cls: 0.0332  loss_rpn_bbox: 0.0990  loss_cls: 0.2446  acc: 88.9648  loss_bbox: 0.3527
2025/05/19 12:57:26 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:57:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:57:30 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.745 0.551 -1.000 0.324 0.489
2025/05/19 12:57:30 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4890  data_time: 0.0017  time: 0.0363
2025/05/19 12:57:48 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:45  time: 0.3697  data_time: 0.0048  memory: 4361  loss: 0.7302  loss_rpn_cls: 0.0307  loss_rpn_bbox: 0.0974  loss_cls: 0.2497  acc: 88.2324  loss_bbox: 0.3524
2025/05/19 12:58:07 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:26  time: 0.3666  data_time: 0.0024  memory: 4361  loss: 0.7226  loss_rpn_cls: 0.0307  loss_rpn_bbox: 0.0983  loss_cls: 0.2462  acc: 88.3789  loss_bbox: 0.3475
2025/05/19 12:58:21 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:58:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:58:25 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.733 0.536 -1.000 0.324 0.483
2025/05/19 12:58:25 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0365
2025/05/19 12:58:43 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:53  time: 0.3687  data_time: 0.0049  memory: 4361  loss: 0.7232  loss_rpn_cls: 0.0296  loss_rpn_bbox: 0.0967  loss_cls: 0.2475  acc: 88.9648  loss_bbox: 0.3494
2025/05/19 12:59:01 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:35  time: 0.3640  data_time: 0.0022  memory: 4361  loss: 0.7302  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0980  loss_cls: 0.2505  acc: 90.7227  loss_bbox: 0.3514
2025/05/19 12:59:16 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 12:59:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 12:59:19 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.744 0.544 -1.000 0.322 0.486
2025/05/19 12:59:19 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3220  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0364
2025/05/19 12:59:38 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:01  time: 0.3732  data_time: 0.0049  memory: 4361  loss: 0.7463  loss_rpn_cls: 0.0336  loss_rpn_bbox: 0.1001  loss_cls: 0.2539  acc: 88.9648  loss_bbox: 0.3587
2025/05/19 12:59:56 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:43  time: 0.3624  data_time: 0.0022  memory: 4361  loss: 0.7063  loss_rpn_cls: 0.0286  loss_rpn_bbox: 0.0957  loss_cls: 0.2385  acc: 90.7227  loss_bbox: 0.3434
2025/05/19 13:00:11 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:00:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:00:14 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.745 0.542 -1.000 0.326 0.489
2025/05/19 13:00:14 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7450  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3260  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0362
2025/05/19 13:00:33 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:10  time: 0.3713  data_time: 0.0049  memory: 4361  loss: 0.7449  loss_rpn_cls: 0.0354  loss_rpn_bbox: 0.1007  loss_cls: 0.2560  acc: 87.4023  loss_bbox: 0.3528
2025/05/19 13:00:51 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:51  time: 0.3663  data_time: 0.0023  memory: 4361  loss: 0.7205  loss_rpn_cls: 0.0284  loss_rpn_bbox: 0.0971  loss_cls: 0.2467  acc: 93.1152  loss_bbox: 0.3483
2025/05/19 13:01:06 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:01:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:01:09 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.731 0.535 -1.000 0.322 0.481
2025/05/19 13:01:09 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3220  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0362
2025/05/19 13:01:28 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:18  time: 0.3694  data_time: 0.0049  memory: 4361  loss: 0.7253  loss_rpn_cls: 0.0325  loss_rpn_bbox: 0.0977  loss_cls: 0.2455  acc: 89.7461  loss_bbox: 0.3496
2025/05/19 13:01:46 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:00  time: 0.3681  data_time: 0.0023  memory: 4361  loss: 0.7274  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0974  loss_cls: 0.2505  acc: 90.0391  loss_bbox: 0.3506
2025/05/19 13:02:01 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:02:03 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:02:04 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.738 0.543 -1.000 0.323 0.486
2025/05/19 13:02:04 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4860  data_time: 0.0015  time: 0.0362
2025/05/19 13:02:19 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:02:23 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:26  time: 0.3700  data_time: 0.0048  memory: 4361  loss: 0.7315  loss_rpn_cls: 0.0318  loss_rpn_bbox: 0.0991  loss_cls: 0.2505  acc: 92.1875  loss_bbox: 0.3502
2025/05/19 13:02:41 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:08  time: 0.3653  data_time: 0.0023  memory: 4361  loss: 0.7198  loss_rpn_cls: 0.0320  loss_rpn_bbox: 0.0953  loss_cls: 0.2469  acc: 87.7441  loss_bbox: 0.3456
2025/05/19 13:02:56 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:02:58 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:02:59 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.739 0.544 -1.000 0.324 0.486
2025/05/19 13:02:59 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4860  data_time: 0.0014  time: 0.0362
2025/05/19 13:03:17 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:35  time: 0.3669  data_time: 0.0049  memory: 4361  loss: 0.7307  loss_rpn_cls: 0.0329  loss_rpn_bbox: 0.0989  loss_cls: 0.2468  acc: 90.8203  loss_bbox: 0.3522
2025/05/19 13:03:36 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:16  time: 0.3678  data_time: 0.0023  memory: 4361  loss: 0.7226  loss_rpn_cls: 0.0310  loss_rpn_bbox: 0.0978  loss_cls: 0.2442  acc: 91.3574  loss_bbox: 0.3495
2025/05/19 13:03:51 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:03:53 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:03:54 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.739 0.540 -1.000 0.324 0.486
2025/05/19 13:03:54 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3240  coco/bbox_mAP_l: 0.4860  data_time: 0.0017  time: 0.0364
2025/05/19 13:04:12 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:43  time: 0.3669  data_time: 0.0047  memory: 4361  loss: 0.7300  loss_rpn_cls: 0.0322  loss_rpn_bbox: 0.0980  loss_cls: 0.2520  acc: 90.5273  loss_bbox: 0.3478
2025/05/19 13:04:31 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:25  time: 0.3638  data_time: 0.0022  memory: 4361  loss: 0.7231  loss_rpn_cls: 0.0323  loss_rpn_bbox: 0.0967  loss_cls: 0.2450  acc: 92.5293  loss_bbox: 0.3491
2025/05/19 13:04:45 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:04:47 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:04:49 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.736 0.541 -1.000 0.325 0.485
2025/05/19 13:04:49 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3250  coco/bbox_mAP_l: 0.4850  data_time: 0.0018  time: 0.0379
2025/05/19 13:05:07 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:51  time: 0.3676  data_time: 0.0049  memory: 4361  loss: 0.7198  loss_rpn_cls: 0.0301  loss_rpn_bbox: 0.0964  loss_cls: 0.2451  acc: 88.5742  loss_bbox: 0.3482
2025/05/19 13:05:25 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:33  time: 0.3657  data_time: 0.0024  memory: 4361  loss: 0.7188  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.0975  loss_cls: 0.2452  acc: 88.7207  loss_bbox: 0.3458
2025/05/19 13:05:40 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:05:42 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:05:44 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.736 0.540 -1.000 0.325 0.483
2025/05/19 13:05:44 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3250  coco/bbox_mAP_l: 0.4830  data_time: 0.0015  time: 0.0363
2025/05/19 13:06:02 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:00  time: 0.3689  data_time: 0.0049  memory: 4361  loss: 0.7260  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.0976  loss_cls: 0.2477  acc: 88.5254  loss_bbox: 0.3499
2025/05/19 13:06:20 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:41  time: 0.3674  data_time: 0.0024  memory: 4361  loss: 0.7083  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0957  loss_cls: 0.2395  acc: 90.2344  loss_bbox: 0.3438
2025/05/19 13:06:35 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:06:37 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:06:39 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.740 0.535 -1.000 0.325 0.483
2025/05/19 13:06:39 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3250  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0364
2025/05/19 13:06:57 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:08  time: 0.3705  data_time: 0.0048  memory: 4361  loss: 0.7275  loss_rpn_cls: 0.0321  loss_rpn_bbox: 0.0992  loss_cls: 0.2483  acc: 89.7461  loss_bbox: 0.3478
2025/05/19 13:07:15 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3669  data_time: 0.0022  memory: 4361  loss: 0.7110  loss_rpn_cls: 0.0276  loss_rpn_bbox: 0.0965  loss_cls: 0.2427  acc: 86.6699  loss_bbox: 0.3442
2025/05/19 13:07:30 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:07:32 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:07:33 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.742 0.545 -1.000 0.327 0.488
2025/05/19 13:07:33 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3270  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0364
2025/05/19 13:07:52 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:16  time: 0.3705  data_time: 0.0048  memory: 4361  loss: 0.7274  loss_rpn_cls: 0.0316  loss_rpn_bbox: 0.0986  loss_cls: 0.2484  acc: 92.1875  loss_bbox: 0.3488
2025/05/19 13:08:10 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3650  data_time: 0.0023  memory: 4361  loss: 0.7159  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0965  loss_cls: 0.2429  acc: 91.0156  loss_bbox: 0.3493
2025/05/19 13:08:25 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:08:27 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:08:28 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.739 0.538 -1.000 0.323 0.485
2025/05/19 13:08:28 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0365
2025/05/19 13:08:47 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3690  data_time: 0.0048  memory: 4361  loss: 0.7207  loss_rpn_cls: 0.0343  loss_rpn_bbox: 0.0978  loss_cls: 0.2415  acc: 91.4062  loss_bbox: 0.3471
2025/05/19 13:08:48 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:09:06 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3799  data_time: 0.0025  memory: 4361  loss: 0.7198  loss_rpn_cls: 0.0268  loss_rpn_bbox: 0.0975  loss_cls: 0.2475  acc: 91.1133  loss_bbox: 0.3480
2025/05/19 13:09:21 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:09:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:09:24 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.742 0.549 -1.000 0.329 0.489
2025/05/19 13:09:24 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3290  coco/bbox_mAP_l: 0.4890  data_time: 0.0017  time: 0.0364
2025/05/19 13:09:42 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3669  data_time: 0.0047  memory: 4361  loss: 0.7161  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.0962  loss_cls: 0.2435  acc: 89.4531  loss_bbox: 0.3455
2025/05/19 13:10:01 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3682  data_time: 0.0023  memory: 4361  loss: 0.7306  loss_rpn_cls: 0.0308  loss_rpn_bbox: 0.0983  loss_cls: 0.2520  acc: 89.8438  loss_bbox: 0.3495
2025/05/19 13:10:16 - mmengine - INFO - Exp name: fasterrcnn_fs_flip_hor_ver_20250519_124231
2025/05/19 13:10:16 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 13:10:20 - mmengine - INFO - Evaluating bbox...
2025/05/19 13:10:21 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.736 0.539 -1.000 0.328 0.484
2025/05/19 13:10:21 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3280  coco/bbox_mAP_l: 0.4840  data_time: 0.0017  time: 0.0380
