2025/05/19 16:37:17 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 394907153
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 394907153
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 16:37:17 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='Color'),
            dict(prob=0.5, type='Brightness'),
            dict(prob=0.5, type='Equalize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='Color'),
    dict(prob=0.5, type='Brightness'),
    dict(prob=0.5, type='Equalize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 16:37:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 16:37:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 16:37:19 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 16:37:19 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 16:37:19 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 16:37:19 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 16:37:19 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 16:37:19 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 16:37:42 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:46  time: 0.4706  data_time: 0.0929  memory: 4361  loss: 1.9925  loss_rpn_cls: 0.5736  loss_rpn_bbox: 0.2548  loss_cls: 0.7807  acc: 76.1719  loss_bbox: 0.3834
2025/05/19 16:38:01 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:07  time: 0.3756  data_time: 0.0024  memory: 4361  loss: 1.9134  loss_rpn_cls: 0.3466  loss_rpn_bbox: 0.2279  loss_cls: 0.6546  acc: 81.0547  loss_bbox: 0.6844
2025/05/19 16:38:17 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:38:27 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:38:28 - mmengine - INFO - bbox_mAP_copypaste: 0.120 0.275 0.069 -1.000 0.027 0.132
2025/05/19 16:38:28 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1200  coco/bbox_mAP_50: 0.2750  coco/bbox_mAP_75: 0.0690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0270  coco/bbox_mAP_l: 0.1320  data_time: 0.1640  time: 0.2046
2025/05/19 16:38:29 - mmengine - INFO - The best checkpoint with 0.1200 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 16:38:48 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:27:03  time: 0.3787  data_time: 0.0071  memory: 4361  loss: 1.5941  loss_rpn_cls: 0.1691  loss_rpn_bbox: 0.1948  loss_cls: 0.5803  acc: 82.1713  loss_bbox: 0.6499
2025/05/19 16:39:06 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:10  time: 0.3619  data_time: 0.0024  memory: 4361  loss: 1.4492  loss_rpn_cls: 0.1318  loss_rpn_bbox: 0.1864  loss_cls: 0.5375  acc: 83.0075  loss_bbox: 0.5935
2025/05/19 16:39:21 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:39:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:39:24 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.544 0.287 -1.000 0.164 0.318
2025/05/19 16:39:24 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.5440  coco/bbox_mAP_75: 0.2870  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1640  coco/bbox_mAP_l: 0.3180  data_time: 0.0016  time: 0.0373
2025/05/19 16:39:24 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 16:39:25 - mmengine - INFO - The best checkpoint with 0.2900 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 16:39:44 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:06  time: 0.3729  data_time: 0.0071  memory: 4361  loss: 1.3521  loss_rpn_cls: 0.1121  loss_rpn_bbox: 0.1689  loss_cls: 0.5143  acc: 78.6621  loss_bbox: 0.5568
2025/05/19 16:40:02 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:34  time: 0.3603  data_time: 0.0025  memory: 4361  loss: 1.3016  loss_rpn_cls: 0.1023  loss_rpn_bbox: 0.1684  loss_cls: 0.4967  acc: 83.1543  loss_bbox: 0.5342
2025/05/19 16:40:17 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:40:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:40:20 - mmengine - INFO - bbox_mAP_copypaste: 0.288 0.533 0.286 -1.000 0.206 0.308
2025/05/19 16:40:20 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2880  coco/bbox_mAP_50: 0.5330  coco/bbox_mAP_75: 0.2860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3080  data_time: 0.0017  time: 0.0375
2025/05/19 16:40:38 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:46  time: 0.3678  data_time: 0.0069  memory: 4361  loss: 1.2045  loss_rpn_cls: 0.0891  loss_rpn_bbox: 0.1564  loss_cls: 0.4654  acc: 72.2656  loss_bbox: 0.4937
2025/05/19 16:40:56 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:19  time: 0.3582  data_time: 0.0027  memory: 4361  loss: 1.2440  loss_rpn_cls: 0.0934  loss_rpn_bbox: 0.1654  loss_cls: 0.4800  acc: 85.1889  loss_bbox: 0.5052
2025/05/19 16:41:11 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:41:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:41:14 - mmengine - INFO - bbox_mAP_copypaste: 0.390 0.675 0.409 -1.000 0.245 0.421
2025/05/19 16:41:14 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3900  coco/bbox_mAP_50: 0.6750  coco/bbox_mAP_75: 0.4090  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2450  coco/bbox_mAP_l: 0.4210  data_time: 0.0016  time: 0.0389
2025/05/19 16:41:14 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 16:41:15 - mmengine - INFO - The best checkpoint with 0.3900 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/19 16:41:34 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:39  time: 0.3711  data_time: 0.0067  memory: 4361  loss: 1.1120  loss_rpn_cls: 0.0813  loss_rpn_bbox: 0.1450  loss_cls: 0.4172  acc: 81.1016  loss_bbox: 0.4685
2025/05/19 16:41:52 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:15  time: 0.3580  data_time: 0.0024  memory: 4361  loss: 1.0384  loss_rpn_cls: 0.0707  loss_rpn_bbox: 0.1366  loss_cls: 0.3908  acc: 86.9394  loss_bbox: 0.4403
2025/05/19 16:42:06 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:42:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:42:10 - mmengine - INFO - bbox_mAP_copypaste: 0.403 0.714 0.413 -1.000 0.300 0.426
2025/05/19 16:42:10 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4030  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.4130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4260  data_time: 0.0017  time: 0.0372
2025/05/19 16:42:10 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/19 16:42:11 - mmengine - INFO - The best checkpoint with 0.4030 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 16:42:29 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:38  time: 0.3738  data_time: 0.0072  memory: 4361  loss: 0.9928  loss_rpn_cls: 0.0619  loss_rpn_bbox: 0.1317  loss_cls: 0.3750  acc: 86.0840  loss_bbox: 0.4242
2025/05/19 16:42:47 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:17  time: 0.3630  data_time: 0.0024  memory: 4361  loss: 1.0083  loss_rpn_cls: 0.0615  loss_rpn_bbox: 0.1338  loss_cls: 0.3835  acc: 83.5926  loss_bbox: 0.4296
2025/05/19 16:43:02 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:43:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:43:06 - mmengine - INFO - bbox_mAP_copypaste: 0.394 0.705 0.405 -1.000 0.276 0.415
2025/05/19 16:43:06 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3940  coco/bbox_mAP_50: 0.7050  coco/bbox_mAP_75: 0.4050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2760  coco/bbox_mAP_l: 0.4150  data_time: 0.0016  time: 0.0370
2025/05/19 16:43:24 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:41  time: 0.3667  data_time: 0.0066  memory: 4361  loss: 0.9510  loss_rpn_cls: 0.0536  loss_rpn_bbox: 0.1255  loss_cls: 0.3530  acc: 86.2086  loss_bbox: 0.4190
2025/05/19 16:43:42 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:20  time: 0.3628  data_time: 0.0022  memory: 4361  loss: 0.9310  loss_rpn_cls: 0.0519  loss_rpn_bbox: 0.1268  loss_cls: 0.3498  acc: 87.2070  loss_bbox: 0.4025
2025/05/19 16:43:57 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:43:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:44:00 - mmengine - INFO - bbox_mAP_copypaste: 0.382 0.639 0.425 -1.000 0.261 0.410
2025/05/19 16:44:00 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3820  coco/bbox_mAP_50: 0.6390  coco/bbox_mAP_75: 0.4250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2610  coco/bbox_mAP_l: 0.4100  data_time: 0.0016  time: 0.0369
2025/05/19 16:44:05 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:44:18 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:44  time: 0.3654  data_time: 0.0062  memory: 4361  loss: 0.9362  loss_rpn_cls: 0.0579  loss_rpn_bbox: 0.1278  loss_cls: 0.3375  acc: 86.8164  loss_bbox: 0.4129
2025/05/19 16:44:36 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:25  time: 0.3651  data_time: 0.0024  memory: 4361  loss: 0.9265  loss_rpn_cls: 0.0533  loss_rpn_bbox: 0.1213  loss_cls: 0.3518  acc: 87.9395  loss_bbox: 0.4001
2025/05/19 16:44:51 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:44:53 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:44:55 - mmengine - INFO - bbox_mAP_copypaste: 0.423 0.727 0.462 -1.000 0.260 0.451
2025/05/19 16:44:55 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4230  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.4620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2600  coco/bbox_mAP_l: 0.4510  data_time: 0.0016  time: 0.0374
2025/05/19 16:44:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 16:44:56 - mmengine - INFO - The best checkpoint with 0.4230 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/19 16:45:14 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:50  time: 0.3733  data_time: 0.0075  memory: 4361  loss: 0.8312  loss_rpn_cls: 0.0423  loss_rpn_bbox: 0.1065  loss_cls: 0.3112  acc: 90.7227  loss_bbox: 0.3712
2025/05/19 16:45:33 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:32  time: 0.3695  data_time: 0.0023  memory: 4361  loss: 0.7840  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1020  loss_cls: 0.2829  acc: 87.7441  loss_bbox: 0.3616
2025/05/19 16:45:48 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:45:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:45:51 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.743 0.558 -1.000 0.292 0.494
2025/05/19 16:45:51 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0366
2025/05/19 16:45:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/19 16:45:52 - mmengine - INFO - The best checkpoint with 0.4650 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 16:46:10 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:57  time: 0.3712  data_time: 0.0062  memory: 4361  loss: 0.7627  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.1003  loss_cls: 0.2772  acc: 89.8926  loss_bbox: 0.3538
2025/05/19 16:46:29 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:39  time: 0.3670  data_time: 0.0023  memory: 4361  loss: 0.7494  loss_rpn_cls: 0.0311  loss_rpn_bbox: 0.0990  loss_cls: 0.2718  acc: 92.5781  loss_bbox: 0.3475
2025/05/19 16:46:44 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:46:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:46:47 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.725 0.548 -1.000 0.290 0.483
2025/05/19 16:46:47 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0365
2025/05/19 16:47:06 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:05  time: 0.3704  data_time: 0.0067  memory: 4361  loss: 0.7501  loss_rpn_cls: 0.0324  loss_rpn_bbox: 0.0989  loss_cls: 0.2702  acc: 87.9883  loss_bbox: 0.3485
2025/05/19 16:47:24 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:46  time: 0.3669  data_time: 0.0023  memory: 4361  loss: 0.7627  loss_rpn_cls: 0.0372  loss_rpn_bbox: 0.0997  loss_cls: 0.2720  acc: 87.8418  loss_bbox: 0.3538
2025/05/19 16:47:39 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:47:41 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:47:42 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.738 0.561 -1.000 0.297 0.492
2025/05/19 16:47:42 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0363
2025/05/19 16:48:01 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:12  time: 0.3720  data_time: 0.0068  memory: 4361  loss: 0.7165  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0962  loss_cls: 0.2552  acc: 86.6211  loss_bbox: 0.3369
2025/05/19 16:48:19 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:54  time: 0.3693  data_time: 0.0024  memory: 4361  loss: 0.7479  loss_rpn_cls: 0.0300  loss_rpn_bbox: 0.0994  loss_cls: 0.2670  acc: 89.8438  loss_bbox: 0.3516
2025/05/19 16:48:34 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:48:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:48:37 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.728 0.554 -1.000 0.301 0.487
2025/05/19 16:48:37 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7280  coco/bbox_mAP_75: 0.5540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4870  data_time: 0.0017  time: 0.0366
2025/05/19 16:48:56 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:20  time: 0.3711  data_time: 0.0058  memory: 4361  loss: 0.7221  loss_rpn_cls: 0.0307  loss_rpn_bbox: 0.0959  loss_cls: 0.2548  acc: 88.8184  loss_bbox: 0.3406
2025/05/19 16:49:14 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:01  time: 0.3667  data_time: 0.0024  memory: 4361  loss: 0.7100  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0957  loss_cls: 0.2500  acc: 90.0391  loss_bbox: 0.3375
2025/05/19 16:49:29 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:49:31 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:49:33 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.730 0.557 -1.000 0.302 0.488
2025/05/19 16:49:33 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4880  data_time: 0.0015  time: 0.0361
2025/05/19 16:49:51 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:28  time: 0.3733  data_time: 0.0063  memory: 4361  loss: 0.7226  loss_rpn_cls: 0.0279  loss_rpn_bbox: 0.0958  loss_cls: 0.2582  acc: 90.4785  loss_bbox: 0.3407
2025/05/19 16:50:10 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:09  time: 0.3689  data_time: 0.0024  memory: 4361  loss: 0.7286  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0975  loss_cls: 0.2616  acc: 90.0391  loss_bbox: 0.3413
2025/05/19 16:50:25 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:50:26 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:50:28 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.727 0.550 -1.000 0.302 0.485
2025/05/19 16:50:28 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0363
2025/05/19 16:50:38 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:50:47 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:36  time: 0.3774  data_time: 0.0065  memory: 4361  loss: 0.7359  loss_rpn_cls: 0.0304  loss_rpn_bbox: 0.0978  loss_cls: 0.2623  acc: 89.4043  loss_bbox: 0.3453
2025/05/19 16:51:05 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:17  time: 0.3701  data_time: 0.0023  memory: 4361  loss: 0.7159  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0952  loss_cls: 0.2540  acc: 90.0879  loss_bbox: 0.3380
2025/05/19 16:51:20 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:51:22 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:51:23 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.726 0.549 -1.000 0.303 0.485
2025/05/19 16:51:23 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4850  data_time: 0.0015  time: 0.0364
2025/05/19 16:51:42 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:43  time: 0.3737  data_time: 0.0063  memory: 4361  loss: 0.7303  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0962  loss_cls: 0.2613  acc: 87.8418  loss_bbox: 0.3436
2025/05/19 16:52:01 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:25  time: 0.3707  data_time: 0.0024  memory: 4361  loss: 0.7265  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0981  loss_cls: 0.2599  acc: 91.6992  loss_bbox: 0.3397
2025/05/19 16:52:16 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:52:17 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:52:19 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.726 0.547 -1.000 0.296 0.484
2025/05/19 16:52:19 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0364
2025/05/19 16:52:38 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:51  time: 0.3754  data_time: 0.0064  memory: 4361  loss: 0.7302  loss_rpn_cls: 0.0279  loss_rpn_bbox: 0.0976  loss_cls: 0.2618  acc: 90.5762  loss_bbox: 0.3429
2025/05/19 16:52:56 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:33  time: 0.3713  data_time: 0.0024  memory: 4361  loss: 0.7222  loss_rpn_cls: 0.0273  loss_rpn_bbox: 0.0970  loss_cls: 0.2537  acc: 91.3574  loss_bbox: 0.3443
2025/05/19 16:53:11 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:53:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:53:14 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.730 0.548 -1.000 0.301 0.486
2025/05/19 16:53:14 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0363
2025/05/19 16:53:33 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:59  time: 0.3707  data_time: 0.0061  memory: 4361  loss: 0.7121  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.0959  loss_cls: 0.2511  acc: 90.8203  loss_bbox: 0.3399
2025/05/19 16:53:51 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:40  time: 0.3694  data_time: 0.0025  memory: 4361  loss: 0.7346  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0972  loss_cls: 0.2667  acc: 86.6699  loss_bbox: 0.3417
2025/05/19 16:54:06 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:54:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:54:09 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.726 0.555 -1.000 0.299 0.484
2025/05/19 16:54:09 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0363
2025/05/19 16:54:28 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:07  time: 0.3718  data_time: 0.0072  memory: 4361  loss: 0.7065  loss_rpn_cls: 0.0260  loss_rpn_bbox: 0.0950  loss_cls: 0.2480  acc: 88.7207  loss_bbox: 0.3375
2025/05/19 16:54:46 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:48  time: 0.3700  data_time: 0.0025  memory: 4361  loss: 0.7138  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0964  loss_cls: 0.2528  acc: 91.3086  loss_bbox: 0.3370
2025/05/19 16:55:02 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:55:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:55:05 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.731 0.551 -1.000 0.301 0.488
2025/05/19 16:55:05 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0363
2025/05/19 16:55:23 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:15  time: 0.3708  data_time: 0.0057  memory: 4361  loss: 0.7226  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0963  loss_cls: 0.2581  acc: 91.6504  loss_bbox: 0.3400
2025/05/19 16:55:42 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:56  time: 0.3677  data_time: 0.0027  memory: 4361  loss: 0.7173  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.0948  loss_cls: 0.2570  acc: 89.2578  loss_bbox: 0.3370
2025/05/19 16:55:57 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:55:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:56:00 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.728 0.548 -1.000 0.303 0.484
2025/05/19 16:56:00 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7280  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4840  data_time: 0.0017  time: 0.0365
2025/05/19 16:56:19 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:22  time: 0.3698  data_time: 0.0062  memory: 4361  loss: 0.7026  loss_rpn_cls: 0.0249  loss_rpn_bbox: 0.0942  loss_cls: 0.2503  acc: 90.6250  loss_bbox: 0.3332
2025/05/19 16:56:37 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:04  time: 0.3704  data_time: 0.0023  memory: 4361  loss: 0.7243  loss_rpn_cls: 0.0324  loss_rpn_bbox: 0.0970  loss_cls: 0.2569  acc: 89.2090  loss_bbox: 0.3379
2025/05/19 16:56:52 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:56:54 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:56:55 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.729 0.552 -1.000 0.298 0.485
2025/05/19 16:56:55 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4850  data_time: 0.0015  time: 0.0362
2025/05/19 16:57:10 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:57:14 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:30  time: 0.3755  data_time: 0.0060  memory: 4361  loss: 0.7231  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0952  loss_cls: 0.2579  acc: 89.0137  loss_bbox: 0.3413
2025/05/19 16:57:32 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:12  time: 0.3669  data_time: 0.0025  memory: 4361  loss: 0.7052  loss_rpn_cls: 0.0258  loss_rpn_bbox: 0.0949  loss_cls: 0.2488  acc: 91.3574  loss_bbox: 0.3358
2025/05/19 16:57:48 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:57:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:57:51 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.725 0.548 -1.000 0.297 0.482
2025/05/19 16:57:51 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0363
2025/05/19 16:58:09 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:38  time: 0.3736  data_time: 0.0069  memory: 4361  loss: 0.7077  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0947  loss_cls: 0.2498  acc: 91.3574  loss_bbox: 0.3363
2025/05/19 16:58:28 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:20  time: 0.3700  data_time: 0.0024  memory: 4361  loss: 0.7170  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0967  loss_cls: 0.2531  acc: 87.3535  loss_bbox: 0.3383
2025/05/19 16:58:43 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:58:45 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:58:46 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.725 0.551 -1.000 0.296 0.482
2025/05/19 16:58:46 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0361
2025/05/19 16:59:05 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:46  time: 0.3734  data_time: 0.0053  memory: 4361  loss: 0.7185  loss_rpn_cls: 0.0277  loss_rpn_bbox: 0.0962  loss_cls: 0.2599  acc: 90.1367  loss_bbox: 0.3347
2025/05/19 16:59:23 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:28  time: 0.3681  data_time: 0.0024  memory: 4361  loss: 0.7051  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0944  loss_cls: 0.2465  acc: 89.9902  loss_bbox: 0.3370
2025/05/19 16:59:38 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 16:59:40 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:59:41 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.725 0.545 -1.000 0.299 0.482
2025/05/19 16:59:41 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0364
2025/05/19 17:00:00 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:54  time: 0.3720  data_time: 0.0070  memory: 4361  loss: 0.7007  loss_rpn_cls: 0.0250  loss_rpn_bbox: 0.0944  loss_cls: 0.2456  acc: 90.2832  loss_bbox: 0.3357
2025/05/19 17:00:19 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.3713  data_time: 0.0025  memory: 4361  loss: 0.7166  loss_rpn_cls: 0.0266  loss_rpn_bbox: 0.0971  loss_cls: 0.2558  acc: 90.0879  loss_bbox: 0.3370
2025/05/19 17:00:34 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:00:35 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:00:37 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.726 0.545 -1.000 0.293 0.482
2025/05/19 17:00:37 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2930  coco/bbox_mAP_l: 0.4820  data_time: 0.0017  time: 0.0363
2025/05/19 17:00:56 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:02  time: 0.3745  data_time: 0.0070  memory: 4361  loss: 0.7216  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0962  loss_cls: 0.2594  acc: 88.6230  loss_bbox: 0.3371
2025/05/19 17:01:14 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:43  time: 0.3678  data_time: 0.0024  memory: 4361  loss: 0.7027  loss_rpn_cls: 0.0253  loss_rpn_bbox: 0.0951  loss_cls: 0.2475  acc: 92.0898  loss_bbox: 0.3347
2025/05/19 17:01:29 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:01:31 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:01:32 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.725 0.547 -1.000 0.293 0.483
2025/05/19 17:01:32 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2930  coco/bbox_mAP_l: 0.4830  data_time: 0.0017  time: 0.0368
2025/05/19 17:01:51 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:10  time: 0.3738  data_time: 0.0074  memory: 4361  loss: 0.7109  loss_rpn_cls: 0.0251  loss_rpn_bbox: 0.0950  loss_cls: 0.2533  acc: 90.3320  loss_bbox: 0.3374
2025/05/19 17:02:09 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:51  time: 0.3674  data_time: 0.0024  memory: 4361  loss: 0.7013  loss_rpn_cls: 0.0237  loss_rpn_bbox: 0.0942  loss_cls: 0.2503  acc: 91.8945  loss_bbox: 0.3331
2025/05/19 17:02:24 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:02:26 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:02:28 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.725 0.541 -1.000 0.291 0.482
2025/05/19 17:02:28 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0364
2025/05/19 17:02:46 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3724  data_time: 0.0065  memory: 4361  loss: 0.7152  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0960  loss_cls: 0.2556  acc: 89.6973  loss_bbox: 0.3347
2025/05/19 17:03:05 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:59  time: 0.3665  data_time: 0.0024  memory: 4361  loss: 0.7150  loss_rpn_cls: 0.0277  loss_rpn_bbox: 0.0947  loss_cls: 0.2540  acc: 90.7715  loss_bbox: 0.3386
2025/05/19 17:03:20 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:03:22 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:03:23 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.725 0.543 -1.000 0.292 0.484
2025/05/19 17:03:23 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0377
2025/05/19 17:03:42 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3716  data_time: 0.0070  memory: 4361  loss: 0.7126  loss_rpn_cls: 0.0267  loss_rpn_bbox: 0.0952  loss_cls: 0.2519  acc: 92.4805  loss_bbox: 0.3388
2025/05/19 17:03:42 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:04:00 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3726  data_time: 0.0024  memory: 4361  loss: 0.7090  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0962  loss_cls: 0.2492  acc: 89.0625  loss_bbox: 0.3353
2025/05/19 17:04:15 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:04:17 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:04:19 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.727 0.548 -1.000 0.295 0.484
2025/05/19 17:04:19 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4840  data_time: 0.0015  time: 0.0366
2025/05/19 17:04:37 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3707  data_time: 0.0066  memory: 4361  loss: 0.7010  loss_rpn_cls: 0.0260  loss_rpn_bbox: 0.0938  loss_cls: 0.2463  acc: 90.0391  loss_bbox: 0.3348
2025/05/19 17:04:56 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3681  data_time: 0.0024  memory: 4361  loss: 0.7139  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0961  loss_cls: 0.2530  acc: 93.0664  loss_bbox: 0.3377
2025/05/19 17:05:11 - mmengine - INFO - Exp name: fasterrcnn_fs_col_br_eq_20250519_163713
2025/05/19 17:05:11 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 17:05:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 17:05:15 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.727 0.554 -1.000 0.295 0.484
2025/05/19 17:05:15 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4840  data_time: 0.0015  time: 0.0362
