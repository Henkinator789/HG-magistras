2025/05/13 17:15:42 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 159438991
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 159438991
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 17:15:42 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 17:15:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 17:15:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 17:15:44 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 17:15:44 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 17:15:44 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 17:15:44 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 17:15:44 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 17:15:44 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 17:16:08 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:33:01  time: 0.4740  data_time: 0.0924  memory: 4358  loss: 2.1404  loss_rpn_cls: 0.6394  loss_rpn_bbox: 0.2584  loss_cls: 0.8793  acc: 81.7871  loss_bbox: 0.3633
2025/05/13 17:16:27 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:36  time: 0.3862  data_time: 0.0040  memory: 4358  loss: 1.9282  loss_rpn_cls: 0.3571  loss_rpn_bbox: 0.2265  loss_cls: 0.6689  acc: 77.9785  loss_bbox: 0.6757
2025/05/13 17:16:43 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:16:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:16:55 - mmengine - INFO - bbox_mAP_copypaste: 0.086 0.237 0.039 -1.000 0.029 0.094
2025/05/13 17:16:55 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0860  coco/bbox_mAP_50: 0.2370  coco/bbox_mAP_75: 0.0390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0290  coco/bbox_mAP_l: 0.0940  data_time: 0.1644  time: 0.2049
2025/05/13 17:16:55 - mmengine - INFO - The best checkpoint with 0.0860 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 17:17:15 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:27:30  time: 0.3867  data_time: 0.0072  memory: 4359  loss: 1.5953  loss_rpn_cls: 0.1708  loss_rpn_bbox: 0.2011  loss_cls: 0.5864  acc: 79.1992  loss_bbox: 0.6371
2025/05/13 17:17:34 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:44  time: 0.3776  data_time: 0.0041  memory: 4359  loss: 1.5148  loss_rpn_cls: 0.1422  loss_rpn_bbox: 0.1918  loss_cls: 0.5673  acc: 75.4736  loss_bbox: 0.6135
2025/05/13 17:17:49 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:17:51 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:17:52 - mmengine - INFO - bbox_mAP_copypaste: 0.115 0.224 0.104 -1.000 0.082 0.118
2025/05/13 17:17:52 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1150  coco/bbox_mAP_50: 0.2240  coco/bbox_mAP_75: 0.1040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0820  coco/bbox_mAP_l: 0.1180  data_time: 0.0015  time: 0.0377
2025/05/13 17:17:52 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 17:17:53 - mmengine - INFO - The best checkpoint with 0.1150 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 17:18:12 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:38  time: 0.3786  data_time: 0.0073  memory: 4359  loss: 1.3137  loss_rpn_cls: 0.0979  loss_rpn_bbox: 0.1662  loss_cls: 0.5131  acc: 79.2425  loss_bbox: 0.5365
2025/05/13 17:18:31 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:25:08  time: 0.3739  data_time: 0.0041  memory: 4359  loss: 1.2889  loss_rpn_cls: 0.0979  loss_rpn_bbox: 0.1621  loss_cls: 0.4937  acc: 81.0251  loss_bbox: 0.5352
2025/05/13 17:18:46 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:18:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:18:49 - mmengine - INFO - bbox_mAP_copypaste: 0.220 0.414 0.219 -1.000 0.183 0.234
2025/05/13 17:18:49 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2200  coco/bbox_mAP_50: 0.4140  coco/bbox_mAP_75: 0.2190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1830  coco/bbox_mAP_l: 0.2340  data_time: 0.0017  time: 0.0377
2025/05/13 17:18:49 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 17:18:50 - mmengine - INFO - The best checkpoint with 0.2200 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 17:19:09 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:24:19  time: 0.3771  data_time: 0.0072  memory: 4359  loss: 1.1881  loss_rpn_cls: 0.0855  loss_rpn_bbox: 0.1518  loss_cls: 0.4603  acc: 82.5050  loss_bbox: 0.4905
2025/05/13 17:19:28 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:55  time: 0.3750  data_time: 0.0040  memory: 4359  loss: 1.1732  loss_rpn_cls: 0.0889  loss_rpn_bbox: 0.1540  loss_cls: 0.4469  acc: 85.1074  loss_bbox: 0.4835
2025/05/13 17:19:43 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:19:45 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:19:46 - mmengine - INFO - bbox_mAP_copypaste: 0.314 0.557 0.334 -1.000 0.239 0.336
2025/05/13 17:19:46 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3140  coco/bbox_mAP_50: 0.5570  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2390  coco/bbox_mAP_l: 0.3360  data_time: 0.0016  time: 0.0373
2025/05/13 17:19:46 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 17:19:47 - mmengine - INFO - The best checkpoint with 0.3140 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 17:20:06 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:23:13  time: 0.3804  data_time: 0.0072  memory: 4359  loss: 1.0918  loss_rpn_cls: 0.0717  loss_rpn_bbox: 0.1454  loss_cls: 0.4233  acc: 84.0943  loss_bbox: 0.4513
2025/05/13 17:20:25 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:51  time: 0.3743  data_time: 0.0041  memory: 4359  loss: 1.0808  loss_rpn_cls: 0.0723  loss_rpn_bbox: 0.1441  loss_cls: 0.4123  acc: 83.7891  loss_bbox: 0.4521
2025/05/13 17:20:40 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:20:42 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:20:43 - mmengine - INFO - bbox_mAP_copypaste: 0.312 0.559 0.313 -1.000 0.198 0.344
2025/05/13 17:20:43 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3120  coco/bbox_mAP_50: 0.5590  coco/bbox_mAP_75: 0.3130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1980  coco/bbox_mAP_l: 0.3440  data_time: 0.0016  time: 0.0379
2025/05/13 17:21:02 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:22:12  time: 0.3745  data_time: 0.0072  memory: 4359  loss: 1.0511  loss_rpn_cls: 0.0678  loss_rpn_bbox: 0.1350  loss_cls: 0.3998  acc: 84.4727  loss_bbox: 0.4486
2025/05/13 17:21:21 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:52  time: 0.3831  data_time: 0.0042  memory: 4359  loss: 1.0315  loss_rpn_cls: 0.0711  loss_rpn_bbox: 0.1338  loss_cls: 0.3950  acc: 83.1427  loss_bbox: 0.4316
2025/05/13 17:21:37 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:21:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:21:40 - mmengine - INFO - bbox_mAP_copypaste: 0.340 0.595 0.362 -1.000 0.276 0.359
2025/05/13 17:21:40 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3400  coco/bbox_mAP_50: 0.5950  coco/bbox_mAP_75: 0.3620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2760  coco/bbox_mAP_l: 0.3590  data_time: 0.0016  time: 0.0382
2025/05/13 17:21:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/13 17:21:41 - mmengine - INFO - The best checkpoint with 0.3400 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/13 17:22:00 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:21:15  time: 0.3784  data_time: 0.0073  memory: 4359  loss: 0.9678  loss_rpn_cls: 0.0548  loss_rpn_bbox: 0.1233  loss_cls: 0.3702  acc: 84.5215  loss_bbox: 0.4194
2025/05/13 17:22:18 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:54  time: 0.3725  data_time: 0.0041  memory: 4358  loss: 0.9363  loss_rpn_cls: 0.0516  loss_rpn_bbox: 0.1233  loss_cls: 0.3499  acc: 89.5996  loss_bbox: 0.4115
2025/05/13 17:22:34 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:22:36 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:22:37 - mmengine - INFO - bbox_mAP_copypaste: 0.389 0.665 0.430 -1.000 0.276 0.415
2025/05/13 17:22:37 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3890  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.4300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2760  coco/bbox_mAP_l: 0.4150  data_time: 0.0015  time: 0.0369
2025/05/13 17:22:37 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/13 17:22:38 - mmengine - INFO - The best checkpoint with 0.3890 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/13 17:22:43 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:22:57 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:20:18  time: 0.3800  data_time: 0.0072  memory: 4359  loss: 0.9156  loss_rpn_cls: 0.0521  loss_rpn_bbox: 0.1228  loss_cls: 0.3388  acc: 83.5938  loss_bbox: 0.4019
2025/05/13 17:23:16 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:58  time: 0.3740  data_time: 0.0040  memory: 4358  loss: 0.8967  loss_rpn_cls: 0.0432  loss_rpn_bbox: 0.1195  loss_cls: 0.3376  acc: 87.8906  loss_bbox: 0.3964
2025/05/13 17:23:31 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:23:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:23:34 - mmengine - INFO - bbox_mAP_copypaste: 0.393 0.671 0.439 -1.000 0.268 0.423
2025/05/13 17:23:34 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3930  coco/bbox_mAP_50: 0.6710  coco/bbox_mAP_75: 0.4390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2680  coco/bbox_mAP_l: 0.4230  data_time: 0.0016  time: 0.0372
2025/05/13 17:23:34 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/13 17:23:35 - mmengine - INFO - The best checkpoint with 0.3930 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/13 17:23:54 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:19:23  time: 0.3873  data_time: 0.0072  memory: 4358  loss: 0.8064  loss_rpn_cls: 0.0359  loss_rpn_bbox: 0.1067  loss_cls: 0.2966  acc: 89.9414  loss_bbox: 0.3672
2025/05/13 17:24:13 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:19:04  time: 0.3758  data_time: 0.0041  memory: 4358  loss: 0.7807  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1019  loss_cls: 0.2844  acc: 87.6953  loss_bbox: 0.3570
2025/05/13 17:24:28 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:24:30 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:24:32 - mmengine - INFO - bbox_mAP_copypaste: 0.449 0.720 0.530 -1.000 0.276 0.481
2025/05/13 17:24:32 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4490  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.5300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2760  coco/bbox_mAP_l: 0.4810  data_time: 0.0015  time: 0.0365
2025/05/13 17:24:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/13 17:24:32 - mmengine - INFO - The best checkpoint with 0.4490 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/13 17:24:52 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:18:29  time: 0.3857  data_time: 0.0072  memory: 4358  loss: 0.7521  loss_rpn_cls: 0.0320  loss_rpn_bbox: 0.0998  loss_cls: 0.2701  acc: 89.8926  loss_bbox: 0.3502
2025/05/13 17:25:10 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:18:09  time: 0.3747  data_time: 0.0041  memory: 4358  loss: 0.7657  loss_rpn_cls: 0.0299  loss_rpn_bbox: 0.1004  loss_cls: 0.2810  acc: 88.3301  loss_bbox: 0.3545
2025/05/13 17:25:26 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:25:28 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:25:29 - mmengine - INFO - bbox_mAP_copypaste: 0.430 0.689 0.511 -1.000 0.289 0.459
2025/05/13 17:25:29 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4300  coco/bbox_mAP_50: 0.6890  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2890  coco/bbox_mAP_l: 0.4590  data_time: 0.0016  time: 0.0365
2025/05/13 17:25:48 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:34  time: 0.3808  data_time: 0.0071  memory: 4358  loss: 0.7618  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.0996  loss_cls: 0.2777  acc: 90.4785  loss_bbox: 0.3530
2025/05/13 17:26:07 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:17:15  time: 0.3775  data_time: 0.0042  memory: 4358  loss: 0.7469  loss_rpn_cls: 0.0310  loss_rpn_bbox: 0.0972  loss_cls: 0.2722  acc: 89.8926  loss_bbox: 0.3465
2025/05/13 17:26:22 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:26:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:26:26 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.696 0.518 -1.000 0.291 0.466
2025/05/13 17:26:26 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.6960  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4660  data_time: 0.0015  time: 0.0365
2025/05/13 17:26:44 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:39  time: 0.3771  data_time: 0.0074  memory: 4358  loss: 0.7224  loss_rpn_cls: 0.0262  loss_rpn_bbox: 0.0948  loss_cls: 0.2617  acc: 87.9395  loss_bbox: 0.3398
2025/05/13 17:27:03 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:16:20  time: 0.3816  data_time: 0.0041  memory: 4358  loss: 0.7401  loss_rpn_cls: 0.0306  loss_rpn_bbox: 0.0976  loss_cls: 0.2671  acc: 88.9648  loss_bbox: 0.3448
2025/05/13 17:27:19 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:27:21 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:27:22 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.702 0.526 -1.000 0.302 0.472
2025/05/13 17:27:22 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7020  coco/bbox_mAP_75: 0.5260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4720  data_time: 0.0016  time: 0.0363
2025/05/13 17:27:41 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:45  time: 0.3800  data_time: 0.0072  memory: 4358  loss: 0.7230  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0953  loss_cls: 0.2600  acc: 88.7695  loss_bbox: 0.3407
2025/05/13 17:28:00 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:26  time: 0.3804  data_time: 0.0041  memory: 4358  loss: 0.7381  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0975  loss_cls: 0.2695  acc: 89.3066  loss_bbox: 0.3421
2025/05/13 17:28:15 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:28:17 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:28:19 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.703 0.526 -1.000 0.291 0.474
2025/05/13 17:28:19 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7030  coco/bbox_mAP_75: 0.5260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4740  data_time: 0.0015  time: 0.0366
2025/05/13 17:28:37 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:51  time: 0.3772  data_time: 0.0071  memory: 4358  loss: 0.7297  loss_rpn_cls: 0.0276  loss_rpn_bbox: 0.0966  loss_cls: 0.2637  acc: 87.0605  loss_bbox: 0.3418
2025/05/13 17:28:57 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:32  time: 0.3804  data_time: 0.0043  memory: 4358  loss: 0.7340  loss_rpn_cls: 0.0295  loss_rpn_bbox: 0.0956  loss_cls: 0.2679  acc: 91.6504  loss_bbox: 0.3411
2025/05/13 17:29:12 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:29:14 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:29:15 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.702 0.528 -1.000 0.301 0.473
2025/05/13 17:29:15 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7020  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4730  data_time: 0.0016  time: 0.0365
2025/05/13 17:29:25 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:29:34 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:57  time: 0.3776  data_time: 0.0072  memory: 4358  loss: 0.7236  loss_rpn_cls: 0.0265  loss_rpn_bbox: 0.0957  loss_cls: 0.2607  acc: 91.0645  loss_bbox: 0.3408
2025/05/13 17:29:53 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:38  time: 0.3735  data_time: 0.0043  memory: 4358  loss: 0.7161  loss_rpn_cls: 0.0276  loss_rpn_bbox: 0.0954  loss_cls: 0.2570  acc: 91.4062  loss_bbox: 0.3361
2025/05/13 17:30:08 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:30:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:30:12 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.701 0.522 -1.000 0.287 0.473
2025/05/13 17:30:12 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.7010  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2870  coco/bbox_mAP_l: 0.4730  data_time: 0.0016  time: 0.0364
2025/05/13 17:30:31 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:13:04  time: 0.3813  data_time: 0.0072  memory: 4358  loss: 0.7242  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0968  loss_cls: 0.2613  acc: 88.2812  loss_bbox: 0.3386
2025/05/13 17:30:50 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:45  time: 0.3768  data_time: 0.0041  memory: 4358  loss: 0.7301  loss_rpn_cls: 0.0306  loss_rpn_bbox: 0.0955  loss_cls: 0.2650  acc: 90.0391  loss_bbox: 0.3390
2025/05/13 17:31:05 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:31:07 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:31:08 - mmengine - INFO - bbox_mAP_copypaste: 0.436 0.696 0.517 -1.000 0.300 0.466
2025/05/13 17:31:08 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4360  coco/bbox_mAP_50: 0.6960  coco/bbox_mAP_75: 0.5170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4660  data_time: 0.0015  time: 0.0374
2025/05/13 17:31:27 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:12:10  time: 0.3774  data_time: 0.0072  memory: 4358  loss: 0.7334  loss_rpn_cls: 0.0279  loss_rpn_bbox: 0.0966  loss_cls: 0.2698  acc: 87.2559  loss_bbox: 0.3391
2025/05/13 17:31:46 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:51  time: 0.3775  data_time: 0.0043  memory: 4358  loss: 0.7206  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0963  loss_cls: 0.2600  acc: 91.8945  loss_bbox: 0.3372
2025/05/13 17:32:01 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:32:03 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:32:05 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.704 0.522 -1.000 0.297 0.470
2025/05/13 17:32:05 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0373
2025/05/13 17:32:23 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:16  time: 0.3791  data_time: 0.0073  memory: 4358  loss: 0.7181  loss_rpn_cls: 0.0260  loss_rpn_bbox: 0.0953  loss_cls: 0.2597  acc: 89.4531  loss_bbox: 0.3370
2025/05/13 17:32:42 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:57  time: 0.3756  data_time: 0.0041  memory: 4358  loss: 0.7281  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0961  loss_cls: 0.2643  acc: 89.5508  loss_bbox: 0.3399
2025/05/13 17:32:58 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:33:00 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:33:01 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.703 0.524 -1.000 0.289 0.473
2025/05/13 17:33:01 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.7030  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2890  coco/bbox_mAP_l: 0.4730  data_time: 0.0016  time: 0.0370
2025/05/13 17:33:20 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:22  time: 0.3821  data_time: 0.0073  memory: 4358  loss: 0.7086  loss_rpn_cls: 0.0248  loss_rpn_bbox: 0.0949  loss_cls: 0.2533  acc: 88.2812  loss_bbox: 0.3356
2025/05/13 17:33:39 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:10:03  time: 0.3741  data_time: 0.0040  memory: 4358  loss: 0.7294  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0954  loss_cls: 0.2665  acc: 92.1875  loss_bbox: 0.3394
2025/05/13 17:33:54 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:33:56 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:33:58 - mmengine - INFO - bbox_mAP_copypaste: 0.439 0.700 0.518 -1.000 0.299 0.470
2025/05/13 17:33:58 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4390  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0367
2025/05/13 17:34:17 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:29  time: 0.3804  data_time: 0.0073  memory: 4358  loss: 0.6975  loss_rpn_cls: 0.0230  loss_rpn_bbox: 0.0941  loss_cls: 0.2492  acc: 91.5527  loss_bbox: 0.3312
2025/05/13 17:34:35 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:09:10  time: 0.3785  data_time: 0.0041  memory: 4358  loss: 0.7320  loss_rpn_cls: 0.0292  loss_rpn_bbox: 0.0965  loss_cls: 0.2653  acc: 92.4805  loss_bbox: 0.3411
2025/05/13 17:34:51 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:34:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:34:54 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.697 0.518 -1.000 0.297 0.469
2025/05/13 17:34:54 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6970  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4690  data_time: 0.0016  time: 0.0365
2025/05/13 17:35:13 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:35  time: 0.3813  data_time: 0.0071  memory: 4358  loss: 0.7274  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0960  loss_cls: 0.2672  acc: 90.0879  loss_bbox: 0.3364
2025/05/13 17:35:32 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:16  time: 0.3789  data_time: 0.0043  memory: 4358  loss: 0.7163  loss_rpn_cls: 0.0263  loss_rpn_bbox: 0.0953  loss_cls: 0.2595  acc: 93.2617  loss_bbox: 0.3352
2025/05/13 17:35:48 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:35:49 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:35:51 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.703 0.525 -1.000 0.300 0.471
2025/05/13 17:35:51 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7030  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4710  data_time: 0.0016  time: 0.0364
2025/05/13 17:36:05 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:36:10 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:42  time: 0.3785  data_time: 0.0072  memory: 4358  loss: 0.7091  loss_rpn_cls: 0.0261  loss_rpn_bbox: 0.0949  loss_cls: 0.2559  acc: 91.2109  loss_bbox: 0.3322
2025/05/13 17:36:29 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:23  time: 0.3800  data_time: 0.0041  memory: 4358  loss: 0.7277  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0960  loss_cls: 0.2659  acc: 90.8203  loss_bbox: 0.3368
2025/05/13 17:36:44 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:36:46 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:36:47 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.700 0.519 -1.000 0.298 0.471
2025/05/13 17:36:47 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.5190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4710  data_time: 0.0015  time: 0.0364
2025/05/13 17:37:06 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:48  time: 0.3799  data_time: 0.0071  memory: 4358  loss: 0.7133  loss_rpn_cls: 0.0260  loss_rpn_bbox: 0.0942  loss_cls: 0.2582  acc: 89.6484  loss_bbox: 0.3349
2025/05/13 17:37:25 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:29  time: 0.3808  data_time: 0.0041  memory: 4358  loss: 0.7236  loss_rpn_cls: 0.0256  loss_rpn_bbox: 0.0960  loss_cls: 0.2632  acc: 89.9902  loss_bbox: 0.3389
2025/05/13 17:37:41 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:37:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:37:44 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.704 0.526 -1.000 0.299 0.473
2025/05/13 17:37:44 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4730  data_time: 0.0016  time: 0.0365
2025/05/13 17:38:03 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:55  time: 0.3814  data_time: 0.0071  memory: 4358  loss: 0.7182  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0959  loss_cls: 0.2611  acc: 91.0645  loss_bbox: 0.3342
2025/05/13 17:38:22 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:36  time: 0.3782  data_time: 0.0041  memory: 4358  loss: 0.7103  loss_rpn_cls: 0.0249  loss_rpn_bbox: 0.0941  loss_cls: 0.2581  acc: 88.3301  loss_bbox: 0.3332
2025/05/13 17:38:37 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:38:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:38:41 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.704 0.521 -1.000 0.298 0.471
2025/05/13 17:38:41 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4710  data_time: 0.0015  time: 0.0364
2025/05/13 17:39:00 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:05:01  time: 0.3796  data_time: 0.0071  memory: 4358  loss: 0.7119  loss_rpn_cls: 0.0250  loss_rpn_bbox: 0.0955  loss_cls: 0.2553  acc: 86.9141  loss_bbox: 0.3361
2025/05/13 17:39:19 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:42  time: 0.3801  data_time: 0.0041  memory: 4358  loss: 0.7241  loss_rpn_cls: 0.0283  loss_rpn_bbox: 0.0962  loss_cls: 0.2622  acc: 90.5273  loss_bbox: 0.3375
2025/05/13 17:39:34 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:39:36 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:39:37 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.706 0.524 -1.000 0.298 0.472
2025/05/13 17:39:37 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7060  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4720  data_time: 0.0017  time: 0.0367
2025/05/13 17:39:57 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:08  time: 0.3811  data_time: 0.0072  memory: 4358  loss: 0.7037  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0961  loss_cls: 0.2474  acc: 90.8691  loss_bbox: 0.3324
2025/05/13 17:40:15 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:49  time: 0.3762  data_time: 0.0040  memory: 4358  loss: 0.7197  loss_rpn_cls: 0.0258  loss_rpn_bbox: 0.0945  loss_cls: 0.2621  acc: 90.7715  loss_bbox: 0.3373
2025/05/13 17:40:31 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:40:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:40:34 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.707 0.529 -1.000 0.301 0.472
2025/05/13 17:40:34 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7070  coco/bbox_mAP_75: 0.5290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4720  data_time: 0.0016  time: 0.0378
2025/05/13 17:40:53 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:14  time: 0.3795  data_time: 0.0071  memory: 4358  loss: 0.7135  loss_rpn_cls: 0.0248  loss_rpn_bbox: 0.0950  loss_cls: 0.2608  acc: 87.5488  loss_bbox: 0.3330
2025/05/13 17:41:12 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:55  time: 0.3775  data_time: 0.0043  memory: 4358  loss: 0.7111  loss_rpn_cls: 0.0257  loss_rpn_bbox: 0.0946  loss_cls: 0.2577  acc: 89.2578  loss_bbox: 0.3331
2025/05/13 17:41:28 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:41:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:41:31 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.704 0.527 -1.000 0.300 0.472
2025/05/13 17:41:31 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4720  data_time: 0.0017  time: 0.0367
2025/05/13 17:41:50 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:21  time: 0.3794  data_time: 0.0071  memory: 4358  loss: 0.7019  loss_rpn_cls: 0.0255  loss_rpn_bbox: 0.0933  loss_cls: 0.2534  acc: 90.6250  loss_bbox: 0.3297
2025/05/13 17:42:09 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:02  time: 0.3797  data_time: 0.0041  memory: 4358  loss: 0.7244  loss_rpn_cls: 0.0288  loss_rpn_bbox: 0.0958  loss_cls: 0.2635  acc: 88.6230  loss_bbox: 0.3363
2025/05/13 17:42:24 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:42:26 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:42:27 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.700 0.512 -1.000 0.298 0.468
2025/05/13 17:42:27 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.5120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4680  data_time: 0.0016  time: 0.0367
2025/05/13 17:42:46 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:27  time: 0.3823  data_time: 0.0075  memory: 4358  loss: 0.7126  loss_rpn_cls: 0.0268  loss_rpn_bbox: 0.0939  loss_cls: 0.2567  acc: 88.4766  loss_bbox: 0.3353
2025/05/13 17:42:47 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:43:05 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:09  time: 0.3792  data_time: 0.0041  memory: 4358  loss: 0.7083  loss_rpn_cls: 0.0267  loss_rpn_bbox: 0.0955  loss_cls: 0.2540  acc: 90.1367  loss_bbox: 0.3320
2025/05/13 17:43:21 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:43:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:43:24 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.708 0.527 -1.000 0.302 0.473
2025/05/13 17:43:24 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7080  coco/bbox_mAP_75: 0.5270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4730  data_time: 0.0014  time: 0.0363
2025/05/13 17:43:43 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3852  data_time: 0.0072  memory: 4358  loss: 0.7028  loss_rpn_cls: 0.0269  loss_rpn_bbox: 0.0960  loss_cls: 0.2498  acc: 92.5781  loss_bbox: 0.3301
2025/05/13 17:44:02 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3791  data_time: 0.0040  memory: 4358  loss: 0.7264  loss_rpn_cls: 0.0284  loss_rpn_bbox: 0.0955  loss_cls: 0.2631  acc: 88.7695  loss_bbox: 0.3395
2025/05/13 17:44:18 - mmengine - INFO - Exp name: fasterrcnn_fs_pmd_20250513_171538
2025/05/13 17:44:18 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 17:44:21 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:44:22 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.709 0.528 -1.000 0.298 0.474
2025/05/13 17:44:22 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7090  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4740  data_time: 0.0014  time: 0.0362
