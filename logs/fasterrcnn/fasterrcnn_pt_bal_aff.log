2025/05/13 20:57:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 714128800
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 714128800
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 20:57:48 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='RandomAffine'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 20:57:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 20:57:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 20:57:50 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 20:57:50 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 20:57:50 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 20:57:50 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 20:57:50 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 20:57:50 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 20:57:50 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 20:58:13 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:31:49  time: 0.4569  data_time: 0.0912  memory: 4357  loss: 2.3893  loss_rpn_cls: 0.6002  loss_rpn_bbox: 0.2023  loss_cls: 0.9109  acc: 79.2969  loss_bbox: 0.6758
2025/05/13 20:58:30 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:27:41  time: 0.3479  data_time: 0.0026  memory: 4357  loss: 1.4423  loss_rpn_cls: 0.1064  loss_rpn_bbox: 0.1649  loss_cls: 0.5917  acc: 80.6641  loss_bbox: 0.5792
2025/05/13 20:58:45 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 20:58:55 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:58:57 - mmengine - INFO - bbox_mAP_copypaste: 0.119 0.216 0.119 -1.000 0.057 0.130
2025/05/13 20:58:57 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1190  coco/bbox_mAP_50: 0.2160  coco/bbox_mAP_75: 0.1190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0570  coco/bbox_mAP_l: 0.1300  data_time: 0.1727  time: 0.2140
2025/05/13 20:58:57 - mmengine - INFO - The best checkpoint with 0.1190 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 20:59:16 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:25:40  time: 0.3638  data_time: 0.0051  memory: 4357  loss: 1.1585  loss_rpn_cls: 0.0835  loss_rpn_bbox: 0.1517  loss_cls: 0.4556  acc: 86.5234  loss_bbox: 0.4677
2025/05/13 20:59:33 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:24:56  time: 0.3514  data_time: 0.0025  memory: 4357  loss: 1.1214  loss_rpn_cls: 0.0742  loss_rpn_bbox: 0.1467  loss_cls: 0.4393  acc: 85.0098  loss_bbox: 0.4612
2025/05/13 20:59:48 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 20:59:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 20:59:51 - mmengine - INFO - bbox_mAP_copypaste: 0.260 0.517 0.228 -1.000 0.183 0.285
2025/05/13 20:59:51 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2600  coco/bbox_mAP_50: 0.5170  coco/bbox_mAP_75: 0.2280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1830  coco/bbox_mAP_l: 0.2850  data_time: 0.0018  time: 0.0380
2025/05/13 20:59:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 20:59:52 - mmengine - INFO - The best checkpoint with 0.2600 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 21:00:10 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:05  time: 0.3605  data_time: 0.0054  memory: 4357  loss: 1.0806  loss_rpn_cls: 0.0689  loss_rpn_bbox: 0.1547  loss_cls: 0.4004  acc: 82.6172  loss_bbox: 0.4566
2025/05/13 21:00:28 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:23:40  time: 0.3576  data_time: 0.0026  memory: 4357  loss: 1.0634  loss_rpn_cls: 0.0720  loss_rpn_bbox: 0.1454  loss_cls: 0.3977  acc: 84.4727  loss_bbox: 0.4482
2025/05/13 21:00:42 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:00:44 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:00:46 - mmengine - INFO - bbox_mAP_copypaste: 0.295 0.599 0.237 -1.000 0.160 0.315
2025/05/13 21:00:46 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2950  coco/bbox_mAP_50: 0.5990  coco/bbox_mAP_75: 0.2370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1600  coco/bbox_mAP_l: 0.3150  data_time: 0.0017  time: 0.0397
2025/05/13 21:00:46 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 21:00:47 - mmengine - INFO - The best checkpoint with 0.2950 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 21:01:05 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:22:59  time: 0.3628  data_time: 0.0052  memory: 4357  loss: 1.1013  loss_rpn_cls: 0.0697  loss_rpn_bbox: 0.1536  loss_cls: 0.4306  acc: 89.1602  loss_bbox: 0.4474
2025/05/13 21:01:23 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:22:36  time: 0.3561  data_time: 0.0026  memory: 4357  loss: 1.0705  loss_rpn_cls: 0.0697  loss_rpn_bbox: 0.1486  loss_cls: 0.3995  acc: 89.6484  loss_bbox: 0.4528
2025/05/13 21:01:37 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:01:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:01:41 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.632 0.360 -1.000 0.183 0.381
2025/05/13 21:01:41 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6320  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1830  coco/bbox_mAP_l: 0.3810  data_time: 0.0016  time: 0.0383
2025/05/13 21:01:41 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 21:01:41 - mmengine - INFO - The best checkpoint with 0.3490 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 21:02:00 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:21:59  time: 0.3646  data_time: 0.0053  memory: 4357  loss: 1.0201  loss_rpn_cls: 0.0612  loss_rpn_bbox: 0.1485  loss_cls: 0.3699  acc: 85.1562  loss_bbox: 0.4405
2025/05/13 21:02:17 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:21:39  time: 0.3567  data_time: 0.0027  memory: 4357  loss: 1.0200  loss_rpn_cls: 0.0631  loss_rpn_bbox: 0.1513  loss_cls: 0.3772  acc: 84.8145  loss_bbox: 0.4284
2025/05/13 21:02:32 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:02:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:02:35 - mmengine - INFO - bbox_mAP_copypaste: 0.389 0.669 0.428 -1.000 0.239 0.415
2025/05/13 21:02:35 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3890  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.4280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2390  coco/bbox_mAP_l: 0.4150  data_time: 0.0017  time: 0.0376
2025/05/13 21:02:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/13 21:02:36 - mmengine - INFO - The best checkpoint with 0.3890 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/13 21:02:54 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:02  time: 0.3590  data_time: 0.0050  memory: 4357  loss: 0.9863  loss_rpn_cls: 0.0617  loss_rpn_bbox: 0.1409  loss_cls: 0.3628  acc: 84.4335  loss_bbox: 0.4209
2025/05/13 21:03:12 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:20:42  time: 0.3551  data_time: 0.0023  memory: 4357  loss: 0.9577  loss_rpn_cls: 0.0539  loss_rpn_bbox: 0.1373  loss_cls: 0.3434  acc: 88.0859  loss_bbox: 0.4231
2025/05/13 21:03:26 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:03:28 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:03:29 - mmengine - INFO - bbox_mAP_copypaste: 0.340 0.673 0.285 -1.000 0.199 0.366
2025/05/13 21:03:29 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3400  coco/bbox_mAP_50: 0.6730  coco/bbox_mAP_75: 0.2850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.3660  data_time: 0.0015  time: 0.0379
2025/05/13 21:03:47 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:04  time: 0.3527  data_time: 0.0051  memory: 4357  loss: 0.9603  loss_rpn_cls: 0.0539  loss_rpn_bbox: 0.1448  loss_cls: 0.3428  acc: 85.6445  loss_bbox: 0.4187
2025/05/13 21:04:04 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:19:45  time: 0.3515  data_time: 0.0023  memory: 4357  loss: 0.9614  loss_rpn_cls: 0.0558  loss_rpn_bbox: 0.1340  loss_cls: 0.3556  acc: 87.5000  loss_bbox: 0.4160
2025/05/13 21:04:19 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:04:21 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:04:22 - mmengine - INFO - bbox_mAP_copypaste: 0.367 0.682 0.355 -1.000 0.210 0.395
2025/05/13 21:04:22 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3670  coco/bbox_mAP_50: 0.6820  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3950  data_time: 0.0015  time: 0.0376
2025/05/13 21:04:27 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:04:40 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:09  time: 0.3541  data_time: 0.0051  memory: 4357  loss: 0.9171  loss_rpn_cls: 0.0501  loss_rpn_bbox: 0.1300  loss_cls: 0.3283  acc: 87.3950  loss_bbox: 0.4088
2025/05/13 21:04:58 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:18:51  time: 0.3548  data_time: 0.0022  memory: 4357  loss: 0.9386  loss_rpn_cls: 0.0516  loss_rpn_bbox: 0.1320  loss_cls: 0.3489  acc: 89.4531  loss_bbox: 0.4061
2025/05/13 21:05:12 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:05:14 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:05:15 - mmengine - INFO - bbox_mAP_copypaste: 0.335 0.632 0.323 -1.000 0.213 0.356
2025/05/13 21:05:15 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3350  coco/bbox_mAP_50: 0.6320  coco/bbox_mAP_75: 0.3230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3560  data_time: 0.0015  time: 0.0375
2025/05/13 21:05:33 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:17  time: 0.3580  data_time: 0.0049  memory: 4357  loss: 0.8677  loss_rpn_cls: 0.0490  loss_rpn_bbox: 0.1226  loss_cls: 0.3083  acc: 91.2598  loss_bbox: 0.3877
2025/05/13 21:05:51 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:17:59  time: 0.3554  data_time: 0.0023  memory: 4357  loss: 0.8489  loss_rpn_cls: 0.0415  loss_rpn_bbox: 0.1170  loss_cls: 0.3058  acc: 83.9844  loss_bbox: 0.3845
2025/05/13 21:06:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:06:08 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:06:09 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.674 0.343 -1.000 0.214 0.389
2025/05/13 21:06:09 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6740  coco/bbox_mAP_75: 0.3430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3890  data_time: 0.0017  time: 0.0374
2025/05/13 21:06:27 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:25  time: 0.3566  data_time: 0.0049  memory: 4357  loss: 0.8321  loss_rpn_cls: 0.0426  loss_rpn_bbox: 0.1157  loss_cls: 0.2993  acc: 88.0371  loss_bbox: 0.3745
2025/05/13 21:06:45 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:07  time: 0.3568  data_time: 0.0023  memory: 4357  loss: 0.8418  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.1184  loss_cls: 0.3044  acc: 88.9648  loss_bbox: 0.3778
2025/05/13 21:06:59 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:07:01 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:07:02 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.668 0.344 -1.000 0.214 0.386
2025/05/13 21:07:02 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3860  data_time: 0.0016  time: 0.0381
2025/05/13 21:07:20 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:33  time: 0.3562  data_time: 0.0050  memory: 4357  loss: 0.8145  loss_rpn_cls: 0.0386  loss_rpn_bbox: 0.1115  loss_cls: 0.2939  acc: 88.1836  loss_bbox: 0.3705
2025/05/13 21:07:38 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:15  time: 0.3559  data_time: 0.0023  memory: 4357  loss: 0.8335  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.1136  loss_cls: 0.3000  acc: 88.6719  loss_bbox: 0.3806
2025/05/13 21:07:53 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:07:55 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:07:56 - mmengine - INFO - bbox_mAP_copypaste: 0.346 0.657 0.324 -1.000 0.205 0.375
2025/05/13 21:07:56 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3460  coco/bbox_mAP_50: 0.6570  coco/bbox_mAP_75: 0.3240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3750  data_time: 0.0016  time: 0.0375
2025/05/13 21:08:14 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:15:42  time: 0.3611  data_time: 0.0050  memory: 4357  loss: 0.8287  loss_rpn_cls: 0.0407  loss_rpn_bbox: 0.1121  loss_cls: 0.2992  acc: 86.5723  loss_bbox: 0.3767
2025/05/13 21:08:32 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:24  time: 0.3542  data_time: 0.0023  memory: 4357  loss: 0.8324  loss_rpn_cls: 0.0384  loss_rpn_bbox: 0.1141  loss_cls: 0.3002  acc: 89.5996  loss_bbox: 0.3798
2025/05/13 21:08:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:08:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:08:49 - mmengine - INFO - bbox_mAP_copypaste: 0.352 0.661 0.337 -1.000 0.204 0.380
2025/05/13 21:08:49 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3520  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3800  data_time: 0.0017  time: 0.0373
2025/05/13 21:09:08 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:14:52  time: 0.3627  data_time: 0.0051  memory: 4357  loss: 0.8229  loss_rpn_cls: 0.0437  loss_rpn_bbox: 0.1117  loss_cls: 0.2960  acc: 90.9668  loss_bbox: 0.3716
2025/05/13 21:09:25 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:33  time: 0.3555  data_time: 0.0023  memory: 4357  loss: 0.8127  loss_rpn_cls: 0.0383  loss_rpn_bbox: 0.1125  loss_cls: 0.2898  acc: 88.8184  loss_bbox: 0.3721
2025/05/13 21:09:40 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:09:42 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:09:43 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.665 0.359 -1.000 0.213 0.389
2025/05/13 21:09:43 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3890  data_time: 0.0017  time: 0.0378
2025/05/13 21:10:01 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:00  time: 0.3566  data_time: 0.0049  memory: 4357  loss: 0.8111  loss_rpn_cls: 0.0382  loss_rpn_bbox: 0.1090  loss_cls: 0.2967  acc: 88.2324  loss_bbox: 0.3672
2025/05/13 21:10:19 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:13:43  time: 0.3604  data_time: 0.0024  memory: 4357  loss: 0.8228  loss_rpn_cls: 0.0442  loss_rpn_bbox: 0.1132  loss_cls: 0.2905  acc: 91.0645  loss_bbox: 0.3749
2025/05/13 21:10:34 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:10:35 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:10:37 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.666 0.340 -1.000 0.212 0.381
2025/05/13 21:10:37 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6660  coco/bbox_mAP_75: 0.3400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3810  data_time: 0.0015  time: 0.0373
2025/05/13 21:10:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:10:55 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:10  time: 0.3577  data_time: 0.0051  memory: 4357  loss: 0.8085  loss_rpn_cls: 0.0407  loss_rpn_bbox: 0.1110  loss_cls: 0.2901  acc: 87.8418  loss_bbox: 0.3667
2025/05/13 21:11:12 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:12:52  time: 0.3536  data_time: 0.0024  memory: 4357  loss: 0.8194  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1127  loss_cls: 0.2971  acc: 89.0137  loss_bbox: 0.3721
2025/05/13 21:11:27 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:11:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:11:30 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.664 0.356 -1.000 0.217 0.387
2025/05/13 21:11:30 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3870  data_time: 0.0015  time: 0.0375
2025/05/13 21:11:48 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:19  time: 0.3608  data_time: 0.0050  memory: 4357  loss: 0.8027  loss_rpn_cls: 0.0398  loss_rpn_bbox: 0.1079  loss_cls: 0.2906  acc: 88.8184  loss_bbox: 0.3645
2025/05/13 21:12:06 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:01  time: 0.3541  data_time: 0.0024  memory: 4357  loss: 0.8176  loss_rpn_cls: 0.0395  loss_rpn_bbox: 0.1102  loss_cls: 0.2930  acc: 91.1133  loss_bbox: 0.3749
2025/05/13 21:12:21 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:12:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:12:24 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.669 0.360 -1.000 0.219 0.389
2025/05/13 21:12:24 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3890  data_time: 0.0015  time: 0.0387
2025/05/13 21:12:42 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:28  time: 0.3585  data_time: 0.0051  memory: 4357  loss: 0.8047  loss_rpn_cls: 0.0362  loss_rpn_bbox: 0.1113  loss_cls: 0.2932  acc: 87.2070  loss_bbox: 0.3640
2025/05/13 21:13:00 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:10  time: 0.3540  data_time: 0.0023  memory: 4357  loss: 0.8039  loss_rpn_cls: 0.0365  loss_rpn_bbox: 0.1090  loss_cls: 0.2904  acc: 87.0605  loss_bbox: 0.3680
2025/05/13 21:13:14 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:13:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:13:18 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.661 0.360 -1.000 0.214 0.387
2025/05/13 21:13:18 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3870  data_time: 0.0017  time: 0.0376
2025/05/13 21:13:36 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:38  time: 0.3608  data_time: 0.0049  memory: 4357  loss: 0.8035  loss_rpn_cls: 0.0400  loss_rpn_bbox: 0.1122  loss_cls: 0.2834  acc: 88.5254  loss_bbox: 0.3678
2025/05/13 21:13:53 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:20  time: 0.3541  data_time: 0.0023  memory: 4357  loss: 0.8166  loss_rpn_cls: 0.0397  loss_rpn_bbox: 0.1102  loss_cls: 0.2953  acc: 88.7207  loss_bbox: 0.3714
2025/05/13 21:14:08 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:14:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:14:11 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.665 0.358 -1.000 0.220 0.388
2025/05/13 21:14:11 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2200  coco/bbox_mAP_l: 0.3880  data_time: 0.0015  time: 0.0375
2025/05/13 21:14:29 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:09:47  time: 0.3604  data_time: 0.0050  memory: 4357  loss: 0.8165  loss_rpn_cls: 0.0397  loss_rpn_bbox: 0.1113  loss_cls: 0.2959  acc: 88.4766  loss_bbox: 0.3696
2025/05/13 21:14:47 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:29  time: 0.3533  data_time: 0.0023  memory: 4357  loss: 0.8079  loss_rpn_cls: 0.0365  loss_rpn_bbox: 0.1122  loss_cls: 0.2880  acc: 88.7207  loss_bbox: 0.3712
2025/05/13 21:15:01 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:15:03 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:15:05 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.666 0.351 -1.000 0.211 0.384
2025/05/13 21:15:05 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6660  coco/bbox_mAP_75: 0.3510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3840  data_time: 0.0016  time: 0.0375
2025/05/13 21:15:23 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:08:56  time: 0.3585  data_time: 0.0050  memory: 4357  loss: 0.8177  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.1144  loss_cls: 0.2929  acc: 87.7930  loss_bbox: 0.3699
2025/05/13 21:15:41 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:39  time: 0.3576  data_time: 0.0024  memory: 4357  loss: 0.8213  loss_rpn_cls: 0.0400  loss_rpn_bbox: 0.1121  loss_cls: 0.2966  acc: 86.5234  loss_bbox: 0.3726
2025/05/13 21:15:55 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:15:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:15:58 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.660 0.338 -1.000 0.206 0.378
2025/05/13 21:15:58 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3780  data_time: 0.0016  time: 0.0376
2025/05/13 21:16:16 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:06  time: 0.3580  data_time: 0.0050  memory: 4357  loss: 0.8163  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.1115  loss_cls: 0.2942  acc: 87.5488  loss_bbox: 0.3695
2025/05/13 21:16:34 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:07:48  time: 0.3567  data_time: 0.0023  memory: 4357  loss: 0.8019  loss_rpn_cls: 0.0379  loss_rpn_bbox: 0.1098  loss_cls: 0.2891  acc: 88.3301  loss_bbox: 0.3651
2025/05/13 21:16:49 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:16:51 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:16:52 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.667 0.340 -1.000 0.213 0.381
2025/05/13 21:16:52 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6670  coco/bbox_mAP_75: 0.3400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3810  data_time: 0.0015  time: 0.0376
2025/05/13 21:17:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:17:10 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:15  time: 0.3557  data_time: 0.0049  memory: 4357  loss: 0.8061  loss_rpn_cls: 0.0396  loss_rpn_bbox: 0.1089  loss_cls: 0.2900  acc: 88.0371  loss_bbox: 0.3676
2025/05/13 21:17:28 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:06:57  time: 0.3558  data_time: 0.0024  memory: 4357  loss: 0.8221  loss_rpn_cls: 0.0398  loss_rpn_bbox: 0.1155  loss_cls: 0.2903  acc: 87.1094  loss_bbox: 0.3766
2025/05/13 21:17:42 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:17:44 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:17:46 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.665 0.351 -1.000 0.213 0.385
2025/05/13 21:17:46 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3850  data_time: 0.0015  time: 0.0378
2025/05/13 21:18:03 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:25  time: 0.3575  data_time: 0.0049  memory: 4357  loss: 0.7991  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.1120  loss_cls: 0.2846  acc: 87.7441  loss_bbox: 0.3631
2025/05/13 21:18:21 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:07  time: 0.3558  data_time: 0.0024  memory: 4357  loss: 0.8086  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1121  loss_cls: 0.2872  acc: 90.1367  loss_bbox: 0.3694
2025/05/13 21:18:36 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:18:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:18:39 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.671 0.355 -1.000 0.213 0.389
2025/05/13 21:18:39 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6710  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3890  data_time: 0.0017  time: 0.0375
2025/05/13 21:18:57 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:34  time: 0.3580  data_time: 0.0050  memory: 4357  loss: 0.8152  loss_rpn_cls: 0.0396  loss_rpn_bbox: 0.1117  loss_cls: 0.2947  acc: 89.9414  loss_bbox: 0.3691
2025/05/13 21:19:15 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:17  time: 0.3551  data_time: 0.0024  memory: 4357  loss: 0.8166  loss_rpn_cls: 0.0387  loss_rpn_bbox: 0.1126  loss_cls: 0.2929  acc: 90.4297  loss_bbox: 0.3724
2025/05/13 21:19:29 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:19:31 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:19:32 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.661 0.341 -1.000 0.211 0.379
2025/05/13 21:19:32 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3790  data_time: 0.0016  time: 0.0377
2025/05/13 21:19:51 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:44  time: 0.3616  data_time: 0.0049  memory: 4357  loss: 0.8011  loss_rpn_cls: 0.0386  loss_rpn_bbox: 0.1097  loss_cls: 0.2872  acc: 90.4785  loss_bbox: 0.3656
2025/05/13 21:20:08 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:26  time: 0.3567  data_time: 0.0025  memory: 4357  loss: 0.8172  loss_rpn_cls: 0.0391  loss_rpn_bbox: 0.1119  loss_cls: 0.2939  acc: 88.5254  loss_bbox: 0.3723
2025/05/13 21:20:23 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:20:25 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:20:26 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.665 0.354 -1.000 0.218 0.385
2025/05/13 21:20:26 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3850  data_time: 0.0016  time: 0.0373
2025/05/13 21:20:44 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:03:54  time: 0.3570  data_time: 0.0050  memory: 4357  loss: 0.8099  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.1113  loss_cls: 0.2880  acc: 90.4297  loss_bbox: 0.3712
2025/05/13 21:21:02 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:36  time: 0.3538  data_time: 0.0024  memory: 4357  loss: 0.8087  loss_rpn_cls: 0.0371  loss_rpn_bbox: 0.1127  loss_cls: 0.2855  acc: 87.8418  loss_bbox: 0.3733
2025/05/13 21:21:16 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:21:18 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:21:20 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.658 0.345 -1.000 0.207 0.379
2025/05/13 21:21:20 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3790  data_time: 0.0015  time: 0.0374
2025/05/13 21:21:37 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:03  time: 0.3569  data_time: 0.0049  memory: 4357  loss: 0.7990  loss_rpn_cls: 0.0346  loss_rpn_bbox: 0.1089  loss_cls: 0.2870  acc: 89.4043  loss_bbox: 0.3685
2025/05/13 21:21:55 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:45  time: 0.3577  data_time: 0.0024  memory: 4357  loss: 0.8262  loss_rpn_cls: 0.0423  loss_rpn_bbox: 0.1128  loss_cls: 0.2980  acc: 90.8691  loss_bbox: 0.3731
2025/05/13 21:22:10 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:22:12 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:22:13 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.670 0.357 -1.000 0.217 0.388
2025/05/13 21:22:13 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6700  coco/bbox_mAP_75: 0.3570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3880  data_time: 0.0015  time: 0.0374
2025/05/13 21:22:31 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:13  time: 0.3580  data_time: 0.0050  memory: 4357  loss: 0.8144  loss_rpn_cls: 0.0409  loss_rpn_bbox: 0.1112  loss_cls: 0.2927  acc: 87.4023  loss_bbox: 0.3696
2025/05/13 21:22:49 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:55  time: 0.3574  data_time: 0.0022  memory: 4357  loss: 0.8004  loss_rpn_cls: 0.0366  loss_rpn_bbox: 0.1120  loss_cls: 0.2839  acc: 87.0605  loss_bbox: 0.3680
2025/05/13 21:23:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:23:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:23:07 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.665 0.353 -1.000 0.210 0.384
2025/05/13 21:23:07 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3840  data_time: 0.0017  time: 0.0377
2025/05/13 21:23:25 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:22  time: 0.3600  data_time: 0.0050  memory: 4357  loss: 0.8177  loss_rpn_cls: 0.0392  loss_rpn_bbox: 0.1114  loss_cls: 0.2972  acc: 88.3789  loss_bbox: 0.3699
2025/05/13 21:23:26 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:23:43 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:05  time: 0.3546  data_time: 0.0024  memory: 4357  loss: 0.7996  loss_rpn_cls: 0.0382  loss_rpn_bbox: 0.1100  loss_cls: 0.2844  acc: 88.7695  loss_bbox: 0.3669
2025/05/13 21:23:57 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:23:59 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:24:01 - mmengine - INFO - bbox_mAP_copypaste: 0.363 0.665 0.365 -1.000 0.213 0.392
2025/05/13 21:24:01 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3630  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3650  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3920  data_time: 0.0015  time: 0.0375
2025/05/13 21:24:19 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:32  time: 0.3598  data_time: 0.0049  memory: 4357  loss: 0.8106  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.1117  loss_cls: 0.2925  acc: 87.3535  loss_bbox: 0.3659
2025/05/13 21:24:37 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:14  time: 0.3557  data_time: 0.0023  memory: 4357  loss: 0.7950  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1090  loss_cls: 0.2869  acc: 86.9629  loss_bbox: 0.3616
2025/05/13 21:24:51 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_aff_20250513_205744
2025/05/13 21:24:51 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 21:24:54 - mmengine - INFO - Evaluating bbox...
2025/05/13 21:24:56 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.668 0.349 -1.000 0.209 0.384
2025/05/13 21:24:56 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3840  data_time: 0.0014  time: 0.0379
