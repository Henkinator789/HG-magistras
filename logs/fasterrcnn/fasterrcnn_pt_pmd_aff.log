2025/05/13 21:59:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1606686990
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1606686990
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 21:59:41 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='PhotoMetricDistortion'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 21:59:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 21:59:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 21:59:43 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 21:59:43 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 21:59:43 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 21:59:43 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 21:59:43 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 21:59:43 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 21:59:43 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 22:00:07 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:40  time: 0.4691  data_time: 0.0935  memory: 4361  loss: 2.4384  loss_rpn_cls: 0.6078  loss_rpn_bbox: 0.1973  loss_cls: 0.9332  acc: 82.3242  loss_bbox: 0.7001
2025/05/13 22:00:25 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:34  time: 0.3611  data_time: 0.0041  memory: 4361  loss: 1.4095  loss_rpn_cls: 0.1086  loss_rpn_bbox: 0.1541  loss_cls: 0.5668  acc: 84.2773  loss_bbox: 0.5800
2025/05/13 22:00:40 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:00:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:00:51 - mmengine - INFO - bbox_mAP_copypaste: 0.142 0.309 0.099 -1.000 0.095 0.150
2025/05/13 22:00:51 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1420  coco/bbox_mAP_50: 0.3090  coco/bbox_mAP_75: 0.0990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0950  coco/bbox_mAP_l: 0.1500  data_time: 0.1656  time: 0.2053
2025/05/13 22:00:52 - mmengine - INFO - The best checkpoint with 0.1420 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 22:01:11 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:29  time: 0.3737  data_time: 0.0078  memory: 4361  loss: 1.1992  loss_rpn_cls: 0.0869  loss_rpn_bbox: 0.1530  loss_cls: 0.4804  acc: 82.8125  loss_bbox: 0.4789
2025/05/13 22:01:29 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:45  time: 0.3637  data_time: 0.0043  memory: 4362  loss: 1.1581  loss_rpn_cls: 0.0839  loss_rpn_bbox: 0.1545  loss_cls: 0.4532  acc: 81.3965  loss_bbox: 0.4666
2025/05/13 22:01:44 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:01:46 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:01:47 - mmengine - INFO - bbox_mAP_copypaste: 0.235 0.443 0.227 -1.000 0.150 0.254
2025/05/13 22:01:47 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2350  coco/bbox_mAP_50: 0.4430  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2540  data_time: 0.0015  time: 0.0376
2025/05/13 22:01:47 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 22:01:48 - mmengine - INFO - The best checkpoint with 0.2350 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 22:02:06 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:47  time: 0.3717  data_time: 0.0082  memory: 4361  loss: 1.1737  loss_rpn_cls: 0.0841  loss_rpn_bbox: 0.1574  loss_cls: 0.4721  acc: 85.8887  loss_bbox: 0.4601
2025/05/13 22:02:25 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:19  time: 0.3634  data_time: 0.0045  memory: 4361  loss: 1.1240  loss_rpn_cls: 0.0717  loss_rpn_bbox: 0.1450  loss_cls: 0.4531  acc: 82.4707  loss_bbox: 0.4543
2025/05/13 22:02:39 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:02:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:02:43 - mmengine - INFO - bbox_mAP_copypaste: 0.236 0.461 0.212 -1.000 0.168 0.252
2025/05/13 22:02:43 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2360  coco/bbox_mAP_50: 0.4610  coco/bbox_mAP_75: 0.2120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.2520  data_time: 0.0016  time: 0.0376
2025/05/13 22:02:43 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 22:02:44 - mmengine - INFO - The best checkpoint with 0.2360 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 22:03:02 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:36  time: 0.3719  data_time: 0.0075  memory: 4361  loss: 1.0972  loss_rpn_cls: 0.0688  loss_rpn_bbox: 0.1448  loss_cls: 0.4289  acc: 83.7891  loss_bbox: 0.4547
2025/05/13 22:03:20 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:12  time: 0.3636  data_time: 0.0044  memory: 4361  loss: 1.0917  loss_rpn_cls: 0.0766  loss_rpn_bbox: 0.1475  loss_cls: 0.4255  acc: 85.3027  loss_bbox: 0.4422
2025/05/13 22:03:35 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:03:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:03:39 - mmengine - INFO - bbox_mAP_copypaste: 0.224 0.465 0.179 -1.000 0.141 0.239
2025/05/13 22:03:39 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2240  coco/bbox_mAP_50: 0.4650  coco/bbox_mAP_75: 0.1790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1410  coco/bbox_mAP_l: 0.2390  data_time: 0.0016  time: 0.0376
2025/05/13 22:03:57 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:33  time: 0.3695  data_time: 0.0080  memory: 4362  loss: 1.0975  loss_rpn_cls: 0.0736  loss_rpn_bbox: 0.1538  loss_cls: 0.4289  acc: 89.3555  loss_bbox: 0.4412
2025/05/13 22:04:15 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:12  time: 0.3668  data_time: 0.0041  memory: 4362  loss: 1.0716  loss_rpn_cls: 0.0623  loss_rpn_bbox: 0.1480  loss_cls: 0.4223  acc: 85.3516  loss_bbox: 0.4390
2025/05/13 22:04:30 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:04:32 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:04:34 - mmengine - INFO - bbox_mAP_copypaste: 0.225 0.554 0.101 -1.000 0.130 0.247
2025/05/13 22:04:34 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2250  coco/bbox_mAP_50: 0.5540  coco/bbox_mAP_75: 0.1010  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1300  coco/bbox_mAP_l: 0.2470  data_time: 0.0016  time: 0.0374
2025/05/13 22:04:52 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:35  time: 0.3692  data_time: 0.0077  memory: 4361  loss: 1.0452  loss_rpn_cls: 0.0639  loss_rpn_bbox: 0.1427  loss_cls: 0.4044  acc: 86.5723  loss_bbox: 0.4342
2025/05/13 22:05:10 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:15  time: 0.3637  data_time: 0.0043  memory: 4362  loss: 1.0623  loss_rpn_cls: 0.0624  loss_rpn_bbox: 0.1489  loss_cls: 0.4117  acc: 86.7676  loss_bbox: 0.4393
2025/05/13 22:05:25 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:05:27 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:05:29 - mmengine - INFO - bbox_mAP_copypaste: 0.250 0.526 0.184 -1.000 0.135 0.273
2025/05/13 22:05:29 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2500  coco/bbox_mAP_50: 0.5260  coco/bbox_mAP_75: 0.1840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2730  data_time: 0.0017  time: 0.0380
2025/05/13 22:05:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 22:05:29 - mmengine - INFO - The best checkpoint with 0.2500 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/13 22:05:48 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:39  time: 0.3745  data_time: 0.0078  memory: 4361  loss: 1.0339  loss_rpn_cls: 0.0624  loss_rpn_bbox: 0.1488  loss_cls: 0.3924  acc: 85.9375  loss_bbox: 0.4302
2025/05/13 22:06:06 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:20  time: 0.3650  data_time: 0.0042  memory: 4361  loss: 1.0114  loss_rpn_cls: 0.0642  loss_rpn_bbox: 0.1348  loss_cls: 0.3877  acc: 86.8164  loss_bbox: 0.4247
2025/05/13 22:06:21 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:06:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:06:25 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.516 0.271 -1.000 0.195 0.294
2025/05/13 22:06:25 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5160  coco/bbox_mAP_75: 0.2710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1950  coco/bbox_mAP_l: 0.2940  data_time: 0.0016  time: 0.0375
2025/05/13 22:06:25 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/13 22:06:25 - mmengine - INFO - The best checkpoint with 0.2790 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/13 22:06:30 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:06:44 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:45  time: 0.3743  data_time: 0.0078  memory: 4361  loss: 0.9884  loss_rpn_cls: 0.0551  loss_rpn_bbox: 0.1331  loss_cls: 0.3786  acc: 89.1602  loss_bbox: 0.4215
2025/05/13 22:07:02 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:26  time: 0.3678  data_time: 0.0042  memory: 4361  loss: 0.9851  loss_rpn_cls: 0.0550  loss_rpn_bbox: 0.1426  loss_cls: 0.3654  acc: 85.2051  loss_bbox: 0.4221
2025/05/13 22:07:17 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:07:19 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:07:21 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.632 0.338 -1.000 0.246 0.371
2025/05/13 22:07:21 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6320  coco/bbox_mAP_75: 0.3380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2460  coco/bbox_mAP_l: 0.3710  data_time: 0.0015  time: 0.0373
2025/05/13 22:07:21 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/13 22:07:22 - mmengine - INFO - The best checkpoint with 0.3450 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/13 22:07:40 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:52  time: 0.3737  data_time: 0.0075  memory: 4362  loss: 0.9330  loss_rpn_cls: 0.0504  loss_rpn_bbox: 0.1239  loss_cls: 0.3552  acc: 85.6934  loss_bbox: 0.4035
2025/05/13 22:07:59 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:33  time: 0.3689  data_time: 0.0042  memory: 4361  loss: 0.8925  loss_rpn_cls: 0.0470  loss_rpn_bbox: 0.1193  loss_cls: 0.3360  acc: 85.6934  loss_bbox: 0.3900
2025/05/13 22:08:14 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:08:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:08:17 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.646 0.345 -1.000 0.227 0.377
2025/05/13 22:08:17 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2270  coco/bbox_mAP_l: 0.3770  data_time: 0.0016  time: 0.0374
2025/05/13 22:08:17 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/13 22:08:18 - mmengine - INFO - The best checkpoint with 0.3500 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/13 22:08:37 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:59  time: 0.3761  data_time: 0.0079  memory: 4361  loss: 0.8876  loss_rpn_cls: 0.0473  loss_rpn_bbox: 0.1202  loss_cls: 0.3308  acc: 87.1582  loss_bbox: 0.3893
2025/05/13 22:08:55 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:41  time: 0.3700  data_time: 0.0041  memory: 4361  loss: 0.8733  loss_rpn_cls: 0.0462  loss_rpn_bbox: 0.1145  loss_cls: 0.3267  acc: 87.4512  loss_bbox: 0.3859
2025/05/13 22:09:10 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:09:12 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:09:14 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.653 0.321 -1.000 0.228 0.367
2025/05/13 22:09:14 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2280  coco/bbox_mAP_l: 0.3670  data_time: 0.0015  time: 0.0374
2025/05/13 22:09:32 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:07  time: 0.3701  data_time: 0.0078  memory: 4361  loss: 0.8652  loss_rpn_cls: 0.0421  loss_rpn_bbox: 0.1172  loss_cls: 0.3200  acc: 88.2812  loss_bbox: 0.3859
2025/05/13 22:09:50 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:48  time: 0.3661  data_time: 0.0041  memory: 4361  loss: 0.8888  loss_rpn_cls: 0.0489  loss_rpn_bbox: 0.1186  loss_cls: 0.3313  acc: 88.9648  loss_bbox: 0.3900
2025/05/13 22:10:06 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:10:07 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:10:09 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.660 0.332 -1.000 0.222 0.381
2025/05/13 22:10:09 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3810  data_time: 0.0015  time: 0.0374
2025/05/13 22:10:09 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/13 22:10:10 - mmengine - INFO - The best checkpoint with 0.3530 coco/bbox_mAP at 11 epoch is saved to best_coco_bbox_mAP_epoch_11.pth.
2025/05/13 22:10:28 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:14  time: 0.3732  data_time: 0.0074  memory: 4361  loss: 0.8560  loss_rpn_cls: 0.0448  loss_rpn_bbox: 0.1145  loss_cls: 0.3150  acc: 87.6953  loss_bbox: 0.3817
2025/05/13 22:10:47 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:55  time: 0.3681  data_time: 0.0042  memory: 4361  loss: 0.8703  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.1170  loss_cls: 0.3267  acc: 86.3281  loss_bbox: 0.3822
2025/05/13 22:11:02 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:11:04 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:11:05 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.655 0.346 -1.000 0.212 0.384
2025/05/13 22:11:05 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0387
2025/05/13 22:11:05 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_11.pth is removed
2025/05/13 22:11:06 - mmengine - INFO - The best checkpoint with 0.3560 coco/bbox_mAP at 12 epoch is saved to best_coco_bbox_mAP_epoch_12.pth.
2025/05/13 22:11:25 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:22  time: 0.3772  data_time: 0.0079  memory: 4361  loss: 0.8610  loss_rpn_cls: 0.0448  loss_rpn_bbox: 0.1170  loss_cls: 0.3176  acc: 88.1348  loss_bbox: 0.3817
2025/05/13 22:11:43 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:03  time: 0.3674  data_time: 0.0042  memory: 4361  loss: 0.8592  loss_rpn_cls: 0.0452  loss_rpn_bbox: 0.1160  loss_cls: 0.3182  acc: 85.6934  loss_bbox: 0.3797
2025/05/13 22:11:58 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:12:00 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:12:01 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.654 0.365 -1.000 0.240 0.389
2025/05/13 22:12:01 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3650  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2400  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0375
2025/05/13 22:12:01 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_12.pth is removed
2025/05/13 22:12:02 - mmengine - INFO - The best checkpoint with 0.3610 coco/bbox_mAP at 13 epoch is saved to best_coco_bbox_mAP_epoch_13.pth.
2025/05/13 22:12:21 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:29  time: 0.3830  data_time: 0.0075  memory: 4361  loss: 0.8765  loss_rpn_cls: 0.0441  loss_rpn_bbox: 0.1188  loss_cls: 0.3304  acc: 87.3047  loss_bbox: 0.3832
2025/05/13 22:12:40 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:11  time: 0.3678  data_time: 0.0044  memory: 4361  loss: 0.8690  loss_rpn_cls: 0.0450  loss_rpn_bbox: 0.1187  loss_cls: 0.3203  acc: 86.9629  loss_bbox: 0.3850
2025/05/13 22:12:55 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:12:56 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:12:58 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.651 0.346 -1.000 0.232 0.381
2025/05/13 22:12:58 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2320  coco/bbox_mAP_l: 0.3810  data_time: 0.0015  time: 0.0372
2025/05/13 22:13:08 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:13:17 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:37  time: 0.3736  data_time: 0.0076  memory: 4361  loss: 0.8541  loss_rpn_cls: 0.0454  loss_rpn_bbox: 0.1154  loss_cls: 0.3179  acc: 89.5020  loss_bbox: 0.3755
2025/05/13 22:13:35 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:18  time: 0.3706  data_time: 0.0043  memory: 4361  loss: 0.8657  loss_rpn_cls: 0.0447  loss_rpn_bbox: 0.1177  loss_cls: 0.3206  acc: 89.0137  loss_bbox: 0.3828
2025/05/13 22:13:50 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:13:52 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:13:53 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.651 0.335 -1.000 0.228 0.377
2025/05/13 22:13:53 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2280  coco/bbox_mAP_l: 0.3770  data_time: 0.0014  time: 0.0373
2025/05/13 22:14:12 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:44  time: 0.3712  data_time: 0.0076  memory: 4361  loss: 0.8520  loss_rpn_cls: 0.0425  loss_rpn_bbox: 0.1153  loss_cls: 0.3176  acc: 88.5254  loss_bbox: 0.3766
2025/05/13 22:14:30 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:26  time: 0.3710  data_time: 0.0042  memory: 4361  loss: 0.8537  loss_rpn_cls: 0.0449  loss_rpn_bbox: 0.1150  loss_cls: 0.3174  acc: 88.0371  loss_bbox: 0.3763
2025/05/13 22:14:45 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:14:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:14:49 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.646 0.359 -1.000 0.218 0.383
2025/05/13 22:14:49 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3830  data_time: 0.0017  time: 0.0375
2025/05/13 22:15:08 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:52  time: 0.3751  data_time: 0.0077  memory: 4361  loss: 0.8567  loss_rpn_cls: 0.0422  loss_rpn_bbox: 0.1170  loss_cls: 0.3118  acc: 91.2598  loss_bbox: 0.3856
2025/05/13 22:15:26 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:34  time: 0.3679  data_time: 0.0041  memory: 4361  loss: 0.8606  loss_rpn_cls: 0.0458  loss_rpn_bbox: 0.1149  loss_cls: 0.3211  acc: 87.1582  loss_bbox: 0.3787
2025/05/13 22:15:41 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:15:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:15:44 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.649 0.369 -1.000 0.230 0.388
2025/05/13 22:15:44 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.3690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3880  data_time: 0.0017  time: 0.0374
2025/05/13 22:16:03 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:00  time: 0.3700  data_time: 0.0076  memory: 4361  loss: 0.8496  loss_rpn_cls: 0.0430  loss_rpn_bbox: 0.1120  loss_cls: 0.3164  acc: 85.6934  loss_bbox: 0.3781
2025/05/13 22:16:21 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:41  time: 0.3675  data_time: 0.0042  memory: 4361  loss: 0.8567  loss_rpn_cls: 0.0438  loss_rpn_bbox: 0.1148  loss_cls: 0.3215  acc: 86.0840  loss_bbox: 0.3766
2025/05/13 22:16:36 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:16:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:16:40 - mmengine - INFO - bbox_mAP_copypaste: 0.348 0.646 0.339 -1.000 0.213 0.376
2025/05/13 22:16:40 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3480  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3760  data_time: 0.0015  time: 0.0372
2025/05/13 22:16:58 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:07  time: 0.3704  data_time: 0.0076  memory: 4361  loss: 0.8583  loss_rpn_cls: 0.0430  loss_rpn_bbox: 0.1150  loss_cls: 0.3203  acc: 87.0605  loss_bbox: 0.3799
2025/05/13 22:17:17 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:49  time: 0.3694  data_time: 0.0043  memory: 4361  loss: 0.8689  loss_rpn_cls: 0.0457  loss_rpn_bbox: 0.1142  loss_cls: 0.3288  acc: 87.4512  loss_bbox: 0.3801
2025/05/13 22:17:32 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:17:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:17:35 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.652 0.370 -1.000 0.219 0.389
2025/05/13 22:17:35 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6520  coco/bbox_mAP_75: 0.3700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0373
2025/05/13 22:17:54 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:15  time: 0.3703  data_time: 0.0078  memory: 4361  loss: 0.8554  loss_rpn_cls: 0.0441  loss_rpn_bbox: 0.1134  loss_cls: 0.3193  acc: 87.3047  loss_bbox: 0.3786
2025/05/13 22:18:12 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:57  time: 0.3677  data_time: 0.0041  memory: 4361  loss: 0.8681  loss_rpn_cls: 0.0452  loss_rpn_bbox: 0.1156  loss_cls: 0.3255  acc: 85.6445  loss_bbox: 0.3817
2025/05/13 22:18:27 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:18:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:18:30 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.649 0.374 -1.000 0.222 0.389
2025/05/13 22:18:30 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.3740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3890  data_time: 0.0015  time: 0.0381
2025/05/13 22:18:49 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:23  time: 0.3696  data_time: 0.0075  memory: 4361  loss: 0.8472  loss_rpn_cls: 0.0434  loss_rpn_bbox: 0.1140  loss_cls: 0.3144  acc: 87.3047  loss_bbox: 0.3754
2025/05/13 22:19:07 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:04  time: 0.3676  data_time: 0.0042  memory: 4361  loss: 0.8725  loss_rpn_cls: 0.0488  loss_rpn_bbox: 0.1154  loss_cls: 0.3222  acc: 87.1582  loss_bbox: 0.3861
2025/05/13 22:19:22 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:19:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:19:26 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.647 0.345 -1.000 0.217 0.379
2025/05/13 22:19:26 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6470  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3790  data_time: 0.0016  time: 0.0378
2025/05/13 22:19:40 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:19:44 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:31  time: 0.3742  data_time: 0.0076  memory: 4361  loss: 0.8461  loss_rpn_cls: 0.0421  loss_rpn_bbox: 0.1129  loss_cls: 0.3119  acc: 88.9648  loss_bbox: 0.3792
2025/05/13 22:20:03 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:12  time: 0.3678  data_time: 0.0042  memory: 4361  loss: 0.8762  loss_rpn_cls: 0.0433  loss_rpn_bbox: 0.1162  loss_cls: 0.3289  acc: 88.3789  loss_bbox: 0.3878
2025/05/13 22:20:18 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:20:20 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:20:21 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.644 0.366 -1.000 0.215 0.385
2025/05/13 22:20:21 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.3660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3850  data_time: 0.0015  time: 0.0372
2025/05/13 22:20:40 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:38  time: 0.3752  data_time: 0.0076  memory: 4361  loss: 0.8550  loss_rpn_cls: 0.0446  loss_rpn_bbox: 0.1171  loss_cls: 0.3129  acc: 87.6465  loss_bbox: 0.3804
2025/05/13 22:20:58 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:20  time: 0.3681  data_time: 0.0043  memory: 4361  loss: 0.8622  loss_rpn_cls: 0.0440  loss_rpn_bbox: 0.1164  loss_cls: 0.3192  acc: 90.0879  loss_bbox: 0.3827
2025/05/13 22:21:13 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:21:15 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:21:17 - mmengine - INFO - bbox_mAP_copypaste: 0.348 0.645 0.341 -1.000 0.209 0.376
2025/05/13 22:21:17 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3480  coco/bbox_mAP_50: 0.6450  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3760  data_time: 0.0014  time: 0.0372
2025/05/13 22:21:35 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:46  time: 0.3722  data_time: 0.0077  memory: 4361  loss: 0.8708  loss_rpn_cls: 0.0483  loss_rpn_bbox: 0.1148  loss_cls: 0.3244  acc: 86.6211  loss_bbox: 0.3832
2025/05/13 22:21:54 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:28  time: 0.3695  data_time: 0.0041  memory: 4361  loss: 0.8402  loss_rpn_cls: 0.0412  loss_rpn_bbox: 0.1144  loss_cls: 0.3122  acc: 89.1113  loss_bbox: 0.3725
2025/05/13 22:22:09 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:22:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:22:12 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.646 0.363 -1.000 0.214 0.384
2025/05/13 22:22:12 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3840  data_time: 0.0016  time: 0.0374
2025/05/13 22:22:30 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:54  time: 0.3684  data_time: 0.0076  memory: 4361  loss: 0.8578  loss_rpn_cls: 0.0435  loss_rpn_bbox: 0.1142  loss_cls: 0.3164  acc: 89.2090  loss_bbox: 0.3837
2025/05/13 22:22:49 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.3739  data_time: 0.0041  memory: 4361  loss: 0.8405  loss_rpn_cls: 0.0414  loss_rpn_bbox: 0.1132  loss_cls: 0.3123  acc: 89.8438  loss_bbox: 0.3736
2025/05/13 22:23:04 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:23:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:23:07 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.650 0.357 -1.000 0.217 0.384
2025/05/13 22:23:07 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0373
2025/05/13 22:23:26 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:02  time: 0.3745  data_time: 0.0077  memory: 4361  loss: 0.8623  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.1139  loss_cls: 0.3229  acc: 89.0137  loss_bbox: 0.3810
2025/05/13 22:23:45 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:43  time: 0.3698  data_time: 0.0042  memory: 4361  loss: 0.8486  loss_rpn_cls: 0.0421  loss_rpn_bbox: 0.1129  loss_cls: 0.3174  acc: 88.5254  loss_bbox: 0.3762
2025/05/13 22:24:00 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:24:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:24:03 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.648 0.364 -1.000 0.214 0.388
2025/05/13 22:24:03 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6480  coco/bbox_mAP_75: 0.3640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3880  data_time: 0.0018  time: 0.0377
2025/05/13 22:24:22 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:10  time: 0.3724  data_time: 0.0079  memory: 4361  loss: 0.8480  loss_rpn_cls: 0.0432  loss_rpn_bbox: 0.1130  loss_cls: 0.3152  acc: 90.8691  loss_bbox: 0.3766
2025/05/13 22:24:40 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:51  time: 0.3683  data_time: 0.0042  memory: 4361  loss: 0.8488  loss_rpn_cls: 0.0423  loss_rpn_bbox: 0.1143  loss_cls: 0.3164  acc: 89.2578  loss_bbox: 0.3758
2025/05/13 22:24:55 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:24:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:24:58 - mmengine - INFO - bbox_mAP_copypaste: 0.363 0.656 0.371 -1.000 0.217 0.392
2025/05/13 22:24:58 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3630  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.3710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3920  data_time: 0.0016  time: 0.0372
2025/05/13 22:24:58 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_13.pth is removed
2025/05/13 22:24:59 - mmengine - INFO - The best checkpoint with 0.3630 coco/bbox_mAP at 27 epoch is saved to best_coco_bbox_mAP_epoch_27.pth.
2025/05/13 22:25:18 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:18  time: 0.3762  data_time: 0.0076  memory: 4361  loss: 0.8536  loss_rpn_cls: 0.0420  loss_rpn_bbox: 0.1144  loss_cls: 0.3217  acc: 89.4531  loss_bbox: 0.3755
2025/05/13 22:25:37 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:59  time: 0.3724  data_time: 0.0042  memory: 4361  loss: 0.8481  loss_rpn_cls: 0.0425  loss_rpn_bbox: 0.1137  loss_cls: 0.3157  acc: 89.7949  loss_bbox: 0.3762
2025/05/13 22:25:52 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:25:54 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:25:55 - mmengine - INFO - bbox_mAP_copypaste: 0.366 0.652 0.382 -1.000 0.231 0.394
2025/05/13 22:25:55 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3660  coco/bbox_mAP_50: 0.6520  coco/bbox_mAP_75: 0.3820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2310  coco/bbox_mAP_l: 0.3940  data_time: 0.0014  time: 0.0375
2025/05/13 22:25:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_27.pth is removed
2025/05/13 22:25:56 - mmengine - INFO - The best checkpoint with 0.3660 coco/bbox_mAP at 28 epoch is saved to best_coco_bbox_mAP_epoch_28.pth.
2025/05/13 22:26:15 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3713  data_time: 0.0079  memory: 4361  loss: 0.8583  loss_rpn_cls: 0.0433  loss_rpn_bbox: 0.1151  loss_cls: 0.3185  acc: 86.7676  loss_bbox: 0.3813
2025/05/13 22:26:15 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:26:33 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3656  data_time: 0.0044  memory: 4361  loss: 0.8662  loss_rpn_cls: 0.0436  loss_rpn_bbox: 0.1143  loss_cls: 0.3266  acc: 90.9180  loss_bbox: 0.3816
2025/05/13 22:26:48 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:26:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:26:51 - mmengine - INFO - bbox_mAP_copypaste: 0.362 0.644 0.374 -1.000 0.217 0.391
2025/05/13 22:26:51 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3620  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.3740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3910  data_time: 0.0015  time: 0.0373
2025/05/13 22:27:10 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3717  data_time: 0.0076  memory: 4361  loss: 0.8637  loss_rpn_cls: 0.0418  loss_rpn_bbox: 0.1152  loss_cls: 0.3206  acc: 86.6699  loss_bbox: 0.3860
2025/05/13 22:27:28 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3679  data_time: 0.0042  memory: 4361  loss: 0.8504  loss_rpn_cls: 0.0479  loss_rpn_bbox: 0.1135  loss_cls: 0.3154  acc: 85.8887  loss_bbox: 0.3737
2025/05/13 22:27:43 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_aff_20250513_215937
2025/05/13 22:27:43 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 22:27:46 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:27:48 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.647 0.341 -1.000 0.213 0.378
2025/05/13 22:27:48 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6470  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3780  data_time: 0.0014  time: 0.0376
