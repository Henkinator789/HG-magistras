2025/05/19 14:59:16 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 642027283
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 642027283
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 14:59:16 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='Color'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='Color'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 14:59:17 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 14:59:17 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 14:59:18 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 14:59:18 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 14:59:18 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 14:59:18 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 14:59:18 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 14:59:18 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 14:59:42 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:33:05  time: 0.4750  data_time: 0.0912  memory: 4360  loss: 2.1186  loss_rpn_cls: 0.6176  loss_rpn_bbox: 0.2499  loss_cls: 0.8147  acc: 78.1738  loss_bbox: 0.4364
2025/05/19 15:00:00 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:12  time: 0.3737  data_time: 0.0023  memory: 4360  loss: 1.9449  loss_rpn_cls: 0.3416  loss_rpn_bbox: 0.2216  loss_cls: 0.6757  acc: 77.7832  loss_bbox: 0.7060
2025/05/19 15:00:16 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:00:26 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:00:28 - mmengine - INFO - bbox_mAP_copypaste: 0.085 0.199 0.048 -1.000 0.035 0.089
2025/05/19 15:00:28 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0850  coco/bbox_mAP_50: 0.1990  coco/bbox_mAP_75: 0.0480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0350  coco/bbox_mAP_l: 0.0890  data_time: 0.1699  time: 0.2106
2025/05/19 15:00:29 - mmengine - INFO - The best checkpoint with 0.0850 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 15:00:48 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:27:21  time: 0.3949  data_time: 0.0057  memory: 4361  loss: 1.5456  loss_rpn_cls: 0.1478  loss_rpn_bbox: 0.1893  loss_cls: 0.5647  acc: 81.1035  loss_bbox: 0.6438
2025/05/19 15:01:07 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:28  time: 0.3662  data_time: 0.0024  memory: 4361  loss: 1.3922  loss_rpn_cls: 0.1151  loss_rpn_bbox: 0.1798  loss_cls: 0.5022  acc: 86.4415  loss_bbox: 0.5951
2025/05/19 15:01:21 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:01:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:01:25 - mmengine - INFO - bbox_mAP_copypaste: 0.321 0.635 0.269 -1.000 0.221 0.345
2025/05/19 15:01:25 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3210  coco/bbox_mAP_50: 0.6350  coco/bbox_mAP_75: 0.2690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3450  data_time: 0.0016  time: 0.0376
2025/05/19 15:01:25 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 15:01:26 - mmengine - INFO - The best checkpoint with 0.3210 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 15:01:44 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:14  time: 0.3684  data_time: 0.0051  memory: 4361  loss: 1.2362  loss_rpn_cls: 0.0885  loss_rpn_bbox: 0.1607  loss_cls: 0.4548  acc: 83.2520  loss_bbox: 0.5321
2025/05/19 15:02:02 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:40  time: 0.3593  data_time: 0.0024  memory: 4361  loss: 1.2745  loss_rpn_cls: 0.0982  loss_rpn_bbox: 0.1648  loss_cls: 0.4716  acc: 82.1289  loss_bbox: 0.5398
2025/05/19 15:02:17 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:02:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:02:20 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.640 0.367 -1.000 0.240 0.376
2025/05/19 15:02:20 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6400  coco/bbox_mAP_75: 0.3670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2400  coco/bbox_mAP_l: 0.3760  data_time: 0.0017  time: 0.0373
2025/05/19 15:02:20 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 15:02:21 - mmengine - INFO - The best checkpoint with 0.3540 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 15:02:39 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:51  time: 0.3708  data_time: 0.0051  memory: 4361  loss: 1.1895  loss_rpn_cls: 0.0908  loss_rpn_bbox: 0.1544  loss_cls: 0.4517  acc: 80.1270  loss_bbox: 0.4926
2025/05/19 15:02:57 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:24  time: 0.3592  data_time: 0.0025  memory: 4361  loss: 1.1547  loss_rpn_cls: 0.0913  loss_rpn_bbox: 0.1537  loss_cls: 0.4279  acc: 85.8887  loss_bbox: 0.4818
2025/05/19 15:03:12 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:03:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:03:15 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.607 0.382 -1.000 0.269 0.372
2025/05/19 15:03:15 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6070  coco/bbox_mAP_75: 0.3820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2690  coco/bbox_mAP_l: 0.3720  data_time: 0.0016  time: 0.0371
2025/05/19 15:03:34 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:40  time: 0.3637  data_time: 0.0050  memory: 4361  loss: 1.0208  loss_rpn_cls: 0.0672  loss_rpn_bbox: 0.1361  loss_cls: 0.3714  acc: 84.3262  loss_bbox: 0.4461
2025/05/19 15:03:52 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:18  time: 0.3633  data_time: 0.0024  memory: 4361  loss: 1.0600  loss_rpn_cls: 0.0734  loss_rpn_bbox: 0.1421  loss_cls: 0.3941  acc: 84.2773  loss_bbox: 0.4505
2025/05/19 15:04:06 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:04:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:04:10 - mmengine - INFO - bbox_mAP_copypaste: 0.375 0.659 0.393 -1.000 0.270 0.393
2025/05/19 15:04:10 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3750  coco/bbox_mAP_50: 0.6590  coco/bbox_mAP_75: 0.3930  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2700  coco/bbox_mAP_l: 0.3930  data_time: 0.0016  time: 0.0371
2025/05/19 15:04:10 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 15:04:10 - mmengine - INFO - The best checkpoint with 0.3750 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 15:04:29 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:40  time: 0.3708  data_time: 0.0052  memory: 4361  loss: 0.9486  loss_rpn_cls: 0.0548  loss_rpn_bbox: 0.1270  loss_cls: 0.3477  acc: 86.2305  loss_bbox: 0.4193
2025/05/19 15:04:47 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:18  time: 0.3620  data_time: 0.0025  memory: 4361  loss: 0.9253  loss_rpn_cls: 0.0510  loss_rpn_bbox: 0.1240  loss_cls: 0.3363  acc: 89.6484  loss_bbox: 0.4139
2025/05/19 15:05:02 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:05:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:05:05 - mmengine - INFO - bbox_mAP_copypaste: 0.425 0.704 0.492 -1.000 0.288 0.450
2025/05/19 15:05:05 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4250  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.4920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4500  data_time: 0.0016  time: 0.0368
2025/05/19 15:05:05 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 15:05:06 - mmengine - INFO - The best checkpoint with 0.4250 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/19 15:05:25 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:42  time: 0.3714  data_time: 0.0054  memory: 4361  loss: 0.9088  loss_rpn_cls: 0.0500  loss_rpn_bbox: 0.1231  loss_cls: 0.3276  acc: 86.6699  loss_bbox: 0.4081
2025/05/19 15:05:43 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:22  time: 0.3626  data_time: 0.0023  memory: 4361  loss: 0.8950  loss_rpn_cls: 0.0494  loss_rpn_bbox: 0.1206  loss_cls: 0.3204  acc: 87.7930  loss_bbox: 0.4046
2025/05/19 15:05:58 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:05:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:06:01 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.741 0.521 -1.000 0.244 0.481
2025/05/19 15:06:01 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2440  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0368
2025/05/19 15:06:01 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/19 15:06:02 - mmengine - INFO - The best checkpoint with 0.4480 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/19 15:06:07 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:06:20 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:46  time: 0.3721  data_time: 0.0052  memory: 4361  loss: 0.8612  loss_rpn_cls: 0.0441  loss_rpn_bbox: 0.1171  loss_cls: 0.3103  acc: 88.8048  loss_bbox: 0.3896
2025/05/19 15:06:38 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:27  time: 0.3623  data_time: 0.0023  memory: 4360  loss: 0.8510  loss_rpn_cls: 0.0404  loss_rpn_bbox: 0.1138  loss_cls: 0.3131  acc: 90.6738  loss_bbox: 0.3837
2025/05/19 15:06:53 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:06:55 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:06:57 - mmengine - INFO - bbox_mAP_copypaste: 0.445 0.739 0.516 -1.000 0.311 0.470
2025/05/19 15:06:57 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4450  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4700  data_time: 0.0018  time: 0.0367
2025/05/19 15:07:15 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:51  time: 0.3674  data_time: 0.0051  memory: 4360  loss: 0.7323  loss_rpn_cls: 0.0326  loss_rpn_bbox: 0.1005  loss_cls: 0.2529  acc: 92.7734  loss_bbox: 0.3463
2025/05/19 15:07:33 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:33  time: 0.3676  data_time: 0.0022  memory: 4360  loss: 0.7080  loss_rpn_cls: 0.0282  loss_rpn_bbox: 0.0972  loss_cls: 0.2444  acc: 88.6719  loss_bbox: 0.3382
2025/05/19 15:07:48 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:07:50 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:07:52 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.737 0.543 -1.000 0.317 0.480
2025/05/19 15:07:52 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4800  data_time: 0.0015  time: 0.0374
2025/05/19 15:07:52 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/19 15:07:52 - mmengine - INFO - The best checkpoint with 0.4550 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 15:08:11 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:59  time: 0.3755  data_time: 0.0052  memory: 4360  loss: 0.6986  loss_rpn_cls: 0.0261  loss_rpn_bbox: 0.0966  loss_cls: 0.2415  acc: 89.0625  loss_bbox: 0.3344
2025/05/19 15:08:29 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:40  time: 0.3664  data_time: 0.0023  memory: 4360  loss: 0.6916  loss_rpn_cls: 0.0245  loss_rpn_bbox: 0.0944  loss_cls: 0.2389  acc: 91.4062  loss_bbox: 0.3337
2025/05/19 15:08:44 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:08:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:08:48 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.739 0.542 -1.000 0.308 0.489
2025/05/19 15:08:48 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0367
2025/05/19 15:08:48 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/19 15:08:48 - mmengine - INFO - The best checkpoint with 0.4610 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/19 15:09:07 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:06  time: 0.3747  data_time: 0.0052  memory: 4360  loss: 0.6768  loss_rpn_cls: 0.0239  loss_rpn_bbox: 0.0937  loss_cls: 0.2294  acc: 92.3828  loss_bbox: 0.3297
2025/05/19 15:09:25 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:47  time: 0.3670  data_time: 0.0023  memory: 4360  loss: 0.6768  loss_rpn_cls: 0.0228  loss_rpn_bbox: 0.0945  loss_cls: 0.2323  acc: 90.2344  loss_bbox: 0.3271
2025/05/19 15:09:40 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:09:42 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:09:44 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.726 0.549 -1.000 0.311 0.483
2025/05/19 15:09:44 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0362
2025/05/19 15:10:02 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:13  time: 0.3710  data_time: 0.0047  memory: 4360  loss: 0.6616  loss_rpn_cls: 0.0237  loss_rpn_bbox: 0.0912  loss_cls: 0.2275  acc: 91.0645  loss_bbox: 0.3193
2025/05/19 15:10:21 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:54  time: 0.3663  data_time: 0.0023  memory: 4360  loss: 0.6726  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0919  loss_cls: 0.2321  acc: 89.5508  loss_bbox: 0.3258
2025/05/19 15:10:36 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:10:37 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:10:39 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.726 0.539 -1.000 0.308 0.483
2025/05/19 15:10:39 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0362
2025/05/19 15:10:57 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:21  time: 0.3720  data_time: 0.0052  memory: 4360  loss: 0.6674  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0916  loss_cls: 0.2312  acc: 90.1855  loss_bbox: 0.3214
2025/05/19 15:11:16 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:02  time: 0.3665  data_time: 0.0023  memory: 4360  loss: 0.6529  loss_rpn_cls: 0.0208  loss_rpn_bbox: 0.0903  loss_cls: 0.2233  acc: 90.3320  loss_bbox: 0.3185
2025/05/19 15:11:31 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:11:33 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:11:34 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.723 0.537 -1.000 0.308 0.481
2025/05/19 15:11:34 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0366
2025/05/19 15:11:52 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:28  time: 0.3675  data_time: 0.0051  memory: 4360  loss: 0.6557  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0901  loss_cls: 0.2254  acc: 91.1621  loss_bbox: 0.3192
2025/05/19 15:12:11 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:09  time: 0.3718  data_time: 0.0024  memory: 4360  loss: 0.6595  loss_rpn_cls: 0.0232  loss_rpn_bbox: 0.0929  loss_cls: 0.2233  acc: 91.6504  loss_bbox: 0.3200
2025/05/19 15:12:26 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:12:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:12:29 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.727 0.546 -1.000 0.310 0.483
2025/05/19 15:12:29 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0364
2025/05/19 15:12:39 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:12:48 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:35  time: 0.3731  data_time: 0.0051  memory: 4360  loss: 0.6601  loss_rpn_cls: 0.0225  loss_rpn_bbox: 0.0915  loss_cls: 0.2242  acc: 92.3340  loss_bbox: 0.3219
2025/05/19 15:13:06 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:17  time: 0.3695  data_time: 0.0023  memory: 4360  loss: 0.6556  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0911  loss_cls: 0.2221  acc: 91.2109  loss_bbox: 0.3197
2025/05/19 15:13:21 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:13:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:13:24 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.723 0.538 -1.000 0.310 0.482
2025/05/19 15:13:24 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0364
2025/05/19 15:13:43 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:43  time: 0.3721  data_time: 0.0052  memory: 4360  loss: 0.6479  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0912  loss_cls: 0.2173  acc: 93.8477  loss_bbox: 0.3171
2025/05/19 15:14:01 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:24  time: 0.3654  data_time: 0.0023  memory: 4360  loss: 0.6680  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0913  loss_cls: 0.2318  acc: 92.3828  loss_bbox: 0.3226
2025/05/19 15:14:16 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:14:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:14:19 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.737 0.550 -1.000 0.312 0.488
2025/05/19 15:14:19 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4880  data_time: 0.0015  time: 0.0366
2025/05/19 15:14:38 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:51  time: 0.3700  data_time: 0.0053  memory: 4360  loss: 0.6645  loss_rpn_cls: 0.0233  loss_rpn_bbox: 0.0913  loss_cls: 0.2282  acc: 89.3555  loss_bbox: 0.3217
2025/05/19 15:14:56 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:32  time: 0.3658  data_time: 0.0022  memory: 4360  loss: 0.6490  loss_rpn_cls: 0.0217  loss_rpn_bbox: 0.0900  loss_cls: 0.2181  acc: 92.5293  loss_bbox: 0.3191
2025/05/19 15:15:11 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:15:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:15:14 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.733 0.545 -1.000 0.310 0.487
2025/05/19 15:15:14 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4870  data_time: 0.0015  time: 0.0365
2025/05/19 15:15:33 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:58  time: 0.3674  data_time: 0.0055  memory: 4360  loss: 0.6489  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0901  loss_cls: 0.2209  acc: 89.5996  loss_bbox: 0.3183
2025/05/19 15:15:51 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:40  time: 0.3660  data_time: 0.0023  memory: 4360  loss: 0.6568  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0909  loss_cls: 0.2227  acc: 88.6719  loss_bbox: 0.3214
2025/05/19 15:16:06 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:16:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:16:09 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.726 0.542 -1.000 0.310 0.482
2025/05/19 15:16:09 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0367
2025/05/19 15:16:28 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:06  time: 0.3694  data_time: 0.0050  memory: 4360  loss: 0.6495  loss_rpn_cls: 0.0213  loss_rpn_bbox: 0.0916  loss_cls: 0.2198  acc: 90.4297  loss_bbox: 0.3169
2025/05/19 15:16:46 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:48  time: 0.3653  data_time: 0.0023  memory: 4360  loss: 0.6506  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0909  loss_cls: 0.2198  acc: 91.5039  loss_bbox: 0.3193
2025/05/19 15:17:01 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:17:03 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:17:04 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.729 0.539 -1.000 0.309 0.484
2025/05/19 15:17:04 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4840  data_time: 0.0015  time: 0.0364
2025/05/19 15:17:23 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:14  time: 0.3733  data_time: 0.0051  memory: 4360  loss: 0.6473  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0905  loss_cls: 0.2154  acc: 91.1621  loss_bbox: 0.3188
2025/05/19 15:17:41 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:55  time: 0.3644  data_time: 0.0024  memory: 4360  loss: 0.6450  loss_rpn_cls: 0.0206  loss_rpn_bbox: 0.0895  loss_cls: 0.2204  acc: 91.9434  loss_bbox: 0.3145
2025/05/19 15:17:56 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:17:58 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:18:00 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.721 0.537 -1.000 0.310 0.481
2025/05/19 15:18:00 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4810  data_time: 0.0017  time: 0.0367
2025/05/19 15:18:18 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:22  time: 0.3726  data_time: 0.0054  memory: 4360  loss: 0.6459  loss_rpn_cls: 0.0221  loss_rpn_bbox: 0.0898  loss_cls: 0.2178  acc: 92.7246  loss_bbox: 0.3162
2025/05/19 15:18:37 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:03  time: 0.3690  data_time: 0.0023  memory: 4360  loss: 0.6541  loss_rpn_cls: 0.0216  loss_rpn_bbox: 0.0910  loss_cls: 0.2233  acc: 91.3086  loss_bbox: 0.3184
2025/05/19 15:18:52 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:18:53 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:18:55 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.729 0.543 -1.000 0.308 0.484
2025/05/19 15:18:55 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0367
2025/05/19 15:19:09 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:19:13 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:30  time: 0.3707  data_time: 0.0054  memory: 4360  loss: 0.6543  loss_rpn_cls: 0.0219  loss_rpn_bbox: 0.0908  loss_cls: 0.2232  acc: 91.9922  loss_bbox: 0.3184
2025/05/19 15:19:32 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:11  time: 0.3715  data_time: 0.0022  memory: 4360  loss: 0.6529  loss_rpn_cls: 0.0217  loss_rpn_bbox: 0.0917  loss_cls: 0.2204  acc: 90.7715  loss_bbox: 0.3191
2025/05/19 15:19:47 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:19:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:19:50 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.726 0.540 -1.000 0.311 0.482
2025/05/19 15:19:50 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0364
2025/05/19 15:20:08 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:37  time: 0.3695  data_time: 0.0051  memory: 4360  loss: 0.6513  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0897  loss_cls: 0.2218  acc: 91.7480  loss_bbox: 0.3179
2025/05/19 15:20:27 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:19  time: 0.3694  data_time: 0.0024  memory: 4360  loss: 0.6498  loss_rpn_cls: 0.0215  loss_rpn_bbox: 0.0914  loss_cls: 0.2199  acc: 91.5527  loss_bbox: 0.3171
2025/05/19 15:20:42 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:20:44 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:20:45 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.723 0.538 -1.000 0.311 0.481
2025/05/19 15:20:45 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3110  coco/bbox_mAP_l: 0.4810  data_time: 0.0017  time: 0.0367
2025/05/19 15:21:04 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:45  time: 0.3700  data_time: 0.0053  memory: 4360  loss: 0.6393  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0894  loss_cls: 0.2136  acc: 90.8691  loss_bbox: 0.3153
2025/05/19 15:21:22 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:27  time: 0.3688  data_time: 0.0026  memory: 4360  loss: 0.6414  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0901  loss_cls: 0.2178  acc: 89.9414  loss_bbox: 0.3145
2025/05/19 15:21:37 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:21:39 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:21:40 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.731 0.544 -1.000 0.312 0.484
2025/05/19 15:21:40 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0366
2025/05/19 15:21:59 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:53  time: 0.3742  data_time: 0.0051  memory: 4360  loss: 0.6464  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0904  loss_cls: 0.2206  acc: 92.1875  loss_bbox: 0.3150
2025/05/19 15:22:17 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.3663  data_time: 0.0023  memory: 4360  loss: 0.6423  loss_rpn_cls: 0.0211  loss_rpn_bbox: 0.0908  loss_cls: 0.2143  acc: 92.2363  loss_bbox: 0.3160
2025/05/19 15:22:32 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:22:34 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:22:36 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.723 0.535 -1.000 0.309 0.479
2025/05/19 15:22:36 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.4790  data_time: 0.0015  time: 0.0360
2025/05/19 15:22:54 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:01  time: 0.3680  data_time: 0.0049  memory: 4360  loss: 0.6280  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0875  loss_cls: 0.2121  acc: 90.2832  loss_bbox: 0.3094
2025/05/19 15:23:12 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:43  time: 0.3673  data_time: 0.0023  memory: 4360  loss: 0.6444  loss_rpn_cls: 0.0192  loss_rpn_bbox: 0.0909  loss_cls: 0.2175  acc: 93.7988  loss_bbox: 0.3168
2025/05/19 15:23:27 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:23:29 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:23:31 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.731 0.550 -1.000 0.314 0.485
2025/05/19 15:23:31 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4850  data_time: 0.0018  time: 0.0368
2025/05/19 15:23:49 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3696  data_time: 0.0050  memory: 4360  loss: 0.6370  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0893  loss_cls: 0.2144  acc: 89.5996  loss_bbox: 0.3128
2025/05/19 15:24:07 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:51  time: 0.3657  data_time: 0.0023  memory: 4360  loss: 0.6432  loss_rpn_cls: 0.0196  loss_rpn_bbox: 0.0899  loss_cls: 0.2196  acc: 93.6523  loss_bbox: 0.3140
2025/05/19 15:24:22 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:24:24 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:24:26 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.734 0.547 -1.000 0.312 0.487
2025/05/19 15:24:26 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7340  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4870  data_time: 0.0015  time: 0.0363
2025/05/19 15:24:44 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3754  data_time: 0.0054  memory: 4360  loss: 0.6463  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0902  loss_cls: 0.2187  acc: 93.7500  loss_bbox: 0.3156
2025/05/19 15:25:03 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:59  time: 0.3661  data_time: 0.0023  memory: 4360  loss: 0.6407  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0894  loss_cls: 0.2184  acc: 90.4785  loss_bbox: 0.3135
2025/05/19 15:25:18 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:25:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:25:21 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.725 0.544 -1.000 0.312 0.482
2025/05/19 15:25:21 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4820  data_time: 0.0017  time: 0.0370
2025/05/19 15:25:39 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3714  data_time: 0.0053  memory: 4360  loss: 0.6366  loss_rpn_cls: 0.0198  loss_rpn_bbox: 0.0892  loss_cls: 0.2123  acc: 88.3301  loss_bbox: 0.3153
2025/05/19 15:25:40 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:25:58 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3698  data_time: 0.0022  memory: 4360  loss: 0.6442  loss_rpn_cls: 0.0208  loss_rpn_bbox: 0.0904  loss_cls: 0.2179  acc: 94.4824  loss_bbox: 0.3152
2025/05/19 15:26:13 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:26:15 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:26:16 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.722 0.537 -1.000 0.314 0.479
2025/05/19 15:26:16 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3140  coco/bbox_mAP_l: 0.4790  data_time: 0.0015  time: 0.0387
2025/05/19 15:26:35 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3689  data_time: 0.0055  memory: 4360  loss: 0.6383  loss_rpn_cls: 0.0198  loss_rpn_bbox: 0.0887  loss_cls: 0.2160  acc: 93.0176  loss_bbox: 0.3137
2025/05/19 15:26:53 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3671  data_time: 0.0023  memory: 4360  loss: 0.6393  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0892  loss_cls: 0.2177  acc: 92.1875  loss_bbox: 0.3135
2025/05/19 15:27:08 - mmengine - INFO - Exp name: fasterrcnn_fs_color_20250519_145912
2025/05/19 15:27:08 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 15:27:11 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:27:13 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.724 0.539 -1.000 0.312 0.480
2025/05/19 15:27:13 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3120  coco/bbox_mAP_l: 0.4800  data_time: 0.0015  time: 0.0367
