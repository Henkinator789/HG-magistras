2025/05/19 15:29:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 312355535
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 312355535
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 15:29:57 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='Brightness'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='Brightness'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 15:29:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 15:29:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 15:29:59 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 15:29:59 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 15:29:59 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 15:29:59 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 15:29:59 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 15:29:59 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 15:30:22 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:26  time: 0.4657  data_time: 0.0922  memory: 4362  loss: 2.3114  loss_rpn_cls: 0.6336  loss_rpn_bbox: 0.2506  loss_cls: 0.9120  acc: 77.4414  loss_bbox: 0.5152
2025/05/19 15:30:41 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:46  time: 0.3706  data_time: 0.0023  memory: 4362  loss: 1.9788  loss_rpn_cls: 0.3441  loss_rpn_bbox: 0.2301  loss_cls: 0.6970  acc: 78.1738  loss_bbox: 0.7075
2025/05/19 15:30:56 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:31:06 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:31:08 - mmengine - INFO - bbox_mAP_copypaste: 0.114 0.291 0.052 -1.000 0.026 0.126
2025/05/19 15:31:08 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1140  coco/bbox_mAP_50: 0.2910  coco/bbox_mAP_75: 0.0520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0260  coco/bbox_mAP_l: 0.1260  data_time: 0.1654  time: 0.2061
2025/05/19 15:31:08 - mmengine - INFO - The best checkpoint with 0.1140 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 15:31:27 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:36  time: 0.3685  data_time: 0.0050  memory: 4362  loss: 1.5559  loss_rpn_cls: 0.1678  loss_rpn_bbox: 0.2059  loss_cls: 0.5339  acc: 82.8125  loss_bbox: 0.6483
2025/05/19 15:31:45 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:50  time: 0.3639  data_time: 0.0024  memory: 4363  loss: 1.4500  loss_rpn_cls: 0.1310  loss_rpn_bbox: 0.1891  loss_cls: 0.5309  acc: 84.4238  loss_bbox: 0.5990
2025/05/19 15:32:00 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:32:02 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:32:03 - mmengine - INFO - bbox_mAP_copypaste: 0.306 0.594 0.266 -1.000 0.193 0.329
2025/05/19 15:32:03 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3060  coco/bbox_mAP_50: 0.5940  coco/bbox_mAP_75: 0.2660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.3290  data_time: 0.0016  time: 0.0374
2025/05/19 15:32:03 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 15:32:04 - mmengine - INFO - The best checkpoint with 0.3060 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 15:32:23 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:50  time: 0.3678  data_time: 0.0057  memory: 4362  loss: 1.3865  loss_rpn_cls: 0.1361  loss_rpn_bbox: 0.1767  loss_cls: 0.5030  acc: 79.9902  loss_bbox: 0.5708
2025/05/19 15:32:41 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:21  time: 0.3618  data_time: 0.0024  memory: 4363  loss: 1.2480  loss_rpn_cls: 0.1008  loss_rpn_bbox: 0.1619  loss_cls: 0.4569  acc: 78.6567  loss_bbox: 0.5283
2025/05/19 15:32:55 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:32:57 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:32:59 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.621 0.370 -1.000 0.204 0.377
2025/05/19 15:32:59 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6210  coco/bbox_mAP_75: 0.3700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3770  data_time: 0.0016  time: 0.0375
2025/05/19 15:32:59 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 15:32:59 - mmengine - INFO - The best checkpoint with 0.3490 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 15:33:18 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:34  time: 0.3655  data_time: 0.0052  memory: 4363  loss: 1.1703  loss_rpn_cls: 0.0874  loss_rpn_bbox: 0.1568  loss_cls: 0.4316  acc: 83.4568  loss_bbox: 0.4946
2025/05/19 15:33:36 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:09  time: 0.3592  data_time: 0.0022  memory: 4362  loss: 1.1217  loss_rpn_cls: 0.0743  loss_rpn_bbox: 0.1457  loss_cls: 0.4131  acc: 87.4023  loss_bbox: 0.4885
2025/05/19 15:33:51 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:33:52 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:33:54 - mmengine - INFO - bbox_mAP_copypaste: 0.339 0.595 0.357 -1.000 0.221 0.356
2025/05/19 15:33:54 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3390  coco/bbox_mAP_50: 0.5950  coco/bbox_mAP_75: 0.3570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3560  data_time: 0.0016  time: 0.0371
2025/05/19 15:34:12 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:29  time: 0.3646  data_time: 0.0048  memory: 4363  loss: 1.0843  loss_rpn_cls: 0.0754  loss_rpn_bbox: 0.1424  loss_cls: 0.4086  acc: 87.3535  loss_bbox: 0.4580
2025/05/19 15:34:30 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:06  time: 0.3585  data_time: 0.0024  memory: 4362  loss: 1.0329  loss_rpn_cls: 0.0697  loss_rpn_bbox: 0.1383  loss_cls: 0.3820  acc: 87.8906  loss_bbox: 0.4428
2025/05/19 15:34:45 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:34:47 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:34:48 - mmengine - INFO - bbox_mAP_copypaste: 0.408 0.717 0.419 -1.000 0.255 0.433
2025/05/19 15:34:48 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4080  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.4190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2550  coco/bbox_mAP_l: 0.4330  data_time: 0.0016  time: 0.0373
2025/05/19 15:34:48 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 15:34:49 - mmengine - INFO - The best checkpoint with 0.4080 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 15:35:07 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:29  time: 0.3679  data_time: 0.0050  memory: 4362  loss: 0.9921  loss_rpn_cls: 0.0601  loss_rpn_bbox: 0.1388  loss_cls: 0.3642  acc: 87.4512  loss_bbox: 0.4290
2025/05/19 15:35:25 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:08  time: 0.3592  data_time: 0.0025  memory: 4362  loss: 0.9650  loss_rpn_cls: 0.0591  loss_rpn_bbox: 0.1261  loss_cls: 0.3496  acc: 86.3770  loss_bbox: 0.4302
2025/05/19 15:35:40 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:35:42 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:35:43 - mmengine - INFO - bbox_mAP_copypaste: 0.432 0.722 0.493 -1.000 0.301 0.457
2025/05/19 15:35:43 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4320  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.4930  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4570  data_time: 0.0017  time: 0.0371
2025/05/19 15:35:43 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 15:35:44 - mmengine - INFO - The best checkpoint with 0.4320 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/19 15:36:02 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:32  time: 0.3668  data_time: 0.0055  memory: 4363  loss: 0.9341  loss_rpn_cls: 0.0546  loss_rpn_bbox: 0.1260  loss_cls: 0.3381  acc: 90.4103  loss_bbox: 0.4155
2025/05/19 15:36:21 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:13  time: 0.3638  data_time: 0.0024  memory: 4362  loss: 0.9067  loss_rpn_cls: 0.0507  loss_rpn_bbox: 0.1234  loss_cls: 0.3292  acc: 87.2977  loss_bbox: 0.4034
2025/05/19 15:36:35 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:36:37 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:36:39 - mmengine - INFO - bbox_mAP_copypaste: 0.411 0.707 0.455 -1.000 0.299 0.430
2025/05/19 15:36:39 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4110  coco/bbox_mAP_50: 0.7070  coco/bbox_mAP_75: 0.4550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4300  data_time: 0.0014  time: 0.0368
2025/05/19 15:36:44 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:36:57 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:38  time: 0.3692  data_time: 0.0055  memory: 4362  loss: 0.8726  loss_rpn_cls: 0.0460  loss_rpn_bbox: 0.1165  loss_cls: 0.3193  acc: 90.8203  loss_bbox: 0.3908
2025/05/19 15:37:15 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:18  time: 0.3607  data_time: 0.0023  memory: 4362  loss: 0.8732  loss_rpn_cls: 0.0467  loss_rpn_bbox: 0.1171  loss_cls: 0.3160  acc: 91.8457  loss_bbox: 0.3933
2025/05/19 15:37:30 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:37:32 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:37:33 - mmengine - INFO - bbox_mAP_copypaste: 0.393 0.658 0.447 -1.000 0.254 0.423
2025/05/19 15:37:33 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3930  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.4470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2540  coco/bbox_mAP_l: 0.4230  data_time: 0.0016  time: 0.0368
2025/05/19 15:37:52 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:44  time: 0.3689  data_time: 0.0051  memory: 4362  loss: 0.7710  loss_rpn_cls: 0.0334  loss_rpn_bbox: 0.1023  loss_cls: 0.2763  acc: 88.9648  loss_bbox: 0.3589
2025/05/19 15:38:10 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:26  time: 0.3668  data_time: 0.0025  memory: 4362  loss: 0.7549  loss_rpn_cls: 0.0349  loss_rpn_bbox: 0.1004  loss_cls: 0.2633  acc: 90.2344  loss_bbox: 0.3563
2025/05/19 15:38:25 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:38:27 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:38:28 - mmengine - INFO - bbox_mAP_copypaste: 0.478 0.762 0.566 -1.000 0.298 0.508
2025/05/19 15:38:28 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4780  coco/bbox_mAP_50: 0.7620  coco/bbox_mAP_75: 0.5660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.5080  data_time: 0.0015  time: 0.0366
2025/05/19 15:38:28 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/19 15:38:29 - mmengine - INFO - The best checkpoint with 0.4780 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 15:38:48 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:52  time: 0.3727  data_time: 0.0049  memory: 4363  loss: 0.7223  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0971  loss_cls: 0.2508  acc: 90.0391  loss_bbox: 0.3453
2025/05/19 15:39:06 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:34  time: 0.3705  data_time: 0.0023  memory: 4362  loss: 0.7271  loss_rpn_cls: 0.0283  loss_rpn_bbox: 0.0980  loss_cls: 0.2544  acc: 87.5000  loss_bbox: 0.3463
2025/05/19 15:39:21 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:39:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:39:24 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.741 0.546 -1.000 0.295 0.490
2025/05/19 15:39:24 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4900  data_time: 0.0018  time: 0.0366
2025/05/19 15:39:43 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:00  time: 0.3661  data_time: 0.0050  memory: 4362  loss: 0.7022  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0951  loss_cls: 0.2424  acc: 90.1367  loss_bbox: 0.3376
2025/05/19 15:40:01 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:41  time: 0.3651  data_time: 0.0023  memory: 4362  loss: 0.7103  loss_rpn_cls: 0.0262  loss_rpn_bbox: 0.0965  loss_cls: 0.2444  acc: 89.1602  loss_bbox: 0.3432
2025/05/19 15:40:16 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:40:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:40:19 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.742 0.548 -1.000 0.302 0.492
2025/05/19 15:40:19 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4920  data_time: 0.0015  time: 0.0365
2025/05/19 15:40:38 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:08  time: 0.3702  data_time: 0.0052  memory: 4363  loss: 0.6919  loss_rpn_cls: 0.0241  loss_rpn_bbox: 0.0949  loss_cls: 0.2394  acc: 93.7012  loss_bbox: 0.3335
2025/05/19 15:40:56 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:49  time: 0.3629  data_time: 0.0023  memory: 4363  loss: 0.6870  loss_rpn_cls: 0.0265  loss_rpn_bbox: 0.0927  loss_cls: 0.2343  acc: 91.6992  loss_bbox: 0.3336
2025/05/19 15:41:11 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:41:13 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:41:14 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.738 0.548 -1.000 0.294 0.492
2025/05/19 15:41:14 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7380  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4920  data_time: 0.0015  time: 0.0365
2025/05/19 15:41:33 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:15  time: 0.3678  data_time: 0.0051  memory: 4362  loss: 0.6864  loss_rpn_cls: 0.0265  loss_rpn_bbox: 0.0941  loss_cls: 0.2350  acc: 89.5508  loss_bbox: 0.3309
2025/05/19 15:41:51 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:57  time: 0.3660  data_time: 0.0022  memory: 4363  loss: 0.6856  loss_rpn_cls: 0.0244  loss_rpn_bbox: 0.0937  loss_cls: 0.2376  acc: 92.4316  loss_bbox: 0.3299
2025/05/19 15:42:06 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:42:08 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:42:09 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.740 0.551 -1.000 0.295 0.493
2025/05/19 15:42:09 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4930  data_time: 0.0015  time: 0.0370
2025/05/19 15:42:28 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:23  time: 0.3677  data_time: 0.0053  memory: 4363  loss: 0.6788  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0944  loss_cls: 0.2303  acc: 90.7227  loss_bbox: 0.3301
2025/05/19 15:42:46 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:05  time: 0.3655  data_time: 0.0022  memory: 4363  loss: 0.6778  loss_rpn_cls: 0.0253  loss_rpn_bbox: 0.0929  loss_cls: 0.2331  acc: 89.6973  loss_bbox: 0.3265
2025/05/19 15:43:01 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:43:03 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:43:04 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.743 0.550 -1.000 0.295 0.495
2025/05/19 15:43:04 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4950  data_time: 0.0015  time: 0.0364
2025/05/19 15:43:14 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:43:23 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:31  time: 0.3739  data_time: 0.0051  memory: 4363  loss: 0.6861  loss_rpn_cls: 0.0257  loss_rpn_bbox: 0.0937  loss_cls: 0.2348  acc: 92.4316  loss_bbox: 0.3320
2025/05/19 15:43:41 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:13  time: 0.3663  data_time: 0.0023  memory: 4362  loss: 0.6877  loss_rpn_cls: 0.0244  loss_rpn_bbox: 0.0944  loss_cls: 0.2380  acc: 91.4062  loss_bbox: 0.3308
2025/05/19 15:43:56 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:43:58 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:43:59 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.743 0.556 -1.000 0.292 0.497
2025/05/19 15:43:59 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4970  data_time: 0.0016  time: 0.0366
2025/05/19 15:44:18 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:40  time: 0.3733  data_time: 0.0050  memory: 4363  loss: 0.6926  loss_rpn_cls: 0.0257  loss_rpn_bbox: 0.0940  loss_cls: 0.2377  acc: 88.4277  loss_bbox: 0.3351
2025/05/19 15:44:36 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:21  time: 0.3643  data_time: 0.0024  memory: 4362  loss: 0.6835  loss_rpn_cls: 0.0256  loss_rpn_bbox: 0.0934  loss_cls: 0.2346  acc: 92.5781  loss_bbox: 0.3299
2025/05/19 15:44:51 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:44:53 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:44:54 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.742 0.555 -1.000 0.294 0.497
2025/05/19 15:44:54 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4970  data_time: 0.0015  time: 0.0367
2025/05/19 15:45:13 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:48  time: 0.3738  data_time: 0.0053  memory: 4362  loss: 0.6887  loss_rpn_cls: 0.0278  loss_rpn_bbox: 0.0943  loss_cls: 0.2324  acc: 91.0156  loss_bbox: 0.3341
2025/05/19 15:45:31 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:29  time: 0.3682  data_time: 0.0023  memory: 4362  loss: 0.6905  loss_rpn_cls: 0.0255  loss_rpn_bbox: 0.0944  loss_cls: 0.2391  acc: 91.4062  loss_bbox: 0.3316
2025/05/19 15:45:46 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:45:48 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:45:49 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.744 0.552 -1.000 0.292 0.496
2025/05/19 15:45:49 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4960  data_time: 0.0015  time: 0.0365
2025/05/19 15:46:08 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:56  time: 0.3667  data_time: 0.0051  memory: 4362  loss: 0.6737  loss_rpn_cls: 0.0228  loss_rpn_bbox: 0.0923  loss_cls: 0.2307  acc: 87.5977  loss_bbox: 0.3280
2025/05/19 15:46:26 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:37  time: 0.3714  data_time: 0.0023  memory: 4362  loss: 0.7004  loss_rpn_cls: 0.0261  loss_rpn_bbox: 0.0960  loss_cls: 0.2447  acc: 90.7227  loss_bbox: 0.3336
2025/05/19 15:46:41 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:46:43 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:46:44 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.737 0.549 -1.000 0.290 0.493
2025/05/19 15:46:44 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.4930  data_time: 0.0015  time: 0.0363
2025/05/19 15:47:03 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:04  time: 0.3707  data_time: 0.0053  memory: 4363  loss: 0.6915  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.0955  loss_cls: 0.2376  acc: 92.1387  loss_bbox: 0.3332
2025/05/19 15:47:21 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:45  time: 0.3657  data_time: 0.0024  memory: 4363  loss: 0.6783  loss_rpn_cls: 0.0236  loss_rpn_bbox: 0.0925  loss_cls: 0.2327  acc: 88.5742  loss_bbox: 0.3294
2025/05/19 15:47:36 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:47:38 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:47:40 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.742 0.550 -1.000 0.291 0.493
2025/05/19 15:47:40 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4930  data_time: 0.0015  time: 0.0365
2025/05/19 15:47:58 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:12  time: 0.3689  data_time: 0.0051  memory: 4363  loss: 0.6753  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0939  loss_cls: 0.2296  acc: 93.0176  loss_bbox: 0.3295
2025/05/19 15:48:16 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:53  time: 0.3657  data_time: 0.0023  memory: 4363  loss: 0.6843  loss_rpn_cls: 0.0234  loss_rpn_bbox: 0.0932  loss_cls: 0.2383  acc: 89.4531  loss_bbox: 0.3293
2025/05/19 15:48:31 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:48:33 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:48:35 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.743 0.551 -1.000 0.292 0.494
2025/05/19 15:48:35 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4940  data_time: 0.0014  time: 0.0363
2025/05/19 15:48:53 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:20  time: 0.3712  data_time: 0.0053  memory: 4363  loss: 0.6696  loss_rpn_cls: 0.0229  loss_rpn_bbox: 0.0926  loss_cls: 0.2285  acc: 90.8691  loss_bbox: 0.3256
2025/05/19 15:49:11 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:02  time: 0.3661  data_time: 0.0023  memory: 4363  loss: 0.6815  loss_rpn_cls: 0.0242  loss_rpn_bbox: 0.0935  loss_cls: 0.2320  acc: 88.2812  loss_bbox: 0.3319
2025/05/19 15:49:27 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:49:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:49:30 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.741 0.549 -1.000 0.295 0.494
2025/05/19 15:49:30 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4940  data_time: 0.0016  time: 0.0367
2025/05/19 15:49:44 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:49:48 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:28  time: 0.3711  data_time: 0.0052  memory: 4362  loss: 0.6810  loss_rpn_cls: 0.0236  loss_rpn_bbox: 0.0939  loss_cls: 0.2341  acc: 90.5762  loss_bbox: 0.3294
2025/05/19 15:50:07 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:10  time: 0.3663  data_time: 0.0023  memory: 4363  loss: 0.6814  loss_rpn_cls: 0.0254  loss_rpn_bbox: 0.0931  loss_cls: 0.2317  acc: 90.0391  loss_bbox: 0.3312
2025/05/19 15:50:22 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:50:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:50:25 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.733 0.543 -1.000 0.295 0.488
2025/05/19 15:50:25 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0363
2025/05/19 15:50:43 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:36  time: 0.3725  data_time: 0.0052  memory: 4363  loss: 0.6842  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0938  loss_cls: 0.2331  acc: 92.7734  loss_bbox: 0.3302
2025/05/19 15:51:02 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:18  time: 0.3672  data_time: 0.0024  memory: 4362  loss: 0.6847  loss_rpn_cls: 0.0261  loss_rpn_bbox: 0.0937  loss_cls: 0.2371  acc: 90.1367  loss_bbox: 0.3278
2025/05/19 15:51:17 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:51:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:51:20 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.742 0.550 -1.000 0.298 0.496
2025/05/19 15:51:20 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0366
2025/05/19 15:51:38 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:44  time: 0.3683  data_time: 0.0050  memory: 4363  loss: 0.6711  loss_rpn_cls: 0.0246  loss_rpn_bbox: 0.0924  loss_cls: 0.2301  acc: 86.8652  loss_bbox: 0.3240
2025/05/19 15:51:57 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:26  time: 0.3669  data_time: 0.0024  memory: 4362  loss: 0.6797  loss_rpn_cls: 0.0249  loss_rpn_bbox: 0.0935  loss_cls: 0.2325  acc: 89.5996  loss_bbox: 0.3288
2025/05/19 15:52:12 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:52:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:52:15 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.743 0.552 -1.000 0.296 0.496
2025/05/19 15:52:15 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7430  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4960  data_time: 0.0015  time: 0.0365
2025/05/19 15:52:34 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:52  time: 0.3696  data_time: 0.0051  memory: 4363  loss: 0.6654  loss_rpn_cls: 0.0225  loss_rpn_bbox: 0.0931  loss_cls: 0.2248  acc: 92.2363  loss_bbox: 0.3250
2025/05/19 15:52:52 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:34  time: 0.3689  data_time: 0.0023  memory: 4363  loss: 0.6761  loss_rpn_cls: 0.0235  loss_rpn_bbox: 0.0929  loss_cls: 0.2326  acc: 91.8457  loss_bbox: 0.3271
2025/05/19 15:53:07 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:53:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:53:10 - mmengine - INFO - bbox_mAP_copypaste: 0.465 0.742 0.552 -1.000 0.297 0.494
2025/05/19 15:53:10 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4650  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4940  data_time: 0.0015  time: 0.0366
2025/05/19 15:53:29 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:01  time: 0.3705  data_time: 0.0052  memory: 4363  loss: 0.6770  loss_rpn_cls: 0.0229  loss_rpn_bbox: 0.0922  loss_cls: 0.2343  acc: 88.9648  loss_bbox: 0.3276
2025/05/19 15:53:47 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3700  data_time: 0.0024  memory: 4363  loss: 0.6704  loss_rpn_cls: 0.0238  loss_rpn_bbox: 0.0926  loss_cls: 0.2270  acc: 93.3105  loss_bbox: 0.3270
2025/05/19 15:54:02 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:54:04 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:54:05 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.737 0.542 -1.000 0.291 0.490
2025/05/19 15:54:05 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4900  data_time: 0.0018  time: 0.0368
2025/05/19 15:54:24 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3715  data_time: 0.0052  memory: 4363  loss: 0.6764  loss_rpn_cls: 0.0249  loss_rpn_bbox: 0.0931  loss_cls: 0.2340  acc: 91.3574  loss_bbox: 0.3243
2025/05/19 15:54:42 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3694  data_time: 0.0023  memory: 4362  loss: 0.6659  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0932  loss_cls: 0.2261  acc: 89.7461  loss_bbox: 0.3240
2025/05/19 15:54:57 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:54:59 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:55:00 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.729 0.540 -1.000 0.291 0.487
2025/05/19 15:55:00 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2910  coco/bbox_mAP_l: 0.4870  data_time: 0.0015  time: 0.0361
2025/05/19 15:55:19 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3694  data_time: 0.0052  memory: 4363  loss: 0.6736  loss_rpn_cls: 0.0243  loss_rpn_bbox: 0.0930  loss_cls: 0.2278  acc: 90.9668  loss_bbox: 0.3285
2025/05/19 15:55:37 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3639  data_time: 0.0023  memory: 4362  loss: 0.6709  loss_rpn_cls: 0.0242  loss_rpn_bbox: 0.0920  loss_cls: 0.2271  acc: 90.4297  loss_bbox: 0.3276
2025/05/19 15:55:52 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:55:54 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:55:56 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.739 0.545 -1.000 0.292 0.492
2025/05/19 15:55:56 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4920  data_time: 0.0017  time: 0.0364
2025/05/19 15:56:14 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3698  data_time: 0.0052  memory: 4362  loss: 0.6698  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0925  loss_cls: 0.2300  acc: 91.0645  loss_bbox: 0.3243
2025/05/19 15:56:15 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:56:32 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3650  data_time: 0.0023  memory: 4363  loss: 0.6692  loss_rpn_cls: 0.0219  loss_rpn_bbox: 0.0930  loss_cls: 0.2300  acc: 93.6035  loss_bbox: 0.3243
2025/05/19 15:56:47 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:56:49 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:56:51 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.739 0.546 -1.000 0.296 0.491
2025/05/19 15:56:51 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4910  data_time: 0.0016  time: 0.0363
2025/05/19 15:57:09 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3711  data_time: 0.0054  memory: 4363  loss: 0.6704  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0924  loss_cls: 0.2301  acc: 87.8906  loss_bbox: 0.3252
2025/05/19 15:57:28 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3664  data_time: 0.0022  memory: 4363  loss: 0.6663  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.0922  loss_cls: 0.2271  acc: 93.4082  loss_bbox: 0.3219
2025/05/19 15:57:42 - mmengine - INFO - Exp name: fasterrcnn_fs_brightness_20250519_152953
2025/05/19 15:57:42 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 15:57:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 15:57:47 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.735 0.544 -1.000 0.292 0.489
2025/05/19 15:57:47 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0363
