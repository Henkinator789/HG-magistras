2025/05/13 22:30:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1834898216
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1834898216
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 22:30:22 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='PhotoMetricDistortion'),
                dict(type='RandomAffine'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 22:30:23 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 22:30:23 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 22:30:23 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 22:30:23 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 22:30:24 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 22:30:24 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 22:30:24 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 22:30:24 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 22:30:47 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:15  time: 0.4629  data_time: 0.0945  memory: 4361  loss: 2.0713  loss_rpn_cls: 0.6438  loss_rpn_bbox: 0.2838  loss_cls: 0.8075  acc: 79.1992  loss_bbox: 0.3362
2025/05/13 22:31:05 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:47  time: 0.3737  data_time: 0.0041  memory: 4361  loss: 1.9304  loss_rpn_cls: 0.4049  loss_rpn_bbox: 0.2747  loss_cls: 0.6983  acc: 79.2969  loss_bbox: 0.5525
2025/05/13 22:31:21 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:31:31 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:31:32 - mmengine - INFO - bbox_mAP_copypaste: 0.066 0.191 0.017 -1.000 0.008 0.074
2025/05/13 22:31:32 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0660  coco/bbox_mAP_50: 0.1910  coco/bbox_mAP_75: 0.0170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0080  coco/bbox_mAP_l: 0.0740  data_time: 0.1664  time: 0.2089
2025/05/13 22:31:33 - mmengine - INFO - The best checkpoint with 0.0660 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 22:31:52 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:40  time: 0.3752  data_time: 0.0076  memory: 4361  loss: 1.8505  loss_rpn_cls: 0.2478  loss_rpn_bbox: 0.2476  loss_cls: 0.6593  acc: 78.4668  loss_bbox: 0.6959
2025/05/13 22:32:10 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:55  time: 0.3657  data_time: 0.0042  memory: 4361  loss: 1.6570  loss_rpn_cls: 0.1803  loss_rpn_bbox: 0.2210  loss_cls: 0.6020  acc: 79.3945  loss_bbox: 0.6537
2025/05/13 22:32:25 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:32:27 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:32:28 - mmengine - INFO - bbox_mAP_copypaste: 0.145 0.344 0.087 -1.000 0.087 0.158
2025/05/13 22:32:28 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1450  coco/bbox_mAP_50: 0.3440  coco/bbox_mAP_75: 0.0870  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0870  coco/bbox_mAP_l: 0.1580  data_time: 0.0014  time: 0.0371
2025/05/13 22:32:28 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 22:32:29 - mmengine - INFO - The best checkpoint with 0.1450 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 22:32:48 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:59  time: 0.3778  data_time: 0.0081  memory: 4361  loss: 1.4945  loss_rpn_cls: 0.1377  loss_rpn_bbox: 0.2120  loss_cls: 0.5539  acc: 80.3223  loss_bbox: 0.5910
2025/05/13 22:33:06 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:28  time: 0.3618  data_time: 0.0044  memory: 4361  loss: 1.4634  loss_rpn_cls: 0.1343  loss_rpn_bbox: 0.1933  loss_cls: 0.5733  acc: 77.7613  loss_bbox: 0.5625
2025/05/13 22:33:21 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:33:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:33:24 - mmengine - INFO - bbox_mAP_copypaste: 0.127 0.359 0.043 -1.000 0.109 0.135
2025/05/13 22:33:24 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1270  coco/bbox_mAP_50: 0.3590  coco/bbox_mAP_75: 0.0430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1090  coco/bbox_mAP_l: 0.1350  data_time: 0.0015  time: 0.0373
2025/05/13 22:33:43 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:41  time: 0.3683  data_time: 0.0078  memory: 4361  loss: 1.3710  loss_rpn_cls: 0.1250  loss_rpn_bbox: 0.1907  loss_cls: 0.5137  acc: 85.8887  loss_bbox: 0.5416
2025/05/13 22:34:01 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:17  time: 0.3651  data_time: 0.0042  memory: 4361  loss: 1.3551  loss_rpn_cls: 0.1167  loss_rpn_bbox: 0.1843  loss_cls: 0.5283  acc: 82.5980  loss_bbox: 0.5259
2025/05/13 22:34:16 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:34:18 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:34:19 - mmengine - INFO - bbox_mAP_copypaste: 0.191 0.404 0.132 -1.000 0.158 0.201
2025/05/13 22:34:19 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1910  coco/bbox_mAP_50: 0.4040  coco/bbox_mAP_75: 0.1320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.2010  data_time: 0.0017  time: 0.0378
2025/05/13 22:34:19 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 22:34:20 - mmengine - INFO - The best checkpoint with 0.1910 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 22:34:38 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:35  time: 0.3674  data_time: 0.0079  memory: 4361  loss: 1.2551  loss_rpn_cls: 0.0950  loss_rpn_bbox: 0.1763  loss_cls: 0.4746  acc: 79.1504  loss_bbox: 0.5092
2025/05/13 22:34:57 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:15  time: 0.3674  data_time: 0.0045  memory: 4361  loss: 1.2886  loss_rpn_cls: 0.0998  loss_rpn_bbox: 0.1726  loss_cls: 0.5116  acc: 83.9763  loss_bbox: 0.5047
2025/05/13 22:35:11 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:35:13 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:35:15 - mmengine - INFO - bbox_mAP_copypaste: 0.270 0.524 0.242 -1.000 0.194 0.290
2025/05/13 22:35:15 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2700  coco/bbox_mAP_50: 0.5240  coco/bbox_mAP_75: 0.2420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.2900  data_time: 0.0016  time: 0.0378
2025/05/13 22:35:15 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/13 22:35:15 - mmengine - INFO - The best checkpoint with 0.2700 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/13 22:35:34 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:36  time: 0.3710  data_time: 0.0078  memory: 4361  loss: 1.1858  loss_rpn_cls: 0.0860  loss_rpn_bbox: 0.1637  loss_cls: 0.4494  acc: 81.9824  loss_bbox: 0.4867
2025/05/13 22:35:52 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:16  time: 0.3644  data_time: 0.0044  memory: 4361  loss: 1.1987  loss_rpn_cls: 0.0885  loss_rpn_bbox: 0.1706  loss_cls: 0.4557  acc: 83.5938  loss_bbox: 0.4839
2025/05/13 22:36:07 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:36:09 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:36:10 - mmengine - INFO - bbox_mAP_copypaste: 0.261 0.524 0.218 -1.000 0.184 0.284
2025/05/13 22:36:10 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2610  coco/bbox_mAP_50: 0.5240  coco/bbox_mAP_75: 0.2180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.2840  data_time: 0.0016  time: 0.0375
2025/05/13 22:36:29 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:39  time: 0.3691  data_time: 0.0080  memory: 4361  loss: 1.1456  loss_rpn_cls: 0.0786  loss_rpn_bbox: 0.1527  loss_cls: 0.4414  acc: 83.4473  loss_bbox: 0.4729
2025/05/13 22:36:47 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:19  time: 0.3641  data_time: 0.0044  memory: 4361  loss: 1.1560  loss_rpn_cls: 0.0820  loss_rpn_bbox: 0.1623  loss_cls: 0.4350  acc: 86.4258  loss_bbox: 0.4767
2025/05/13 22:37:02 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:37:04 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:37:05 - mmengine - INFO - bbox_mAP_copypaste: 0.238 0.519 0.161 -1.000 0.174 0.257
2025/05/13 22:37:05 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2380  coco/bbox_mAP_50: 0.5190  coco/bbox_mAP_75: 0.1610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1740  coco/bbox_mAP_l: 0.2570  data_time: 0.0016  time: 0.0372
2025/05/13 22:37:10 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:37:23 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:44  time: 0.3677  data_time: 0.0075  memory: 4361  loss: 1.1200  loss_rpn_cls: 0.0748  loss_rpn_bbox: 0.1516  loss_cls: 0.4323  acc: 84.4238  loss_bbox: 0.4613
2025/05/13 22:37:42 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:24  time: 0.3615  data_time: 0.0043  memory: 4361  loss: 1.1562  loss_rpn_cls: 0.0820  loss_rpn_bbox: 0.1569  loss_cls: 0.4380  acc: 87.8906  loss_bbox: 0.4792
2025/05/13 22:37:56 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:37:58 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:38:00 - mmengine - INFO - bbox_mAP_copypaste: 0.306 0.573 0.292 -1.000 0.186 0.331
2025/05/13 22:38:00 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3060  coco/bbox_mAP_50: 0.5730  coco/bbox_mAP_75: 0.2920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1860  coco/bbox_mAP_l: 0.3310  data_time: 0.0016  time: 0.0372
2025/05/13 22:38:00 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/13 22:38:01 - mmengine - INFO - The best checkpoint with 0.3060 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/13 22:38:19 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:50  time: 0.3742  data_time: 0.0078  memory: 4361  loss: 1.0143  loss_rpn_cls: 0.0611  loss_rpn_bbox: 0.1341  loss_cls: 0.3816  acc: 83.1543  loss_bbox: 0.4375
2025/05/13 22:38:38 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:31  time: 0.3667  data_time: 0.0042  memory: 4361  loss: 0.9748  loss_rpn_cls: 0.0566  loss_rpn_bbox: 0.1301  loss_cls: 0.3579  acc: 89.0625  loss_bbox: 0.4302
2025/05/13 22:38:53 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:38:55 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:38:56 - mmengine - INFO - bbox_mAP_copypaste: 0.335 0.624 0.324 -1.000 0.194 0.363
2025/05/13 22:38:56 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3350  coco/bbox_mAP_50: 0.6240  coco/bbox_mAP_75: 0.3240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.3630  data_time: 0.0016  time: 0.0376
2025/05/13 22:38:56 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/13 22:38:57 - mmengine - INFO - The best checkpoint with 0.3350 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/13 22:39:15 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:57  time: 0.3746  data_time: 0.0076  memory: 4361  loss: 0.9619  loss_rpn_cls: 0.0611  loss_rpn_bbox: 0.1249  loss_cls: 0.3545  acc: 85.1562  loss_bbox: 0.4215
2025/05/13 22:39:34 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:38  time: 0.3623  data_time: 0.0040  memory: 4361  loss: 0.9784  loss_rpn_cls: 0.0575  loss_rpn_bbox: 0.1282  loss_cls: 0.3630  acc: 83.9355  loss_bbox: 0.4297
2025/05/13 22:39:48 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:39:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:39:52 - mmengine - INFO - bbox_mAP_copypaste: 0.372 0.652 0.401 -1.000 0.235 0.401
2025/05/13 22:39:52 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3720  coco/bbox_mAP_50: 0.6520  coco/bbox_mAP_75: 0.4010  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2350  coco/bbox_mAP_l: 0.4010  data_time: 0.0016  time: 0.0373
2025/05/13 22:39:52 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/13 22:39:53 - mmengine - INFO - The best checkpoint with 0.3720 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/13 22:40:11 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:04  time: 0.3715  data_time: 0.0076  memory: 4361  loss: 0.9661  loss_rpn_cls: 0.0556  loss_rpn_bbox: 0.1286  loss_cls: 0.3501  acc: 88.9160  loss_bbox: 0.4319
2025/05/13 22:40:29 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:45  time: 0.3651  data_time: 0.0042  memory: 4361  loss: 0.9668  loss_rpn_cls: 0.0539  loss_rpn_bbox: 0.1278  loss_cls: 0.3554  acc: 87.9883  loss_bbox: 0.4298
2025/05/13 22:40:44 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:40:46 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:40:48 - mmengine - INFO - bbox_mAP_copypaste: 0.348 0.655 0.329 -1.000 0.205 0.378
2025/05/13 22:40:48 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3480  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3780  data_time: 0.0015  time: 0.0376
2025/05/13 22:41:06 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:11  time: 0.3742  data_time: 0.0079  memory: 4362  loss: 0.9466  loss_rpn_cls: 0.0549  loss_rpn_bbox: 0.1274  loss_cls: 0.3431  acc: 85.6934  loss_bbox: 0.4212
2025/05/13 22:41:25 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:52  time: 0.3656  data_time: 0.0041  memory: 4361  loss: 0.9477  loss_rpn_cls: 0.0521  loss_rpn_bbox: 0.1236  loss_cls: 0.3486  acc: 85.9375  loss_bbox: 0.4233
2025/05/13 22:41:40 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:41:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:41:43 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.648 0.334 -1.000 0.208 0.378
2025/05/13 22:41:43 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6480  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3780  data_time: 0.0015  time: 0.0371
2025/05/13 22:42:01 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:18  time: 0.3692  data_time: 0.0075  memory: 4361  loss: 0.9709  loss_rpn_cls: 0.0563  loss_rpn_bbox: 0.1299  loss_cls: 0.3557  acc: 88.5254  loss_bbox: 0.4290
2025/05/13 22:42:20 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:59  time: 0.3661  data_time: 0.0042  memory: 4361  loss: 0.9451  loss_rpn_cls: 0.0519  loss_rpn_bbox: 0.1237  loss_cls: 0.3501  acc: 87.1582  loss_bbox: 0.4194
2025/05/13 22:42:35 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:42:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:42:38 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.642 0.352 -1.000 0.214 0.385
2025/05/13 22:42:38 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6420  coco/bbox_mAP_75: 0.3520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3850  data_time: 0.0016  time: 0.0371
2025/05/13 22:42:57 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:26  time: 0.3733  data_time: 0.0077  memory: 4361  loss: 0.9493  loss_rpn_cls: 0.0515  loss_rpn_bbox: 0.1256  loss_cls: 0.3541  acc: 84.4238  loss_bbox: 0.4181
2025/05/13 22:43:15 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:07  time: 0.3697  data_time: 0.0041  memory: 4361  loss: 0.9477  loss_rpn_cls: 0.0547  loss_rpn_bbox: 0.1254  loss_cls: 0.3473  acc: 87.3047  loss_bbox: 0.4204
2025/05/13 22:43:30 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:43:32 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:43:33 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.651 0.361 -1.000 0.217 0.389
2025/05/13 22:43:33 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0370
2025/05/13 22:43:43 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:43:52 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:33  time: 0.3684  data_time: 0.0075  memory: 4361  loss: 0.9665  loss_rpn_cls: 0.0557  loss_rpn_bbox: 0.1256  loss_cls: 0.3544  acc: 83.1055  loss_bbox: 0.4308
2025/05/13 22:44:10 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:15  time: 0.3671  data_time: 0.0043  memory: 4361  loss: 0.9474  loss_rpn_cls: 0.0571  loss_rpn_bbox: 0.1254  loss_cls: 0.3357  acc: 85.9863  loss_bbox: 0.4292
2025/05/13 22:44:25 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:44:27 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:44:28 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.649 0.359 -1.000 0.217 0.388
2025/05/13 22:44:28 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3880  data_time: 0.0017  time: 0.0372
2025/05/13 22:44:47 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:41  time: 0.3690  data_time: 0.0078  memory: 4361  loss: 0.9510  loss_rpn_cls: 0.0537  loss_rpn_bbox: 0.1264  loss_cls: 0.3488  acc: 85.5469  loss_bbox: 0.4220
2025/05/13 22:45:05 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:23  time: 0.3667  data_time: 0.0043  memory: 4361  loss: 0.9378  loss_rpn_cls: 0.0530  loss_rpn_bbox: 0.1238  loss_cls: 0.3411  acc: 85.7422  loss_bbox: 0.4198
2025/05/13 22:45:20 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:45:22 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:45:23 - mmengine - INFO - bbox_mAP_copypaste: 0.352 0.643 0.345 -1.000 0.201 0.382
2025/05/13 22:45:23 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3520  coco/bbox_mAP_50: 0.6430  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2010  coco/bbox_mAP_l: 0.3820  data_time: 0.0016  time: 0.0371
2025/05/13 22:45:42 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:49  time: 0.3734  data_time: 0.0080  memory: 4361  loss: 0.9518  loss_rpn_cls: 0.0531  loss_rpn_bbox: 0.1267  loss_cls: 0.3522  acc: 86.5723  loss_bbox: 0.4198
2025/05/13 22:46:00 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:31  time: 0.3641  data_time: 0.0043  memory: 4361  loss: 0.9295  loss_rpn_cls: 0.0546  loss_rpn_bbox: 0.1214  loss_cls: 0.3365  acc: 86.2793  loss_bbox: 0.4171
2025/05/13 22:46:15 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:46:17 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:46:19 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.647 0.352 -1.000 0.222 0.386
2025/05/13 22:46:19 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6470  coco/bbox_mAP_75: 0.3520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3860  data_time: 0.0015  time: 0.0372
2025/05/13 22:46:37 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:57  time: 0.3705  data_time: 0.0077  memory: 4361  loss: 0.9480  loss_rpn_cls: 0.0526  loss_rpn_bbox: 0.1267  loss_cls: 0.3443  acc: 87.6465  loss_bbox: 0.4244
2025/05/13 22:46:55 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:38  time: 0.3642  data_time: 0.0041  memory: 4361  loss: 0.9491  loss_rpn_cls: 0.0587  loss_rpn_bbox: 0.1260  loss_cls: 0.3436  acc: 82.9102  loss_bbox: 0.4208
2025/05/13 22:47:10 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:47:12 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:47:14 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.646 0.343 -1.000 0.203 0.382
2025/05/13 22:47:14 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3820  data_time: 0.0015  time: 0.0373
2025/05/13 22:47:32 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:05  time: 0.3735  data_time: 0.0078  memory: 4361  loss: 0.9325  loss_rpn_cls: 0.0522  loss_rpn_bbox: 0.1237  loss_cls: 0.3403  acc: 87.5977  loss_bbox: 0.4162
2025/05/13 22:47:51 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:46  time: 0.3656  data_time: 0.0042  memory: 4361  loss: 0.9479  loss_rpn_cls: 0.0567  loss_rpn_bbox: 0.1236  loss_cls: 0.3426  acc: 87.0605  loss_bbox: 0.4249
2025/05/13 22:48:06 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:48:07 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:48:09 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.649 0.336 -1.000 0.210 0.380
2025/05/13 22:48:09 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.3360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3800  data_time: 0.0015  time: 0.0370
2025/05/13 22:48:28 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:13  time: 0.3735  data_time: 0.0076  memory: 4361  loss: 0.9312  loss_rpn_cls: 0.0525  loss_rpn_bbox: 0.1242  loss_cls: 0.3388  acc: 90.0391  loss_bbox: 0.4157
2025/05/13 22:48:46 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:54  time: 0.3644  data_time: 0.0042  memory: 4361  loss: 0.9507  loss_rpn_cls: 0.0510  loss_rpn_bbox: 0.1284  loss_cls: 0.3451  acc: 86.5234  loss_bbox: 0.4262
2025/05/13 22:49:00 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:49:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:49:04 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.650 0.336 -1.000 0.213 0.378
2025/05/13 22:49:04 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3780  data_time: 0.0016  time: 0.0372
2025/05/13 22:49:22 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:21  time: 0.3712  data_time: 0.0075  memory: 4361  loss: 0.9518  loss_rpn_cls: 0.0557  loss_rpn_bbox: 0.1260  loss_cls: 0.3476  acc: 86.6699  loss_bbox: 0.4225
2025/05/13 22:49:41 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:02  time: 0.3647  data_time: 0.0041  memory: 4361  loss: 0.9302  loss_rpn_cls: 0.0494  loss_rpn_bbox: 0.1197  loss_cls: 0.3410  acc: 89.0625  loss_bbox: 0.4202
2025/05/13 22:49:56 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:49:58 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:49:59 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.651 0.360 -1.000 0.219 0.388
2025/05/13 22:49:59 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3880  data_time: 0.0017  time: 0.0373
2025/05/13 22:50:14 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:50:18 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:29  time: 0.3728  data_time: 0.0076  memory: 4361  loss: 0.9336  loss_rpn_cls: 0.0534  loss_rpn_bbox: 0.1241  loss_cls: 0.3413  acc: 89.1602  loss_bbox: 0.4148
2025/05/13 22:50:36 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:10  time: 0.3694  data_time: 0.0040  memory: 4361  loss: 0.9356  loss_rpn_cls: 0.0526  loss_rpn_bbox: 0.1224  loss_cls: 0.3392  acc: 86.6211  loss_bbox: 0.4214
2025/05/13 22:50:51 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:50:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:50:54 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.654 0.359 -1.000 0.216 0.389
2025/05/13 22:50:54 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0375
2025/05/13 22:51:13 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:37  time: 0.3716  data_time: 0.0077  memory: 4361  loss: 0.9488  loss_rpn_cls: 0.0554  loss_rpn_bbox: 0.1247  loss_cls: 0.3484  acc: 85.4004  loss_bbox: 0.4203
2025/05/13 22:51:31 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:18  time: 0.3698  data_time: 0.0042  memory: 4361  loss: 0.9395  loss_rpn_cls: 0.0533  loss_rpn_bbox: 0.1255  loss_cls: 0.3400  acc: 85.4492  loss_bbox: 0.4208
2025/05/13 22:51:46 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:51:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:51:50 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.648 0.362 -1.000 0.203 0.389
2025/05/13 22:51:50 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6480  coco/bbox_mAP_75: 0.3620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0372
2025/05/13 22:52:08 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:45  time: 0.3694  data_time: 0.0075  memory: 4361  loss: 0.9286  loss_rpn_cls: 0.0527  loss_rpn_bbox: 0.1226  loss_cls: 0.3382  acc: 86.0352  loss_bbox: 0.4150
2025/05/13 22:52:27 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:26  time: 0.3679  data_time: 0.0042  memory: 4361  loss: 0.9508  loss_rpn_cls: 0.0556  loss_rpn_bbox: 0.1271  loss_cls: 0.3446  acc: 88.7695  loss_bbox: 0.4235
2025/05/13 22:52:42 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:52:44 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:52:45 - mmengine - INFO - bbox_mAP_copypaste: 0.366 0.654 0.371 -1.000 0.218 0.395
2025/05/13 22:52:45 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3660  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3950  data_time: 0.0015  time: 0.0371
2025/05/13 22:53:03 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:53  time: 0.3683  data_time: 0.0079  memory: 4361  loss: 0.9330  loss_rpn_cls: 0.0540  loss_rpn_bbox: 0.1218  loss_cls: 0.3397  acc: 89.0137  loss_bbox: 0.4174
2025/05/13 22:53:22 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:34  time: 0.3672  data_time: 0.0042  memory: 4361  loss: 0.9323  loss_rpn_cls: 0.0555  loss_rpn_bbox: 0.1204  loss_cls: 0.3347  acc: 89.0625  loss_bbox: 0.4218
2025/05/13 22:53:37 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:53:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:53:40 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.650 0.368 -1.000 0.203 0.391
2025/05/13 22:53:40 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3910  data_time: 0.0015  time: 0.0370
2025/05/13 22:53:59 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:01  time: 0.3717  data_time: 0.0079  memory: 4361  loss: 0.9153  loss_rpn_cls: 0.0476  loss_rpn_bbox: 0.1211  loss_cls: 0.3354  acc: 86.2793  loss_bbox: 0.4112
2025/05/13 22:54:17 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3682  data_time: 0.0041  memory: 4361  loss: 0.9321  loss_rpn_cls: 0.0511  loss_rpn_bbox: 0.1248  loss_cls: 0.3413  acc: 88.9160  loss_bbox: 0.4148
2025/05/13 22:54:32 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:54:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:54:35 - mmengine - INFO - bbox_mAP_copypaste: 0.344 0.653 0.320 -1.000 0.203 0.373
2025/05/13 22:54:35 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3440  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3730  data_time: 0.0015  time: 0.0374
2025/05/13 22:54:54 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3727  data_time: 0.0075  memory: 4361  loss: 0.9249  loss_rpn_cls: 0.0528  loss_rpn_bbox: 0.1197  loss_cls: 0.3387  acc: 86.2305  loss_bbox: 0.4136
2025/05/13 22:55:12 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3656  data_time: 0.0041  memory: 4361  loss: 0.9391  loss_rpn_cls: 0.0535  loss_rpn_bbox: 0.1230  loss_cls: 0.3422  acc: 85.8887  loss_bbox: 0.4204
2025/05/13 22:55:27 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:55:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:55:31 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.656 0.354 -1.000 0.213 0.389
2025/05/13 22:55:31 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0372
2025/05/13 22:55:49 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3751  data_time: 0.0077  memory: 4361  loss: 0.9449  loss_rpn_cls: 0.0533  loss_rpn_bbox: 0.1262  loss_cls: 0.3427  acc: 82.9590  loss_bbox: 0.4227
2025/05/13 22:56:08 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3653  data_time: 0.0042  memory: 4361  loss: 0.9260  loss_rpn_cls: 0.0509  loss_rpn_bbox: 0.1213  loss_cls: 0.3397  acc: 89.2578  loss_bbox: 0.4141
2025/05/13 22:56:22 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:56:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:56:26 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.650 0.363 -1.000 0.204 0.389
2025/05/13 22:56:26 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3890  data_time: 0.0016  time: 0.0372
2025/05/13 22:56:45 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3754  data_time: 0.0078  memory: 4361  loss: 0.9325  loss_rpn_cls: 0.0535  loss_rpn_bbox: 0.1257  loss_cls: 0.3334  acc: 88.7207  loss_bbox: 0.4200
2025/05/13 22:56:45 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:57:03 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3707  data_time: 0.0044  memory: 4361  loss: 0.9290  loss_rpn_cls: 0.0521  loss_rpn_bbox: 0.1220  loss_cls: 0.3408  acc: 88.4766  loss_bbox: 0.4141
2025/05/13 22:57:18 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:57:20 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:57:21 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.651 0.341 -1.000 0.199 0.382
2025/05/13 22:57:21 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.3820  data_time: 0.0015  time: 0.0372
2025/05/13 22:57:40 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3701  data_time: 0.0077  memory: 4361  loss: 0.9438  loss_rpn_cls: 0.0523  loss_rpn_bbox: 0.1244  loss_cls: 0.3511  acc: 86.5723  loss_bbox: 0.4159
2025/05/13 22:57:59 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3720  data_time: 0.0041  memory: 4361  loss: 0.9216  loss_rpn_cls: 0.0497  loss_rpn_bbox: 0.1240  loss_cls: 0.3322  acc: 88.4766  loss_bbox: 0.4157
2025/05/13 22:58:13 - mmengine - INFO - Exp name: fasterrcnn_fs_bal_pmd_aff_20250513_223018
2025/05/13 22:58:13 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 22:58:17 - mmengine - INFO - Evaluating bbox...
2025/05/13 22:58:18 - mmengine - INFO - bbox_mAP_copypaste: 0.363 0.653 0.368 -1.000 0.207 0.392
2025/05/13 22:58:18 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3630  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3920  data_time: 0.0015  time: 0.0375
