2025/05/09 23:56:42 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1443931058
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1443931058
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/09 23:56:42 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/09 23:56:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/09 23:56:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/09 23:56:44 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/09 23:56:44 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/09 23:56:44 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/09 23:56:44 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/09 23:56:44 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/09 23:56:44 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/09 23:56:44 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/09 23:57:09 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:34:08  time: 0.4901  data_time: 0.0944  memory: 4362  loss: 2.2548  loss_rpn_cls: 0.5152  loss_rpn_bbox: 0.1718  loss_cls: 0.8998  acc: 80.8105  loss_bbox: 0.6679
2025/05/09 23:57:27 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:24  time: 0.3646  data_time: 0.0024  memory: 4362  loss: 1.2623  loss_rpn_cls: 0.0880  loss_rpn_bbox: 0.1379  loss_cls: 0.5058  acc: 84.6191  loss_bbox: 0.5306
2025/05/09 23:57:42 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/09 23:57:52 - mmengine - INFO - Evaluating bbox...
2025/05/09 23:57:53 - mmengine - INFO - bbox_mAP_copypaste: 0.291 0.505 0.313 -1.000 0.185 0.309
2025/05/09 23:57:53 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.2910  coco/bbox_mAP_50: 0.5050  coco/bbox_mAP_75: 0.3130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1850  coco/bbox_mAP_l: 0.3090  data_time: 0.1713  time: 0.2138
2025/05/09 23:57:54 - mmengine - INFO - The best checkpoint with 0.2910 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/09 23:58:13 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:47  time: 0.3709  data_time: 0.0050  memory: 4362  loss: 0.9982  loss_rpn_cls: 0.0607  loss_rpn_bbox: 0.1207  loss_cls: 0.4006  acc: 86.4204  loss_bbox: 0.4161
2025/05/09 23:58:31 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:04  time: 0.3694  data_time: 0.0024  memory: 4362  loss: 0.9860  loss_rpn_cls: 0.0612  loss_rpn_bbox: 0.1295  loss_cls: 0.3849  acc: 87.4023  loss_bbox: 0.4104
2025/05/09 23:58:47 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/09 23:58:48 - mmengine - INFO - Evaluating bbox...
2025/05/09 23:58:50 - mmengine - INFO - bbox_mAP_copypaste: 0.382 0.649 0.416 -1.000 0.261 0.410
2025/05/09 23:58:50 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3820  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.4160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2610  coco/bbox_mAP_l: 0.4100  data_time: 0.0016  time: 0.0374
2025/05/09 23:58:50 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/09 23:58:51 - mmengine - INFO - The best checkpoint with 0.3820 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/09 23:59:09 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:05  time: 0.3711  data_time: 0.0051  memory: 4362  loss: 0.9250  loss_rpn_cls: 0.0492  loss_rpn_bbox: 0.1218  loss_cls: 0.3535  acc: 88.3301  loss_bbox: 0.4005
2025/05/09 23:59:27 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:34  time: 0.3632  data_time: 0.0025  memory: 4362  loss: 0.9651  loss_rpn_cls: 0.0545  loss_rpn_bbox: 0.1271  loss_cls: 0.3763  acc: 87.4023  loss_bbox: 0.4073
2025/05/09 23:59:42 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/09 23:59:44 - mmengine - INFO - Evaluating bbox...
2025/05/09 23:59:45 - mmengine - INFO - bbox_mAP_copypaste: 0.421 0.717 0.468 -1.000 0.284 0.445
2025/05/09 23:59:45 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.4210  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.4680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2840  coco/bbox_mAP_l: 0.4450  data_time: 0.0017  time: 0.0375
2025/05/09 23:59:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/09 23:59:46 - mmengine - INFO - The best checkpoint with 0.4210 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/10 00:00:05 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:49  time: 0.3768  data_time: 0.0049  memory: 4362  loss: 0.9150  loss_rpn_cls: 0.0492  loss_rpn_bbox: 0.1233  loss_cls: 0.3495  acc: 83.9921  loss_bbox: 0.3930
2025/05/10 00:00:23 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:23  time: 0.3600  data_time: 0.0025  memory: 4362  loss: 0.9110  loss_rpn_cls: 0.0478  loss_rpn_bbox: 0.1268  loss_cls: 0.3409  acc: 83.5938  loss_bbox: 0.3956
2025/05/10 00:00:38 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:00:40 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:00:42 - mmengine - INFO - bbox_mAP_copypaste: 0.431 0.719 0.493 -1.000 0.300 0.457
2025/05/10 00:00:42 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.4310  coco/bbox_mAP_50: 0.7190  coco/bbox_mAP_75: 0.4930  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4570  data_time: 0.0016  time: 0.0399
2025/05/10 00:00:42 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/10 00:00:43 - mmengine - INFO - The best checkpoint with 0.4310 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/10 00:01:02 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:47  time: 0.3819  data_time: 0.0050  memory: 4362  loss: 0.8893  loss_rpn_cls: 0.0449  loss_rpn_bbox: 0.1240  loss_cls: 0.3332  acc: 85.5326  loss_bbox: 0.3873
2025/05/10 00:01:20 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:28  time: 0.3753  data_time: 0.0025  memory: 4362  loss: 0.8709  loss_rpn_cls: 0.0420  loss_rpn_bbox: 0.1149  loss_cls: 0.3362  acc: 89.8438  loss_bbox: 0.3778
2025/05/10 00:01:36 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:01:38 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:01:39 - mmengine - INFO - bbox_mAP_copypaste: 0.477 0.785 0.549 -1.000 0.298 0.505
2025/05/10 00:01:39 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4770  coco/bbox_mAP_50: 0.7850  coco/bbox_mAP_75: 0.5490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.5050  data_time: 0.0017  time: 0.0407
2025/05/10 00:01:39 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/10 00:01:40 - mmengine - INFO - The best checkpoint with 0.4770 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/10 00:01:59 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:52  time: 0.3713  data_time: 0.0051  memory: 4362  loss: 0.8405  loss_rpn_cls: 0.0425  loss_rpn_bbox: 0.1164  loss_cls: 0.3153  acc: 88.1836  loss_bbox: 0.3663
2025/05/10 00:02:17 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:31  time: 0.3688  data_time: 0.0024  memory: 4362  loss: 0.8235  loss_rpn_cls: 0.0375  loss_rpn_bbox: 0.1113  loss_cls: 0.3086  acc: 89.2927  loss_bbox: 0.3660
2025/05/10 00:02:32 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:02:34 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:02:35 - mmengine - INFO - bbox_mAP_copypaste: 0.423 0.688 0.491 -1.000 0.261 0.454
2025/05/10 00:02:35 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4230  coco/bbox_mAP_50: 0.6880  coco/bbox_mAP_75: 0.4910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2610  coco/bbox_mAP_l: 0.4540  data_time: 0.0017  time: 0.0373
2025/05/10 00:02:54 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:54  time: 0.3754  data_time: 0.0050  memory: 4362  loss: 0.7794  loss_rpn_cls: 0.0340  loss_rpn_bbox: 0.1082  loss_cls: 0.2912  acc: 89.5996  loss_bbox: 0.3460
2025/05/10 00:03:12 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:33  time: 0.3658  data_time: 0.0024  memory: 4362  loss: 0.7847  loss_rpn_cls: 0.0320  loss_rpn_bbox: 0.1084  loss_cls: 0.2886  acc: 88.7695  loss_bbox: 0.3558
2025/05/10 00:03:27 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:03:29 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:03:31 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.769 0.534 -1.000 0.301 0.492
2025/05/10 00:03:31 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.7690  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0373
2025/05/10 00:03:35 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:03:49 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:57  time: 0.3730  data_time: 0.0052  memory: 4362  loss: 0.7527  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.1063  loss_cls: 0.2767  acc: 84.9121  loss_bbox: 0.3412
2025/05/10 00:04:08 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:37  time: 0.3667  data_time: 0.0024  memory: 4362  loss: 0.7722  loss_rpn_cls: 0.0316  loss_rpn_bbox: 0.1064  loss_cls: 0.2828  acc: 88.2324  loss_bbox: 0.3514
2025/05/10 00:04:23 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:04:25 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:04:26 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.754 0.519 -1.000 0.284 0.484
2025/05/10 00:04:26 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.5190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2840  coco/bbox_mAP_l: 0.4840  data_time: 0.0016  time: 0.0372
2025/05/10 00:04:45 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:19:03  time: 0.3737  data_time: 0.0050  memory: 4362  loss: 0.7066  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.0963  loss_cls: 0.2527  acc: 88.8184  loss_bbox: 0.3291
2025/05/10 00:05:03 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:43  time: 0.3697  data_time: 0.0024  memory: 4362  loss: 0.6511  loss_rpn_cls: 0.0233  loss_rpn_bbox: 0.0898  loss_cls: 0.2297  acc: 90.7227  loss_bbox: 0.3083
2025/05/10 00:05:18 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:05:20 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:05:21 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.742 0.557 -1.000 0.307 0.498
2025/05/10 00:05:21 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4980  data_time: 0.0015  time: 0.0383
2025/05/10 00:05:40 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:18:08  time: 0.3734  data_time: 0.0050  memory: 4362  loss: 0.6640  loss_rpn_cls: 0.0234  loss_rpn_bbox: 0.0919  loss_cls: 0.2348  acc: 90.5762  loss_bbox: 0.3139
2025/05/10 00:05:59 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:49  time: 0.3702  data_time: 0.0024  memory: 4362  loss: 0.6489  loss_rpn_cls: 0.0211  loss_rpn_bbox: 0.0896  loss_cls: 0.2306  acc: 87.0605  loss_bbox: 0.3074
2025/05/10 00:06:14 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:06:16 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:06:17 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.744 0.546 -1.000 0.310 0.496
2025/05/10 00:06:17 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4960  data_time: 0.0015  time: 0.0373
2025/05/10 00:06:36 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:14  time: 0.3724  data_time: 0.0049  memory: 4362  loss: 0.6292  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0881  loss_cls: 0.2226  acc: 90.6250  loss_bbox: 0.2995
2025/05/10 00:06:54 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:55  time: 0.3687  data_time: 0.0024  memory: 4362  loss: 0.6412  loss_rpn_cls: 0.0206  loss_rpn_bbox: 0.0880  loss_cls: 0.2301  acc: 89.5508  loss_bbox: 0.3025
2025/05/10 00:07:09 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:07:11 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:07:12 - mmengine - INFO - bbox_mAP_copypaste: 0.471 0.748 0.547 -1.000 0.310 0.499
2025/05/10 00:07:12 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4710  coco/bbox_mAP_50: 0.7480  coco/bbox_mAP_75: 0.5470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3100  coco/bbox_mAP_l: 0.4990  data_time: 0.0016  time: 0.0370
2025/05/10 00:07:31 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:21  time: 0.3705  data_time: 0.0051  memory: 4362  loss: 0.6179  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0852  loss_cls: 0.2173  acc: 89.0137  loss_bbox: 0.2966
2025/05/10 00:07:50 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:16:02  time: 0.3763  data_time: 0.0024  memory: 4362  loss: 0.6419  loss_rpn_cls: 0.0214  loss_rpn_bbox: 0.0883  loss_cls: 0.2299  acc: 90.7715  loss_bbox: 0.3022
2025/05/10 00:08:05 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:08:07 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:08:08 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.731 0.541 -1.000 0.325 0.489
2025/05/10 00:08:08 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3250  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0373
2025/05/10 00:08:27 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:28  time: 0.3719  data_time: 0.0049  memory: 4362  loss: 0.6179  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0870  loss_cls: 0.2140  acc: 91.0645  loss_bbox: 0.2967
2025/05/10 00:08:46 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:11  time: 0.3935  data_time: 0.0026  memory: 4362  loss: 0.6343  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0874  loss_cls: 0.2259  acc: 89.4531  loss_bbox: 0.3008
2025/05/10 00:09:02 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:09:04 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:09:05 - mmengine - INFO - bbox_mAP_copypaste: 0.466 0.736 0.548 -1.000 0.323 0.493
2025/05/10 00:09:05 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4660  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.4930  data_time: 0.0017  time: 0.0375
2025/05/10 00:09:27 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:41  time: 0.4252  data_time: 0.0052  memory: 4362  loss: 0.6287  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0860  loss_cls: 0.2254  acc: 91.3574  loss_bbox: 0.2974
2025/05/10 00:09:45 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:22  time: 0.3753  data_time: 0.0024  memory: 4362  loss: 0.6228  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0864  loss_cls: 0.2160  acc: 91.8457  loss_bbox: 0.3011
2025/05/10 00:10:01 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:10:03 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:10:04 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.735 0.546 -1.000 0.322 0.492
2025/05/10 00:10:04 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3220  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0376
2025/05/10 00:10:14 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:10:24 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:48  time: 0.3922  data_time: 0.0054  memory: 4362  loss: 0.6141  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0853  loss_cls: 0.2146  acc: 91.4551  loss_bbox: 0.2951
2025/05/10 00:10:45 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:32  time: 0.4193  data_time: 0.0026  memory: 4362  loss: 0.6246  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0859  loss_cls: 0.2212  acc: 92.3340  loss_bbox: 0.2975
2025/05/10 00:11:04 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:11:06 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:11:07 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.731 0.536 -1.000 0.320 0.487
2025/05/10 00:11:07 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3200  coco/bbox_mAP_l: 0.4870  data_time: 0.0018  time: 0.0455
2025/05/10 00:11:30 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:13:04  time: 0.4497  data_time: 0.0051  memory: 4362  loss: 0.6248  loss_rpn_cls: 0.0211  loss_rpn_bbox: 0.0873  loss_cls: 0.2192  acc: 90.0879  loss_bbox: 0.2972
2025/05/10 00:11:52 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:48  time: 0.4467  data_time: 0.0026  memory: 4362  loss: 0.6174  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0872  loss_cls: 0.2162  acc: 89.7949  loss_bbox: 0.2953
2025/05/10 00:12:10 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:12:12 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:12:14 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.732 0.539 -1.000 0.317 0.491
2025/05/10 00:12:14 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7320  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4910  data_time: 0.0015  time: 0.0439
2025/05/10 00:12:37 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:12:19  time: 0.4530  data_time: 0.0052  memory: 4362  loss: 0.6401  loss_rpn_cls: 0.0225  loss_rpn_bbox: 0.0895  loss_cls: 0.2253  acc: 91.5039  loss_bbox: 0.3027
2025/05/10 00:12:59 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:12:02  time: 0.4432  data_time: 0.0024  memory: 4362  loss: 0.6087  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0842  loss_cls: 0.2135  acc: 92.9688  loss_bbox: 0.2941
2025/05/10 00:13:15 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:13:16 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:13:18 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.726 0.536 -1.000 0.317 0.486
2025/05/10 00:13:18 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3170  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0376
2025/05/10 00:13:36 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:26  time: 0.3719  data_time: 0.0051  memory: 4362  loss: 0.6186  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0868  loss_cls: 0.2177  acc: 90.8203  loss_bbox: 0.2953
2025/05/10 00:13:55 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:11:07  time: 0.3747  data_time: 0.0024  memory: 4362  loss: 0.6146  loss_rpn_cls: 0.0189  loss_rpn_bbox: 0.0853  loss_cls: 0.2185  acc: 90.1855  loss_bbox: 0.2919
2025/05/10 00:14:10 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:14:12 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:14:14 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.727 0.536 -1.000 0.320 0.488
2025/05/10 00:14:14 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3200  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0369
2025/05/10 00:14:33 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:31  time: 0.3802  data_time: 0.0050  memory: 4362  loss: 0.6214  loss_rpn_cls: 0.0189  loss_rpn_bbox: 0.0861  loss_cls: 0.2216  acc: 88.2324  loss_bbox: 0.2948
2025/05/10 00:14:51 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:10:12  time: 0.3732  data_time: 0.0024  memory: 4362  loss: 0.6182  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0867  loss_cls: 0.2154  acc: 90.5273  loss_bbox: 0.2962
2025/05/10 00:15:06 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:15:08 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:15:10 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.731 0.539 -1.000 0.318 0.489
2025/05/10 00:15:10 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4890  data_time: 0.0018  time: 0.0395
2025/05/10 00:15:29 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:36  time: 0.3797  data_time: 0.0052  memory: 4362  loss: 0.6208  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0865  loss_cls: 0.2175  acc: 90.3809  loss_bbox: 0.2969
2025/05/10 00:15:49 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:09:17  time: 0.4030  data_time: 0.0028  memory: 4362  loss: 0.6306  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0874  loss_cls: 0.2242  acc: 88.6230  loss_bbox: 0.2980
2025/05/10 00:16:04 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:16:06 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:16:08 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.731 0.536 -1.000 0.319 0.490
2025/05/10 00:16:08 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3190  coco/bbox_mAP_l: 0.4900  data_time: 0.0016  time: 0.0389
2025/05/10 00:16:27 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:42  time: 0.3841  data_time: 0.0052  memory: 4362  loss: 0.6127  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0850  loss_cls: 0.2151  acc: 91.8945  loss_bbox: 0.2918
2025/05/10 00:16:46 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:23  time: 0.3771  data_time: 0.0024  memory: 4362  loss: 0.6299  loss_rpn_cls: 0.0183  loss_rpn_bbox: 0.0876  loss_cls: 0.2269  acc: 87.3535  loss_bbox: 0.2971
2025/05/10 00:17:01 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:17:03 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:17:04 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.731 0.540 -1.000 0.318 0.488
2025/05/10 00:17:04 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0399
2025/05/10 00:17:19 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:17:23 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:47  time: 0.3749  data_time: 0.0051  memory: 4362  loss: 0.6073  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0845  loss_cls: 0.2131  acc: 92.8711  loss_bbox: 0.2918
2025/05/10 00:17:42 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:28  time: 0.3773  data_time: 0.0027  memory: 4362  loss: 0.6241  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0874  loss_cls: 0.2215  acc: 91.2109  loss_bbox: 0.2952
2025/05/10 00:17:57 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:17:59 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:18:01 - mmengine - INFO - bbox_mAP_copypaste: 0.463 0.732 0.541 -1.000 0.318 0.491
2025/05/10 00:18:01 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4630  coco/bbox_mAP_50: 0.7320  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3180  coco/bbox_mAP_l: 0.4910  data_time: 0.0017  time: 0.0377
2025/05/10 00:18:20 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:53  time: 0.3788  data_time: 0.0050  memory: 4362  loss: 0.6315  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0856  loss_cls: 0.2272  acc: 92.5293  loss_bbox: 0.2977
2025/05/10 00:18:38 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:34  time: 0.3741  data_time: 0.0024  memory: 4362  loss: 0.6143  loss_rpn_cls: 0.0186  loss_rpn_bbox: 0.0866  loss_cls: 0.2135  acc: 91.8457  loss_bbox: 0.2956
2025/05/10 00:18:54 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:18:55 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:18:57 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.733 0.544 -1.000 0.316 0.490
2025/05/10 00:18:57 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0373
2025/05/10 00:19:16 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:59  time: 0.3824  data_time: 0.0051  memory: 4362  loss: 0.6280  loss_rpn_cls: 0.0215  loss_rpn_bbox: 0.0871  loss_cls: 0.2232  acc: 92.8223  loss_bbox: 0.2962
2025/05/10 00:19:35 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:39  time: 0.3747  data_time: 0.0025  memory: 4362  loss: 0.6072  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0857  loss_cls: 0.2113  acc: 92.2852  loss_bbox: 0.2912
2025/05/10 00:19:50 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:19:52 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:19:53 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.726 0.536 -1.000 0.316 0.486
2025/05/10 00:19:53 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3160  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0375
2025/05/10 00:20:12 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:05:04  time: 0.3754  data_time: 0.0051  memory: 4362  loss: 0.6209  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0854  loss_cls: 0.2234  acc: 88.3301  loss_bbox: 0.2936
2025/05/10 00:20:31 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:45  time: 0.3772  data_time: 0.0025  memory: 4362  loss: 0.6235  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0882  loss_cls: 0.2200  acc: 91.4551  loss_bbox: 0.2960
2025/05/10 00:20:46 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:20:48 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:20:49 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.729 0.530 -1.000 0.301 0.487
2025/05/10 00:20:49 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4870  data_time: 0.0018  time: 0.0401
2025/05/10 00:21:08 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:10  time: 0.3754  data_time: 0.0050  memory: 4362  loss: 0.6118  loss_rpn_cls: 0.0171  loss_rpn_bbox: 0.0853  loss_cls: 0.2152  acc: 91.6504  loss_bbox: 0.2943
2025/05/10 00:21:27 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:51  time: 0.3809  data_time: 0.0025  memory: 4362  loss: 0.6331  loss_rpn_cls: 0.0174  loss_rpn_bbox: 0.0885  loss_cls: 0.2289  acc: 91.8457  loss_bbox: 0.2982
2025/05/10 00:21:42 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:21:44 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:21:45 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.729 0.534 -1.000 0.299 0.487
2025/05/10 00:21:45 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2990  coco/bbox_mAP_l: 0.4870  data_time: 0.0018  time: 0.0375
2025/05/10 00:22:04 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:16  time: 0.3797  data_time: 0.0051  memory: 4362  loss: 0.6098  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0861  loss_cls: 0.2143  acc: 93.7500  loss_bbox: 0.2907
2025/05/10 00:22:23 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:57  time: 0.3742  data_time: 0.0025  memory: 4362  loss: 0.6246  loss_rpn_cls: 0.0196  loss_rpn_bbox: 0.0856  loss_cls: 0.2213  acc: 93.1641  loss_bbox: 0.2981
2025/05/10 00:22:38 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:22:40 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:22:42 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.731 0.536 -1.000 0.304 0.487
2025/05/10 00:22:42 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4870  data_time: 0.0016  time: 0.0371
2025/05/10 00:23:00 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:22  time: 0.3748  data_time: 0.0051  memory: 4362  loss: 0.6033  loss_rpn_cls: 0.0182  loss_rpn_bbox: 0.0852  loss_cls: 0.2108  acc: 89.0137  loss_bbox: 0.2891
2025/05/10 00:23:19 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:03  time: 0.3747  data_time: 0.0024  memory: 4362  loss: 0.6200  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0854  loss_cls: 0.2186  acc: 89.5508  loss_bbox: 0.2960
2025/05/10 00:23:35 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:23:36 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:23:38 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.729 0.537 -1.000 0.300 0.489
2025/05/10 00:23:38 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4890  data_time: 0.0018  time: 0.0375
2025/05/10 00:23:57 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:28  time: 0.3773  data_time: 0.0050  memory: 4362  loss: 0.6274  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0874  loss_cls: 0.2211  acc: 92.6758  loss_bbox: 0.2988
2025/05/10 00:23:57 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:24:15 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:09  time: 0.3720  data_time: 0.0025  memory: 4362  loss: 0.6079  loss_rpn_cls: 0.0177  loss_rpn_bbox: 0.0851  loss_cls: 0.2143  acc: 89.8926  loss_bbox: 0.2908
2025/05/10 00:24:31 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:24:32 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:24:34 - mmengine - INFO - bbox_mAP_copypaste: 0.462 0.733 0.540 -1.000 0.301 0.489
2025/05/10 00:24:34 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4620  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4890  data_time: 0.0016  time: 0.0393
2025/05/10 00:24:53 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3739  data_time: 0.0049  memory: 4362  loss: 0.6023  loss_rpn_cls: 0.0170  loss_rpn_bbox: 0.0845  loss_cls: 0.2113  acc: 91.2109  loss_bbox: 0.2895
2025/05/10 00:25:11 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3731  data_time: 0.0024  memory: 4362  loss: 0.6186  loss_rpn_cls: 0.0192  loss_rpn_bbox: 0.0852  loss_cls: 0.2206  acc: 91.4551  loss_bbox: 0.2937
2025/05/10 00:25:27 - mmengine - INFO - Exp name: fasterrcnn_pt_df_20250509_235638
2025/05/10 00:25:27 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/10 00:25:30 - mmengine - INFO - Evaluating bbox...
2025/05/10 00:25:32 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.730 0.536 -1.000 0.302 0.488
2025/05/10 00:25:32 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4880  data_time: 0.0014  time: 0.0404
