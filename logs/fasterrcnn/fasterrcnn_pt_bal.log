2025/05/11 19:26:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1153625854
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1153625854
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 19:26:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/11 19:26:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 19:26:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 19:26:39 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/11 19:26:39 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/11 19:26:39 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/11 19:26:39 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/11 19:26:39 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 19:26:39 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 19:26:39 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/11 19:27:02 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:14  time: 0.4629  data_time: 0.0893  memory: 4363  loss: 2.2999  loss_rpn_cls: 0.5423  loss_rpn_bbox: 0.1693  loss_cls: 0.9128  acc: 82.1289  loss_bbox: 0.6755
2025/05/11 19:27:20 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:22  time: 0.3616  data_time: 0.0023  memory: 4363  loss: 1.2733  loss_rpn_cls: 0.0904  loss_rpn_bbox: 0.1397  loss_cls: 0.5161  acc: 87.6404  loss_bbox: 0.5271
2025/05/11 19:27:35 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:27:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:27:46 - mmengine - INFO - bbox_mAP_copypaste: 0.288 0.490 0.317 -1.000 0.173 0.313
2025/05/11 19:27:46 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.2880  coco/bbox_mAP_50: 0.4900  coco/bbox_mAP_75: 0.3170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1730  coco/bbox_mAP_l: 0.3130  data_time: 0.1647  time: 0.2057
2025/05/11 19:27:47 - mmengine - INFO - The best checkpoint with 0.2880 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 19:28:06 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:08  time: 0.3669  data_time: 0.0048  memory: 4363  loss: 1.0106  loss_rpn_cls: 0.0604  loss_rpn_bbox: 0.1277  loss_cls: 0.3968  acc: 85.6934  loss_bbox: 0.4258
2025/05/11 19:28:24 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:29  time: 0.3646  data_time: 0.0023  memory: 4363  loss: 0.9820  loss_rpn_cls: 0.0602  loss_rpn_bbox: 0.1265  loss_cls: 0.3836  acc: 82.8613  loss_bbox: 0.4116
2025/05/11 19:28:38 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:28:40 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:28:42 - mmengine - INFO - bbox_mAP_copypaste: 0.373 0.650 0.388 -1.000 0.240 0.404
2025/05/11 19:28:42 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3730  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2400  coco/bbox_mAP_l: 0.4040  data_time: 0.0015  time: 0.0369
2025/05/11 19:28:42 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 19:28:43 - mmengine - INFO - The best checkpoint with 0.3730 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 19:29:01 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:32  time: 0.3665  data_time: 0.0052  memory: 4363  loss: 0.9359  loss_rpn_cls: 0.0527  loss_rpn_bbox: 0.1217  loss_cls: 0.3623  acc: 90.1855  loss_bbox: 0.3991
2025/05/11 19:29:19 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:06  time: 0.3636  data_time: 0.0023  memory: 4363  loss: 0.9756  loss_rpn_cls: 0.0532  loss_rpn_bbox: 0.1303  loss_cls: 0.3853  acc: 86.4258  loss_bbox: 0.4069
2025/05/11 19:29:34 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:29:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:29:37 - mmengine - INFO - bbox_mAP_copypaste: 0.435 0.729 0.490 -1.000 0.252 0.466
2025/05/11 19:29:37 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.4350  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.4900  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.4660  data_time: 0.0016  time: 0.0374
2025/05/11 19:29:37 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 19:29:38 - mmengine - INFO - The best checkpoint with 0.4350 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 19:29:57 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:24  time: 0.3678  data_time: 0.0049  memory: 4363  loss: 0.9240  loss_rpn_cls: 0.0454  loss_rpn_bbox: 0.1225  loss_cls: 0.3539  acc: 85.4492  loss_bbox: 0.4022
2025/05/11 19:30:15 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:02  time: 0.3632  data_time: 0.0024  memory: 4363  loss: 0.9233  loss_rpn_cls: 0.0498  loss_rpn_bbox: 0.1211  loss_cls: 0.3510  acc: 85.4004  loss_bbox: 0.4015
2025/05/11 19:30:29 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:30:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:30:33 - mmengine - INFO - bbox_mAP_copypaste: 0.385 0.638 0.438 -1.000 0.255 0.408
2025/05/11 19:30:33 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3850  coco/bbox_mAP_50: 0.6380  coco/bbox_mAP_75: 0.4380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2550  coco/bbox_mAP_l: 0.4080  data_time: 0.0017  time: 0.0378
2025/05/11 19:30:51 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:23  time: 0.3654  data_time: 0.0048  memory: 4363  loss: 0.8268  loss_rpn_cls: 0.0387  loss_rpn_bbox: 0.1116  loss_cls: 0.3087  acc: 88.1836  loss_bbox: 0.3678
2025/05/11 19:31:09 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:03  time: 0.3668  data_time: 0.0023  memory: 4363  loss: 0.8156  loss_rpn_cls: 0.0379  loss_rpn_bbox: 0.1117  loss_cls: 0.3043  acc: 88.4277  loss_bbox: 0.3618
2025/05/11 19:31:24 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:31:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:31:28 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.742 0.531 -1.000 0.284 0.488
2025/05/11 19:31:28 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7420  coco/bbox_mAP_75: 0.5310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2840  coco/bbox_mAP_l: 0.4880  data_time: 0.0016  time: 0.0371
2025/05/11 19:31:28 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 19:31:28 - mmengine - INFO - The best checkpoint with 0.4560 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 19:31:47 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:27  time: 0.3679  data_time: 0.0049  memory: 4363  loss: 0.7727  loss_rpn_cls: 0.0315  loss_rpn_bbox: 0.1080  loss_cls: 0.2874  acc: 88.8184  loss_bbox: 0.3458
2025/05/11 19:32:05 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:07  time: 0.3638  data_time: 0.0024  memory: 4363  loss: 0.7824  loss_rpn_cls: 0.0297  loss_rpn_bbox: 0.1110  loss_cls: 0.2937  acc: 88.4500  loss_bbox: 0.3480
2025/05/11 19:32:20 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:32:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:32:23 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.746 0.491 -1.000 0.267 0.476
2025/05/11 19:32:23 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.4910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2670  coco/bbox_mAP_l: 0.4760  data_time: 0.0016  time: 0.0374
2025/05/11 19:32:42 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:33  time: 0.3720  data_time: 0.0047  memory: 4363  loss: 0.7830  loss_rpn_cls: 0.0325  loss_rpn_bbox: 0.1086  loss_cls: 0.2931  acc: 93.1641  loss_bbox: 0.3489
2025/05/11 19:33:00 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:13  time: 0.3626  data_time: 0.0024  memory: 4363  loss: 0.7301  loss_rpn_cls: 0.0253  loss_rpn_bbox: 0.1049  loss_cls: 0.2700  acc: 90.0879  loss_bbox: 0.3299
2025/05/11 19:33:15 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:33:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:33:18 - mmengine - INFO - bbox_mAP_copypaste: 0.469 0.766 0.541 -1.000 0.277 0.502
2025/05/11 19:33:18 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4690  coco/bbox_mAP_50: 0.7660  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2770  coco/bbox_mAP_l: 0.5020  data_time: 0.0015  time: 0.0370
2025/05/11 19:33:18 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 19:33:19 - mmengine - INFO - The best checkpoint with 0.4690 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 19:33:24 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:33:38 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:40  time: 0.3759  data_time: 0.0048  memory: 4363  loss: 0.6810  loss_rpn_cls: 0.0221  loss_rpn_bbox: 0.0960  loss_cls: 0.2440  acc: 86.6211  loss_bbox: 0.3189
2025/05/11 19:33:56 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:21  time: 0.3660  data_time: 0.0023  memory: 4363  loss: 0.7045  loss_rpn_cls: 0.0235  loss_rpn_bbox: 0.0982  loss_cls: 0.2579  acc: 90.0879  loss_bbox: 0.3249
2025/05/11 19:34:11 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:34:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:34:14 - mmengine - INFO - bbox_mAP_copypaste: 0.464 0.767 0.531 -1.000 0.295 0.496
2025/05/11 19:34:14 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4640  coco/bbox_mAP_50: 0.7670  coco/bbox_mAP_75: 0.5310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4960  data_time: 0.0015  time: 0.0372
2025/05/11 19:34:33 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:46  time: 0.3710  data_time: 0.0049  memory: 4363  loss: 0.6109  loss_rpn_cls: 0.0175  loss_rpn_bbox: 0.0861  loss_cls: 0.2177  acc: 91.3086  loss_bbox: 0.2896
2025/05/11 19:34:51 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:27  time: 0.3626  data_time: 0.0024  memory: 4363  loss: 0.5905  loss_rpn_cls: 0.0160  loss_rpn_bbox: 0.0829  loss_cls: 0.2097  acc: 91.9922  loss_bbox: 0.2818
2025/05/11 19:35:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:35:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:35:09 - mmengine - INFO - bbox_mAP_copypaste: 0.459 0.730 0.539 -1.000 0.301 0.490
2025/05/11 19:35:09 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4590  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4900  data_time: 0.0017  time: 0.0369
2025/05/11 19:35:27 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:53  time: 0.3691  data_time: 0.0049  memory: 4363  loss: 0.5665  loss_rpn_cls: 0.0145  loss_rpn_bbox: 0.0812  loss_cls: 0.1977  acc: 91.7969  loss_bbox: 0.2731
2025/05/11 19:35:46 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:34  time: 0.3663  data_time: 0.0024  memory: 4363  loss: 0.5519  loss_rpn_cls: 0.0129  loss_rpn_bbox: 0.0795  loss_cls: 0.1916  acc: 93.9941  loss_bbox: 0.2679
2025/05/11 19:36:01 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:36:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:36:04 - mmengine - INFO - bbox_mAP_copypaste: 0.468 0.750 0.546 -1.000 0.307 0.499
2025/05/11 19:36:04 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4680  coco/bbox_mAP_50: 0.7500  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4990  data_time: 0.0015  time: 0.0367
2025/05/11 19:36:22 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:01  time: 0.3667  data_time: 0.0049  memory: 4363  loss: 0.5516  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0794  loss_cls: 0.1935  acc: 94.0918  loss_bbox: 0.2669
2025/05/11 19:36:41 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:42  time: 0.3701  data_time: 0.0024  memory: 4363  loss: 0.5528  loss_rpn_cls: 0.0130  loss_rpn_bbox: 0.0800  loss_cls: 0.1935  acc: 93.4082  loss_bbox: 0.2664
2025/05/11 19:36:56 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:36:58 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:36:59 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.740 0.532 -1.000 0.306 0.492
2025/05/11 19:36:59 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7400  coco/bbox_mAP_75: 0.5320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4920  data_time: 0.0016  time: 0.0368
2025/05/11 19:37:18 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:09  time: 0.3736  data_time: 0.0049  memory: 4363  loss: 0.5433  loss_rpn_cls: 0.0127  loss_rpn_bbox: 0.0789  loss_cls: 0.1872  acc: 90.9668  loss_bbox: 0.2645
2025/05/11 19:37:36 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:50  time: 0.3655  data_time: 0.0024  memory: 4363  loss: 0.5285  loss_rpn_cls: 0.0115  loss_rpn_bbox: 0.0770  loss_cls: 0.1822  acc: 93.7988  loss_bbox: 0.2579
2025/05/11 19:37:51 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:37:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:37:54 - mmengine - INFO - bbox_mAP_copypaste: 0.450 0.721 0.524 -1.000 0.305 0.481
2025/05/11 19:37:54 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4500  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4810  data_time: 0.0017  time: 0.0369
2025/05/11 19:38:12 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:16  time: 0.3665  data_time: 0.0048  memory: 4363  loss: 0.5216  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0760  loss_cls: 0.1783  acc: 89.3066  loss_bbox: 0.2562
2025/05/11 19:38:31 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:57  time: 0.3670  data_time: 0.0024  memory: 4363  loss: 0.5356  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0763  loss_cls: 0.1870  acc: 93.8477  loss_bbox: 0.2606
2025/05/11 19:38:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:38:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:38:49 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.722 0.517 -1.000 0.305 0.482
2025/05/11 19:38:49 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4820  data_time: 0.0015  time: 0.0366
2025/05/11 19:39:07 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:24  time: 0.3681  data_time: 0.0049  memory: 4363  loss: 0.5280  loss_rpn_cls: 0.0109  loss_rpn_bbox: 0.0775  loss_cls: 0.1811  acc: 91.7969  loss_bbox: 0.2586
2025/05/11 19:39:26 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:05  time: 0.3650  data_time: 0.0024  memory: 4363  loss: 0.5237  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0753  loss_cls: 0.1797  acc: 91.5527  loss_bbox: 0.2570
2025/05/11 19:39:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:39:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:39:44 - mmengine - INFO - bbox_mAP_copypaste: 0.450 0.720 0.518 -1.000 0.306 0.480
2025/05/11 19:39:44 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4500  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4800  data_time: 0.0015  time: 0.0366
2025/05/11 19:39:54 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:40:02 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:32  time: 0.3713  data_time: 0.0049  memory: 4363  loss: 0.5338  loss_rpn_cls: 0.0114  loss_rpn_bbox: 0.0778  loss_cls: 0.1848  acc: 93.0664  loss_bbox: 0.2599
2025/05/11 19:40:21 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:13  time: 0.3650  data_time: 0.0024  memory: 4363  loss: 0.5223  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0756  loss_cls: 0.1792  acc: 96.2891  loss_bbox: 0.2556
2025/05/11 19:40:36 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:40:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:40:39 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.729 0.524 -1.000 0.306 0.485
2025/05/11 19:40:39 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0367
2025/05/11 19:40:57 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:40  time: 0.3691  data_time: 0.0048  memory: 4363  loss: 0.5210  loss_rpn_cls: 0.0112  loss_rpn_bbox: 0.0761  loss_cls: 0.1789  acc: 94.1406  loss_bbox: 0.2548
2025/05/11 19:41:16 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:21  time: 0.3651  data_time: 0.0024  memory: 4363  loss: 0.5195  loss_rpn_cls: 0.0106  loss_rpn_bbox: 0.0755  loss_cls: 0.1789  acc: 91.9434  loss_bbox: 0.2545
2025/05/11 19:41:31 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:41:33 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:41:34 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.727 0.528 -1.000 0.304 0.483
2025/05/11 19:41:34 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4830  data_time: 0.0017  time: 0.0368
2025/05/11 19:41:52 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:48  time: 0.3714  data_time: 0.0049  memory: 4363  loss: 0.5285  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0769  loss_cls: 0.1823  acc: 94.1406  loss_bbox: 0.2594
2025/05/11 19:42:11 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:29  time: 0.3669  data_time: 0.0024  memory: 4363  loss: 0.5193  loss_rpn_cls: 0.0117  loss_rpn_bbox: 0.0760  loss_cls: 0.1753  acc: 93.9941  loss_bbox: 0.2563
2025/05/11 19:42:26 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:42:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:42:29 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.723 0.521 -1.000 0.307 0.480
2025/05/11 19:42:29 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4800  data_time: 0.0015  time: 0.0366
2025/05/11 19:42:47 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:56  time: 0.3658  data_time: 0.0048  memory: 4363  loss: 0.5100  loss_rpn_cls: 0.0103  loss_rpn_bbox: 0.0743  loss_cls: 0.1750  acc: 93.6523  loss_bbox: 0.2503
2025/05/11 19:43:06 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:37  time: 0.3703  data_time: 0.0023  memory: 4363  loss: 0.5224  loss_rpn_cls: 0.0109  loss_rpn_bbox: 0.0771  loss_cls: 0.1744  acc: 92.9688  loss_bbox: 0.2600
2025/05/11 19:43:21 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:43:23 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:43:24 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.722 0.525 -1.000 0.307 0.482
2025/05/11 19:43:24 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0368
2025/05/11 19:43:42 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:04  time: 0.3688  data_time: 0.0048  memory: 4363  loss: 0.5195  loss_rpn_cls: 0.0123  loss_rpn_bbox: 0.0760  loss_cls: 0.1767  acc: 91.9922  loss_bbox: 0.2545
2025/05/11 19:44:01 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:45  time: 0.3697  data_time: 0.0025  memory: 4363  loss: 0.5228  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0769  loss_cls: 0.1789  acc: 93.8965  loss_bbox: 0.2562
2025/05/11 19:44:16 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:44:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:44:19 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.724 0.523 -1.000 0.308 0.480
2025/05/11 19:44:19 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4800  data_time: 0.0014  time: 0.0367
2025/05/11 19:44:37 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:12  time: 0.3668  data_time: 0.0049  memory: 4363  loss: 0.5214  loss_rpn_cls: 0.0111  loss_rpn_bbox: 0.0752  loss_cls: 0.1797  acc: 92.6758  loss_bbox: 0.2555
2025/05/11 19:44:56 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:53  time: 0.3700  data_time: 0.0024  memory: 4363  loss: 0.5193  loss_rpn_cls: 0.0119  loss_rpn_bbox: 0.0769  loss_cls: 0.1737  acc: 93.9941  loss_bbox: 0.2568
2025/05/11 19:45:11 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:45:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:45:14 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.726 0.519 -1.000 0.308 0.483
2025/05/11 19:45:14 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0367
2025/05/11 19:45:32 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:20  time: 0.3666  data_time: 0.0049  memory: 4363  loss: 0.5096  loss_rpn_cls: 0.0101  loss_rpn_bbox: 0.0743  loss_cls: 0.1748  acc: 94.3359  loss_bbox: 0.2504
2025/05/11 19:45:51 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:01  time: 0.3661  data_time: 0.0023  memory: 4363  loss: 0.5197  loss_rpn_cls: 0.0111  loss_rpn_bbox: 0.0760  loss_cls: 0.1775  acc: 93.5547  loss_bbox: 0.2551
2025/05/11 19:46:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:46:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:46:09 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.724 0.516 -1.000 0.306 0.481
2025/05/11 19:46:09 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4810  data_time: 0.0015  time: 0.0366
2025/05/11 19:46:23 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:46:27 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:28  time: 0.3690  data_time: 0.0049  memory: 4363  loss: 0.5218  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0760  loss_cls: 0.1806  acc: 93.0176  loss_bbox: 0.2544
2025/05/11 19:46:46 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:10  time: 0.3661  data_time: 0.0023  memory: 4363  loss: 0.5125  loss_rpn_cls: 0.0127  loss_rpn_bbox: 0.0747  loss_cls: 0.1748  acc: 91.6992  loss_bbox: 0.2504
2025/05/11 19:47:01 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:47:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:47:04 - mmengine - INFO - bbox_mAP_copypaste: 0.449 0.721 0.515 -1.000 0.305 0.479
2025/05/11 19:47:04 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4490  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4790  data_time: 0.0016  time: 0.0379
2025/05/11 19:47:22 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:36  time: 0.3703  data_time: 0.0048  memory: 4363  loss: 0.5319  loss_rpn_cls: 0.0107  loss_rpn_bbox: 0.0771  loss_cls: 0.1834  acc: 93.0664  loss_bbox: 0.2607
2025/05/11 19:47:41 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:18  time: 0.3677  data_time: 0.0023  memory: 4363  loss: 0.5181  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0750  loss_cls: 0.1765  acc: 93.6523  loss_bbox: 0.2553
2025/05/11 19:47:56 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:47:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:47:59 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.714 0.511 -1.000 0.304 0.475
2025/05/11 19:47:59 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4750  data_time: 0.0016  time: 0.0371
2025/05/11 19:48:17 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:44  time: 0.3739  data_time: 0.0048  memory: 4363  loss: 0.5181  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0765  loss_cls: 0.1736  acc: 93.9941  loss_bbox: 0.2567
2025/05/11 19:48:36 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:26  time: 0.3665  data_time: 0.0023  memory: 4363  loss: 0.5159  loss_rpn_cls: 0.0103  loss_rpn_bbox: 0.0758  loss_cls: 0.1750  acc: 92.5944  loss_bbox: 0.2548
2025/05/11 19:48:51 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:48:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:48:54 - mmengine - INFO - bbox_mAP_copypaste: 0.445 0.716 0.508 -1.000 0.303 0.476
2025/05/11 19:48:54 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4450  coco/bbox_mAP_50: 0.7160  coco/bbox_mAP_75: 0.5080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4760  data_time: 0.0016  time: 0.0371
2025/05/11 19:49:12 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:52  time: 0.3706  data_time: 0.0048  memory: 4363  loss: 0.5124  loss_rpn_cls: 0.0111  loss_rpn_bbox: 0.0762  loss_cls: 0.1727  acc: 93.0664  loss_bbox: 0.2524
2025/05/11 19:49:31 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:34  time: 0.3639  data_time: 0.0023  memory: 4363  loss: 0.5077  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0733  loss_cls: 0.1729  acc: 91.5527  loss_bbox: 0.2505
2025/05/11 19:49:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:49:47 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:49:49 - mmengine - INFO - bbox_mAP_copypaste: 0.447 0.717 0.513 -1.000 0.307 0.477
2025/05/11 19:49:49 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4470  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.5130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4770  data_time: 0.0015  time: 0.0370
2025/05/11 19:50:07 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:00  time: 0.3646  data_time: 0.0048  memory: 4363  loss: 0.4970  loss_rpn_cls: 0.0088  loss_rpn_bbox: 0.0727  loss_cls: 0.1682  acc: 94.9707  loss_bbox: 0.2473
2025/05/11 19:50:26 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:42  time: 0.3723  data_time: 0.0022  memory: 4363  loss: 0.5184  loss_rpn_cls: 0.0110  loss_rpn_bbox: 0.0776  loss_cls: 0.1732  acc: 91.6016  loss_bbox: 0.2567
2025/05/11 19:50:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:50:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:50:44 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.724 0.522 -1.000 0.308 0.483
2025/05/11 19:50:44 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4830  data_time: 0.0014  time: 0.0367
2025/05/11 19:51:02 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3676  data_time: 0.0049  memory: 4363  loss: 0.5233  loss_rpn_cls: 0.0112  loss_rpn_bbox: 0.0763  loss_cls: 0.1790  acc: 89.7461  loss_bbox: 0.2568
2025/05/11 19:51:21 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:50  time: 0.3676  data_time: 0.0022  memory: 4363  loss: 0.5000  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0735  loss_cls: 0.1692  acc: 91.6016  loss_bbox: 0.2474
2025/05/11 19:51:36 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:51:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:51:39 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.714 0.505 -1.000 0.304 0.475
2025/05/11 19:51:39 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4750  data_time: 0.0016  time: 0.0366
2025/05/11 19:51:57 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3689  data_time: 0.0048  memory: 4363  loss: 0.5127  loss_rpn_cls: 0.0103  loss_rpn_bbox: 0.0757  loss_cls: 0.1743  acc: 93.9941  loss_bbox: 0.2525
2025/05/11 19:52:16 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:58  time: 0.3680  data_time: 0.0024  memory: 4363  loss: 0.5143  loss_rpn_cls: 0.0096  loss_rpn_bbox: 0.0758  loss_cls: 0.1766  acc: 93.8477  loss_bbox: 0.2523
2025/05/11 19:52:31 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:52:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:52:34 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.714 0.503 -1.000 0.308 0.473
2025/05/11 19:52:34 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5030  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4730  data_time: 0.0015  time: 0.0369
2025/05/11 19:52:52 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3685  data_time: 0.0050  memory: 4363  loss: 0.5096  loss_rpn_cls: 0.0101  loss_rpn_bbox: 0.0750  loss_cls: 0.1741  acc: 94.9219  loss_bbox: 0.2506
2025/05/11 19:52:53 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:53:11 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:06  time: 0.3695  data_time: 0.0024  memory: 4363  loss: 0.5158  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0772  loss_cls: 0.1727  acc: 93.3594  loss_bbox: 0.2541
2025/05/11 19:53:26 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:53:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:53:29 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.712 0.505 -1.000 0.306 0.472
2025/05/11 19:53:29 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7120  coco/bbox_mAP_75: 0.5050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4720  data_time: 0.0016  time: 0.0370
2025/05/11 19:53:47 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3682  data_time: 0.0050  memory: 4363  loss: 0.5130  loss_rpn_cls: 0.0112  loss_rpn_bbox: 0.0746  loss_cls: 0.1759  acc: 93.6523  loss_bbox: 0.2514
2025/05/11 19:54:06 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3672  data_time: 0.0023  memory: 4363  loss: 0.5129  loss_rpn_cls: 0.0096  loss_rpn_bbox: 0.0757  loss_cls: 0.1743  acc: 93.4082  loss_bbox: 0.2532
2025/05/11 19:54:21 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_20250511_192633
2025/05/11 19:54:21 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 19:54:24 - mmengine - INFO - Evaluating bbox...
2025/05/11 19:54:25 - mmengine - INFO - bbox_mAP_copypaste: 0.445 0.714 0.511 -1.000 0.306 0.475
2025/05/11 19:54:25 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4450  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3060  coco/bbox_mAP_l: 0.4750  data_time: 0.0014  time: 0.0374
