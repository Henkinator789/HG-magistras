2025/05/13 18:55:07 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2084969436
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 2084969436
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 18:55:07 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='PhotoMetricDistortion'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 18:55:08 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 18:55:08 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 18:55:09 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 18:55:09 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 18:55:09 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 18:55:09 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 18:55:09 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 18:55:09 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 18:55:09 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 18:55:32 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:33:05  time: 0.4751  data_time: 0.0926  memory: 4362  loss: 2.3421  loss_rpn_cls: 0.5516  loss_rpn_bbox: 0.1774  loss_cls: 0.9440  acc: 83.4473  loss_bbox: 0.6691
2025/05/13 18:55:51 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:13  time: 0.3740  data_time: 0.0042  memory: 4362  loss: 1.3144  loss_rpn_cls: 0.0982  loss_rpn_bbox: 0.1395  loss_cls: 0.5353  acc: 83.5449  loss_bbox: 0.5414
2025/05/13 18:56:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 18:56:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:56:18 - mmengine - INFO - bbox_mAP_copypaste: 0.277 0.468 0.307 -1.000 0.148 0.299
2025/05/13 18:56:18 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.2770  coco/bbox_mAP_50: 0.4680  coco/bbox_mAP_75: 0.3070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1480  coco/bbox_mAP_l: 0.2990  data_time: 0.1641  time: 0.2042
2025/05/13 18:56:19 - mmengine - INFO - The best checkpoint with 0.2770 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 18:56:37 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:51  time: 0.3738  data_time: 0.0066  memory: 4362  loss: 1.0598  loss_rpn_cls: 0.0704  loss_rpn_bbox: 0.1263  loss_cls: 0.4400  acc: 84.2285  loss_bbox: 0.4230
2025/05/13 18:56:56 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:12  time: 0.3761  data_time: 0.0039  memory: 4362  loss: 1.0477  loss_rpn_cls: 0.0697  loss_rpn_bbox: 0.1360  loss_cls: 0.4199  acc: 83.9844  loss_bbox: 0.4221
2025/05/13 18:57:11 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 18:57:13 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:57:15 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.540 0.357 -1.000 0.222 0.346
2025/05/13 18:57:15 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.5400  coco/bbox_mAP_75: 0.3570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3460  data_time: 0.0015  time: 0.0375
2025/05/13 18:57:15 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 18:57:15 - mmengine - INFO - The best checkpoint with 0.3260 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 18:57:34 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:15  time: 0.3772  data_time: 0.0075  memory: 4362  loss: 1.0325  loss_rpn_cls: 0.0658  loss_rpn_bbox: 0.1263  loss_cls: 0.4215  acc: 85.6934  loss_bbox: 0.4189
2025/05/13 18:57:53 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:49  time: 0.3753  data_time: 0.0041  memory: 4362  loss: 0.9606  loss_rpn_cls: 0.0557  loss_rpn_bbox: 0.1256  loss_cls: 0.3739  acc: 86.5529  loss_bbox: 0.4053
2025/05/13 18:58:08 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 18:58:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:58:12 - mmengine - INFO - bbox_mAP_copypaste: 0.248 0.417 0.277 -1.000 0.140 0.271
2025/05/13 18:58:12 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2480  coco/bbox_mAP_50: 0.4170  coco/bbox_mAP_75: 0.2770  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1400  coco/bbox_mAP_l: 0.2710  data_time: 0.0016  time: 0.0372
2025/05/13 18:58:30 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:24:05  time: 0.3748  data_time: 0.0071  memory: 4362  loss: 0.9998  loss_rpn_cls: 0.0606  loss_rpn_bbox: 0.1275  loss_cls: 0.4029  acc: 79.8714  loss_bbox: 0.4088
2025/05/13 18:58:49 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:41  time: 0.3726  data_time: 0.0042  memory: 4362  loss: 0.9692  loss_rpn_cls: 0.0549  loss_rpn_bbox: 0.1291  loss_cls: 0.3842  acc: 87.2559  loss_bbox: 0.4010
2025/05/13 18:59:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 18:59:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:59:08 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.607 0.396 -1.000 0.247 0.384
2025/05/13 18:59:08 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6070  coco/bbox_mAP_75: 0.3960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2470  coco/bbox_mAP_l: 0.3840  data_time: 0.0017  time: 0.0374
2025/05/13 18:59:08 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 18:59:08 - mmengine - INFO - The best checkpoint with 0.3570 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 18:59:27 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:23:04  time: 0.3821  data_time: 0.0077  memory: 4362  loss: 0.9293  loss_rpn_cls: 0.0456  loss_rpn_bbox: 0.1241  loss_cls: 0.3655  acc: 84.1797  loss_bbox: 0.3942
2025/05/13 18:59:46 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:43  time: 0.3756  data_time: 0.0044  memory: 4362  loss: 0.8940  loss_rpn_cls: 0.0449  loss_rpn_bbox: 0.1174  loss_cls: 0.3499  acc: 86.5723  loss_bbox: 0.3818
2025/05/13 19:00:02 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:00:03 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:00:05 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.579 0.412 -1.000 0.267 0.379
2025/05/13 19:00:05 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.5790  coco/bbox_mAP_75: 0.4120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2670  coco/bbox_mAP_l: 0.3790  data_time: 0.0015  time: 0.0372
2025/05/13 19:00:24 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:22:05  time: 0.3771  data_time: 0.0071  memory: 4362  loss: 0.8484  loss_rpn_cls: 0.0396  loss_rpn_bbox: 0.1166  loss_cls: 0.3279  acc: 89.9306  loss_bbox: 0.3643
2025/05/13 19:00:42 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:44  time: 0.3730  data_time: 0.0040  memory: 4362  loss: 0.8661  loss_rpn_cls: 0.0423  loss_rpn_bbox: 0.1127  loss_cls: 0.3388  acc: 85.5919  loss_bbox: 0.3724
2025/05/13 19:00:58 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:00:59 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:01:01 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.727 0.507 -1.000 0.266 0.470
2025/05/13 19:01:01 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2660  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0386
2025/05/13 19:01:01 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/13 19:01:02 - mmengine - INFO - The best checkpoint with 0.4430 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/13 19:01:21 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:21:09  time: 0.3840  data_time: 0.0072  memory: 4362  loss: 0.8297  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1110  loss_cls: 0.3174  acc: 84.2285  loss_bbox: 0.3615
2025/05/13 19:01:40 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:48  time: 0.3738  data_time: 0.0041  memory: 4362  loss: 0.8233  loss_rpn_cls: 0.0385  loss_rpn_bbox: 0.1161  loss_cls: 0.3172  acc: 88.3301  loss_bbox: 0.3515
2025/05/13 19:01:55 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:01:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:01:58 - mmengine - INFO - bbox_mAP_copypaste: 0.435 0.710 0.504 -1.000 0.286 0.465
2025/05/13 19:01:58 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4350  coco/bbox_mAP_50: 0.7100  coco/bbox_mAP_75: 0.5040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4650  data_time: 0.0015  time: 0.0371
2025/05/13 19:02:03 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:02:17 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:20:12  time: 0.3815  data_time: 0.0073  memory: 4362  loss: 0.7775  loss_rpn_cls: 0.0317  loss_rpn_bbox: 0.1051  loss_cls: 0.2996  acc: 89.1602  loss_bbox: 0.3411
2025/05/13 19:02:36 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:53  time: 0.3765  data_time: 0.0042  memory: 4362  loss: 0.7976  loss_rpn_cls: 0.0328  loss_rpn_bbox: 0.1057  loss_cls: 0.3089  acc: 86.9141  loss_bbox: 0.3502
2025/05/13 19:02:51 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:02:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:02:54 - mmengine - INFO - bbox_mAP_copypaste: 0.408 0.680 0.460 -1.000 0.267 0.439
2025/05/13 19:02:54 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4080  coco/bbox_mAP_50: 0.6800  coco/bbox_mAP_75: 0.4600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2670  coco/bbox_mAP_l: 0.4390  data_time: 0.0015  time: 0.0373
2025/05/13 19:03:13 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:19:18  time: 0.3814  data_time: 0.0074  memory: 4362  loss: 0.7012  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0933  loss_cls: 0.2638  acc: 89.2578  loss_bbox: 0.3201
2025/05/13 19:03:32 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:58  time: 0.3726  data_time: 0.0041  memory: 4361  loss: 0.6659  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0887  loss_cls: 0.2486  acc: 88.2812  loss_bbox: 0.3056
2025/05/13 19:03:48 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:03:49 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:03:51 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.706 0.517 -1.000 0.287 0.477
2025/05/13 19:03:51 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7060  coco/bbox_mAP_75: 0.5170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2870  coco/bbox_mAP_l: 0.4770  data_time: 0.0015  time: 0.0372
2025/05/13 19:03:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/13 19:03:52 - mmengine - INFO - The best checkpoint with 0.4460 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/13 19:04:11 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:18:24  time: 0.3854  data_time: 0.0071  memory: 4361  loss: 0.6630  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0887  loss_cls: 0.2509  acc: 85.7422  loss_bbox: 0.3029
2025/05/13 19:04:30 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:18:05  time: 0.3766  data_time: 0.0041  memory: 4361  loss: 0.6515  loss_rpn_cls: 0.0204  loss_rpn_bbox: 0.0863  loss_cls: 0.2451  acc: 87.6465  loss_bbox: 0.2997
2025/05/13 19:04:45 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:04:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:04:48 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.703 0.518 -1.000 0.286 0.473
2025/05/13 19:04:48 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7030  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4730  data_time: 0.0015  time: 0.0370
2025/05/13 19:05:07 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:29  time: 0.3779  data_time: 0.0073  memory: 4362  loss: 0.6370  loss_rpn_cls: 0.0189  loss_rpn_bbox: 0.0865  loss_cls: 0.2352  acc: 92.8223  loss_bbox: 0.2965
2025/05/13 19:05:26 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:17:11  time: 0.3805  data_time: 0.0041  memory: 4361  loss: 0.6346  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0863  loss_cls: 0.2352  acc: 89.2090  loss_bbox: 0.2943
2025/05/13 19:05:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:05:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:05:45 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.705 0.512 -1.000 0.292 0.470
2025/05/13 19:05:45 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7050  coco/bbox_mAP_75: 0.5120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2920  coco/bbox_mAP_l: 0.4700  data_time: 0.0016  time: 0.0373
2025/05/13 19:06:04 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:36  time: 0.3780  data_time: 0.0074  memory: 4362  loss: 0.6249  loss_rpn_cls: 0.0180  loss_rpn_bbox: 0.0847  loss_cls: 0.2298  acc: 91.6992  loss_bbox: 0.2923
2025/05/13 19:06:22 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:16:17  time: 0.3788  data_time: 0.0041  memory: 4361  loss: 0.6282  loss_rpn_cls: 0.0200  loss_rpn_bbox: 0.0841  loss_cls: 0.2338  acc: 88.9160  loss_bbox: 0.2903
2025/05/13 19:06:38 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:06:40 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:06:41 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.704 0.524 -1.000 0.298 0.474
2025/05/13 19:06:41 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4740  data_time: 0.0016  time: 0.0371
2025/05/13 19:07:00 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:42  time: 0.3830  data_time: 0.0072  memory: 4361  loss: 0.6397  loss_rpn_cls: 0.0198  loss_rpn_bbox: 0.0867  loss_cls: 0.2396  acc: 91.6016  loss_bbox: 0.2936
2025/05/13 19:07:19 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:23  time: 0.3755  data_time: 0.0042  memory: 4361  loss: 0.6286  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0848  loss_cls: 0.2362  acc: 93.0176  loss_bbox: 0.2908
2025/05/13 19:07:34 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:07:36 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:07:37 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.700 0.520 -1.000 0.298 0.470
2025/05/13 19:07:37 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.5200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4700  data_time: 0.0016  time: 0.0369
2025/05/13 19:07:57 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:48  time: 0.3805  data_time: 0.0071  memory: 4361  loss: 0.6229  loss_rpn_cls: 0.0174  loss_rpn_bbox: 0.0848  loss_cls: 0.2327  acc: 90.1855  loss_bbox: 0.2880
2025/05/13 19:08:15 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:29  time: 0.3769  data_time: 0.0043  memory: 4361  loss: 0.6274  loss_rpn_cls: 0.0180  loss_rpn_bbox: 0.0845  loss_cls: 0.2348  acc: 90.8203  loss_bbox: 0.2900
2025/05/13 19:08:31 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:08:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:08:34 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.699 0.513 -1.000 0.296 0.468
2025/05/13 19:08:34 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.6990  coco/bbox_mAP_75: 0.5130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4680  data_time: 0.0015  time: 0.0370
2025/05/13 19:08:44 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:08:53 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:55  time: 0.3793  data_time: 0.0070  memory: 4362  loss: 0.6174  loss_rpn_cls: 0.0175  loss_rpn_bbox: 0.0842  loss_cls: 0.2287  acc: 93.1152  loss_bbox: 0.2869
2025/05/13 19:09:12 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:35  time: 0.3735  data_time: 0.0041  memory: 4361  loss: 0.6270  loss_rpn_cls: 0.0177  loss_rpn_bbox: 0.0851  loss_cls: 0.2352  acc: 88.9160  loss_bbox: 0.2890
2025/05/13 19:09:27 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:09:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:09:30 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.698 0.513 -1.000 0.300 0.468
2025/05/13 19:09:30 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.6980  coco/bbox_mAP_75: 0.5130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4680  data_time: 0.0014  time: 0.0378
2025/05/13 19:09:49 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:13:01  time: 0.3802  data_time: 0.0074  memory: 4361  loss: 0.6337  loss_rpn_cls: 0.0175  loss_rpn_bbox: 0.0846  loss_cls: 0.2402  acc: 88.0859  loss_bbox: 0.2913
2025/05/13 19:10:08 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:42  time: 0.3785  data_time: 0.0042  memory: 4362  loss: 0.6135  loss_rpn_cls: 0.0155  loss_rpn_bbox: 0.0846  loss_cls: 0.2273  acc: 89.3066  loss_bbox: 0.2860
2025/05/13 19:10:24 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:10:26 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:10:27 - mmengine - INFO - bbox_mAP_copypaste: 0.439 0.695 0.511 -1.000 0.297 0.466
2025/05/13 19:10:27 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4390  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4660  data_time: 0.0017  time: 0.0384
2025/05/13 19:10:46 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:12:08  time: 0.3829  data_time: 0.0072  memory: 4362  loss: 0.6273  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0862  loss_cls: 0.2302  acc: 92.5293  loss_bbox: 0.2929
2025/05/13 19:11:05 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:49  time: 0.3733  data_time: 0.0042  memory: 4362  loss: 0.6198  loss_rpn_cls: 0.0172  loss_rpn_bbox: 0.0831  loss_cls: 0.2324  acc: 89.2578  loss_bbox: 0.2871
2025/05/13 19:11:20 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:11:22 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:11:23 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.701 0.521 -1.000 0.297 0.471
2025/05/13 19:11:23 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7010  coco/bbox_mAP_75: 0.5210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4710  data_time: 0.0015  time: 0.0373
2025/05/13 19:11:42 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:14  time: 0.3806  data_time: 0.0072  memory: 4362  loss: 0.6261  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0848  loss_cls: 0.2325  acc: 91.4062  loss_bbox: 0.2894
2025/05/13 19:12:01 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:55  time: 0.3762  data_time: 0.0040  memory: 4362  loss: 0.6178  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0837  loss_cls: 0.2293  acc: 91.9434  loss_bbox: 0.2881
2025/05/13 19:12:17 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:12:18 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:12:20 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.694 0.514 -1.000 0.296 0.467
2025/05/13 19:12:20 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6940  coco/bbox_mAP_75: 0.5140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4670  data_time: 0.0016  time: 0.0372
2025/05/13 19:12:39 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:21  time: 0.3812  data_time: 0.0073  memory: 4362  loss: 0.6127  loss_rpn_cls: 0.0182  loss_rpn_bbox: 0.0837  loss_cls: 0.2268  acc: 89.4531  loss_bbox: 0.2840
2025/05/13 19:12:58 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:10:02  time: 0.3784  data_time: 0.0041  memory: 4361  loss: 0.6250  loss_rpn_cls: 0.0174  loss_rpn_bbox: 0.0854  loss_cls: 0.2326  acc: 89.0625  loss_bbox: 0.2896
2025/05/13 19:13:13 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:13:15 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:13:16 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.696 0.514 -1.000 0.297 0.468
2025/05/13 19:13:16 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.6960  coco/bbox_mAP_75: 0.5140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4680  data_time: 0.0017  time: 0.0375
2025/05/13 19:13:35 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:27  time: 0.3807  data_time: 0.0071  memory: 4362  loss: 0.6297  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0845  loss_cls: 0.2354  acc: 90.2344  loss_bbox: 0.2919
2025/05/13 19:13:54 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:09:08  time: 0.3769  data_time: 0.0041  memory: 4362  loss: 0.6147  loss_rpn_cls: 0.0164  loss_rpn_bbox: 0.0841  loss_cls: 0.2279  acc: 91.1621  loss_bbox: 0.2863
2025/05/13 19:14:10 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:14:11 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:14:13 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.704 0.520 -1.000 0.297 0.474
2025/05/13 19:14:13 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7040  coco/bbox_mAP_75: 0.5200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4740  data_time: 0.0016  time: 0.0372
2025/05/13 19:14:32 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:34  time: 0.3787  data_time: 0.0071  memory: 4362  loss: 0.6155  loss_rpn_cls: 0.0171  loss_rpn_bbox: 0.0823  loss_cls: 0.2293  acc: 89.8926  loss_bbox: 0.2867
2025/05/13 19:14:51 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:15  time: 0.3815  data_time: 0.0040  memory: 4362  loss: 0.6300  loss_rpn_cls: 0.0194  loss_rpn_bbox: 0.0856  loss_cls: 0.2354  acc: 90.1367  loss_bbox: 0.2896
2025/05/13 19:15:06 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:15:08 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:15:09 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.694 0.511 -1.000 0.294 0.469
2025/05/13 19:15:09 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.6940  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4690  data_time: 0.0014  time: 0.0371
2025/05/13 19:15:24 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:15:28 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:41  time: 0.3811  data_time: 0.0071  memory: 4362  loss: 0.6183  loss_rpn_cls: 0.0169  loss_rpn_bbox: 0.0851  loss_cls: 0.2276  acc: 88.0371  loss_bbox: 0.2887
2025/05/13 19:15:47 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:22  time: 0.3791  data_time: 0.0040  memory: 4361  loss: 0.6217  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0846  loss_cls: 0.2359  acc: 93.4570  loss_bbox: 0.2845
2025/05/13 19:16:03 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:16:04 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:16:06 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.694 0.512 -1.000 0.297 0.468
2025/05/13 19:16:06 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.6940  coco/bbox_mAP_75: 0.5120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.4680  data_time: 0.0016  time: 0.0370
2025/05/13 19:16:25 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:47  time: 0.3784  data_time: 0.0073  memory: 4361  loss: 0.6164  loss_rpn_cls: 0.0161  loss_rpn_bbox: 0.0839  loss_cls: 0.2288  acc: 88.3789  loss_bbox: 0.2877
2025/05/13 19:16:44 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:28  time: 0.3761  data_time: 0.0041  memory: 4362  loss: 0.6139  loss_rpn_cls: 0.0171  loss_rpn_bbox: 0.0837  loss_cls: 0.2263  acc: 91.1133  loss_bbox: 0.2868
2025/05/13 19:16:59 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:17:01 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:17:02 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.692 0.510 -1.000 0.293 0.467
2025/05/13 19:17:02 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6920  coco/bbox_mAP_75: 0.5100  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2930  coco/bbox_mAP_l: 0.4670  data_time: 0.0016  time: 0.0373
2025/05/13 19:17:21 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:54  time: 0.3797  data_time: 0.0074  memory: 4361  loss: 0.6144  loss_rpn_cls: 0.0148  loss_rpn_bbox: 0.0838  loss_cls: 0.2260  acc: 89.3555  loss_bbox: 0.2898
2025/05/13 19:17:40 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:35  time: 0.3759  data_time: 0.0041  memory: 4362  loss: 0.6050  loss_rpn_cls: 0.0157  loss_rpn_bbox: 0.0825  loss_cls: 0.2248  acc: 89.9414  loss_bbox: 0.2819
2025/05/13 19:17:56 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:17:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:17:59 - mmengine - INFO - bbox_mAP_copypaste: 0.439 0.695 0.515 -1.000 0.296 0.468
2025/05/13 19:17:59 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4390  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4680  data_time: 0.0016  time: 0.0373
2025/05/13 19:18:18 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:05:00  time: 0.3799  data_time: 0.0071  memory: 4362  loss: 0.6229  loss_rpn_cls: 0.0177  loss_rpn_bbox: 0.0843  loss_cls: 0.2313  acc: 90.2344  loss_bbox: 0.2896
2025/05/13 19:18:36 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:42  time: 0.3718  data_time: 0.0042  memory: 4362  loss: 0.6028  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0821  loss_cls: 0.2223  acc: 90.3809  loss_bbox: 0.2817
2025/05/13 19:18:52 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:18:54 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:18:55 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.699 0.518 -1.000 0.294 0.471
2025/05/13 19:18:55 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.6990  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4710  data_time: 0.0017  time: 0.0372
2025/05/13 19:19:14 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:07  time: 0.3764  data_time: 0.0073  memory: 4362  loss: 0.6138  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0836  loss_cls: 0.2277  acc: 90.7715  loss_bbox: 0.2857
2025/05/13 19:19:33 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:48  time: 0.3764  data_time: 0.0041  memory: 4361  loss: 0.6087  loss_rpn_cls: 0.0164  loss_rpn_bbox: 0.0838  loss_cls: 0.2283  acc: 91.8457  loss_bbox: 0.2803
2025/05/13 19:19:48 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:19:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:19:51 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.696 0.515 -1.000 0.294 0.470
2025/05/13 19:19:51 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.6960  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4700  data_time: 0.0016  time: 0.0372
2025/05/13 19:20:10 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:14  time: 0.3798  data_time: 0.0071  memory: 4361  loss: 0.6138  loss_rpn_cls: 0.0164  loss_rpn_bbox: 0.0831  loss_cls: 0.2294  acc: 90.4785  loss_bbox: 0.2849
2025/05/13 19:20:29 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:55  time: 0.3754  data_time: 0.0042  memory: 4361  loss: 0.6119  loss_rpn_cls: 0.0178  loss_rpn_bbox: 0.0832  loss_cls: 0.2271  acc: 93.0176  loss_bbox: 0.2837
2025/05/13 19:20:45 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:20:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:20:48 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.692 0.510 -1.000 0.286 0.466
2025/05/13 19:20:48 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.6920  coco/bbox_mAP_75: 0.5100  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4660  data_time: 0.0017  time: 0.0375
2025/05/13 19:21:07 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:20  time: 0.3818  data_time: 0.0072  memory: 4362  loss: 0.5951  loss_rpn_cls: 0.0166  loss_rpn_bbox: 0.0826  loss_cls: 0.2153  acc: 91.6952  loss_bbox: 0.2806
2025/05/13 19:21:26 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:02  time: 0.3759  data_time: 0.0043  memory: 4361  loss: 0.6262  loss_rpn_cls: 0.0178  loss_rpn_bbox: 0.0839  loss_cls: 0.2368  acc: 87.2559  loss_bbox: 0.2877
2025/05/13 19:21:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:21:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:21:44 - mmengine - INFO - bbox_mAP_copypaste: 0.441 0.698 0.515 -1.000 0.294 0.469
2025/05/13 19:21:44 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4410  coco/bbox_mAP_50: 0.6980  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4690  data_time: 0.0016  time: 0.0375
2025/05/13 19:22:03 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:27  time: 0.3778  data_time: 0.0072  memory: 4362  loss: 0.6103  loss_rpn_cls: 0.0152  loss_rpn_bbox: 0.0827  loss_cls: 0.2270  acc: 89.1602  loss_bbox: 0.2854
2025/05/13 19:22:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:22:22 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:08  time: 0.3794  data_time: 0.0041  memory: 4362  loss: 0.6189  loss_rpn_cls: 0.0175  loss_rpn_bbox: 0.0846  loss_cls: 0.2291  acc: 90.9668  loss_bbox: 0.2877
2025/05/13 19:22:38 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:22:40 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:22:41 - mmengine - INFO - bbox_mAP_copypaste: 0.436 0.689 0.504 -1.000 0.277 0.466
2025/05/13 19:22:41 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4360  coco/bbox_mAP_50: 0.6890  coco/bbox_mAP_75: 0.5040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2770  coco/bbox_mAP_l: 0.4660  data_time: 0.0017  time: 0.0378
2025/05/13 19:23:00 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3802  data_time: 0.0073  memory: 4362  loss: 0.6102  loss_rpn_cls: 0.0182  loss_rpn_bbox: 0.0827  loss_cls: 0.2254  acc: 93.5059  loss_bbox: 0.2839
2025/05/13 19:23:19 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3767  data_time: 0.0042  memory: 4361  loss: 0.6010  loss_rpn_cls: 0.0153  loss_rpn_bbox: 0.0819  loss_cls: 0.2218  acc: 91.2598  loss_bbox: 0.2820
2025/05/13 19:23:35 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_20250513_185503
2025/05/13 19:23:35 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 19:23:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:23:40 - mmengine - INFO - bbox_mAP_copypaste: 0.435 0.689 0.509 -1.000 0.278 0.465
2025/05/13 19:23:40 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4350  coco/bbox_mAP_50: 0.6890  coco/bbox_mAP_75: 0.5090  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2780  coco/bbox_mAP_l: 0.4650  data_time: 0.0016  time: 0.0392
