2025/05/19 16:06:13 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 118657201
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 118657201
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/19 16:06:14 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='Equalize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='Equalize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/19 16:06:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/19 16:06:14 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/19 16:06:15 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/19 16:06:15 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/19 16:06:15 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/19 16:06:15 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/19 16:06:15 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/19 16:06:15 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/19 16:06:38 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:17  time: 0.4635  data_time: 0.0929  memory: 4361  loss: 2.1551  loss_rpn_cls: 0.6000  loss_rpn_bbox: 0.2511  loss_cls: 0.8643  acc: 71.1426  loss_bbox: 0.4398
2025/05/19 16:06:57 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:47  time: 0.3729  data_time: 0.0022  memory: 4361  loss: 1.9360  loss_rpn_cls: 0.3319  loss_rpn_bbox: 0.2260  loss_cls: 0.6742  acc: 77.9785  loss_bbox: 0.7039
2025/05/19 16:07:12 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:07:22 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:07:24 - mmengine - INFO - bbox_mAP_copypaste: 0.118 0.264 0.070 -1.000 0.050 0.128
2025/05/19 16:07:24 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1180  coco/bbox_mAP_50: 0.2640  coco/bbox_mAP_75: 0.0700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0500  coco/bbox_mAP_l: 0.1280  data_time: 0.1644  time: 0.2044
2025/05/19 16:07:25 - mmengine - INFO - The best checkpoint with 0.1180 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/19 16:07:44 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:42  time: 0.3745  data_time: 0.0063  memory: 4361  loss: 1.5266  loss_rpn_cls: 0.1435  loss_rpn_bbox: 0.1983  loss_cls: 0.5590  acc: 81.7871  loss_bbox: 0.6259
2025/05/19 16:08:02 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:53  time: 0.3612  data_time: 0.0022  memory: 4361  loss: 1.3949  loss_rpn_cls: 0.1185  loss_rpn_bbox: 0.1764  loss_cls: 0.5089  acc: 79.7363  loss_bbox: 0.5911
2025/05/19 16:08:16 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:08:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:08:20 - mmengine - INFO - bbox_mAP_copypaste: 0.257 0.494 0.229 -1.000 0.189 0.271
2025/05/19 16:08:20 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2570  coco/bbox_mAP_50: 0.4940  coco/bbox_mAP_75: 0.2290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1890  coco/bbox_mAP_l: 0.2710  data_time: 0.0016  time: 0.0387
2025/05/19 16:08:20 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/19 16:08:21 - mmengine - INFO - The best checkpoint with 0.2570 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/19 16:08:39 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:51  time: 0.3686  data_time: 0.0063  memory: 4361  loss: 1.3115  loss_rpn_cls: 0.0961  loss_rpn_bbox: 0.1658  loss_cls: 0.4996  acc: 83.1543  loss_bbox: 0.5499
2025/05/19 16:08:57 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:20  time: 0.3604  data_time: 0.0024  memory: 4361  loss: 1.2443  loss_rpn_cls: 0.0961  loss_rpn_bbox: 0.1672  loss_cls: 0.4517  acc: 82.6243  loss_bbox: 0.5293
2025/05/19 16:09:12 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:09:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:09:15 - mmengine - INFO - bbox_mAP_copypaste: 0.305 0.565 0.305 -1.000 0.196 0.330
2025/05/19 16:09:15 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3050  coco/bbox_mAP_50: 0.5650  coco/bbox_mAP_75: 0.3050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1960  coco/bbox_mAP_l: 0.3300  data_time: 0.0017  time: 0.0374
2025/05/19 16:09:15 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/19 16:09:16 - mmengine - INFO - The best checkpoint with 0.3050 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/19 16:09:34 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:35  time: 0.3700  data_time: 0.0059  memory: 4361  loss: 1.1552  loss_rpn_cls: 0.0785  loss_rpn_bbox: 0.1539  loss_cls: 0.4383  acc: 81.7780  loss_bbox: 0.4845
2025/05/19 16:09:52 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:10  time: 0.3592  data_time: 0.0023  memory: 4361  loss: 1.1475  loss_rpn_cls: 0.0808  loss_rpn_bbox: 0.1477  loss_cls: 0.4356  acc: 85.5469  loss_bbox: 0.4835
2025/05/19 16:10:07 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:10:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:10:10 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.622 0.378 -1.000 0.236 0.380
2025/05/19 16:10:10 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6220  coco/bbox_mAP_75: 0.3780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2360  coco/bbox_mAP_l: 0.3800  data_time: 0.0018  time: 0.0378
2025/05/19 16:10:10 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/19 16:10:11 - mmengine - INFO - The best checkpoint with 0.3560 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/19 16:10:30 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:32  time: 0.3759  data_time: 0.0060  memory: 4361  loss: 1.0428  loss_rpn_cls: 0.0701  loss_rpn_bbox: 0.1382  loss_cls: 0.3838  acc: 88.3187  loss_bbox: 0.4507
2025/05/19 16:10:48 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:11  time: 0.3637  data_time: 0.0023  memory: 4361  loss: 1.0417  loss_rpn_cls: 0.0679  loss_rpn_bbox: 0.1371  loss_cls: 0.3888  acc: 88.1348  loss_bbox: 0.4479
2025/05/19 16:11:03 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:11:05 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:11:06 - mmengine - INFO - bbox_mAP_copypaste: 0.392 0.656 0.444 -1.000 0.270 0.415
2025/05/19 16:11:06 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3920  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.4440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2700  coco/bbox_mAP_l: 0.4150  data_time: 0.0015  time: 0.0371
2025/05/19 16:11:06 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/19 16:11:07 - mmengine - INFO - The best checkpoint with 0.3920 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/19 16:11:25 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:33  time: 0.3698  data_time: 0.0054  memory: 4361  loss: 0.9454  loss_rpn_cls: 0.0518  loss_rpn_bbox: 0.1225  loss_cls: 0.3459  acc: 87.5977  loss_bbox: 0.4252
2025/05/19 16:11:44 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:13  time: 0.3663  data_time: 0.0023  memory: 4361  loss: 0.9459  loss_rpn_cls: 0.0573  loss_rpn_bbox: 0.1300  loss_cls: 0.3466  acc: 86.9141  loss_bbox: 0.4121
2025/05/19 16:11:58 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:12:00 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:12:02 - mmengine - INFO - bbox_mAP_copypaste: 0.423 0.714 0.472 -1.000 0.295 0.445
2025/05/19 16:12:02 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.4230  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.4720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.4450  data_time: 0.0017  time: 0.0372
2025/05/19 16:12:02 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/19 16:12:02 - mmengine - INFO - The best checkpoint with 0.4230 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/19 16:12:21 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:38  time: 0.3728  data_time: 0.0060  memory: 4361  loss: 0.9179  loss_rpn_cls: 0.0542  loss_rpn_bbox: 0.1294  loss_cls: 0.3221  acc: 84.4727  loss_bbox: 0.4121
2025/05/19 16:12:39 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:18  time: 0.3661  data_time: 0.0024  memory: 4361  loss: 0.9032  loss_rpn_cls: 0.0483  loss_rpn_bbox: 0.1235  loss_cls: 0.3278  acc: 86.0840  loss_bbox: 0.4036
2025/05/19 16:12:54 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:12:56 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:12:57 - mmengine - INFO - bbox_mAP_copypaste: 0.413 0.686 0.472 -1.000 0.251 0.441
2025/05/19 16:12:57 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.4130  coco/bbox_mAP_50: 0.6860  coco/bbox_mAP_75: 0.4720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2510  coco/bbox_mAP_l: 0.4410  data_time: 0.0017  time: 0.0372
2025/05/19 16:13:02 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:13:16 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:42  time: 0.3670  data_time: 0.0054  memory: 4361  loss: 0.8356  loss_rpn_cls: 0.0376  loss_rpn_bbox: 0.1156  loss_cls: 0.3000  acc: 86.1576  loss_bbox: 0.3824
2025/05/19 16:13:34 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:23  time: 0.3646  data_time: 0.0023  memory: 4361  loss: 0.8730  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.1178  loss_cls: 0.3203  acc: 88.6230  loss_bbox: 0.3894
2025/05/19 16:13:49 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:13:51 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:13:52 - mmengine - INFO - bbox_mAP_copypaste: 0.414 0.695 0.463 -1.000 0.298 0.440
2025/05/19 16:13:52 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4140  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.4630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4400  data_time: 0.0015  time: 0.0365
2025/05/19 16:14:11 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:48  time: 0.3670  data_time: 0.0052  memory: 4361  loss: 0.7609  loss_rpn_cls: 0.0303  loss_rpn_bbox: 0.1009  loss_cls: 0.2706  acc: 88.1836  loss_bbox: 0.3592
2025/05/19 16:14:29 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:30  time: 0.3680  data_time: 0.0022  memory: 4361  loss: 0.7319  loss_rpn_cls: 0.0294  loss_rpn_bbox: 0.0989  loss_cls: 0.2572  acc: 89.2578  loss_bbox: 0.3464
2025/05/19 16:14:44 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:14:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:14:47 - mmengine - INFO - bbox_mAP_copypaste: 0.470 0.755 0.556 -1.000 0.303 0.496
2025/05/19 16:14:47 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4700  coco/bbox_mAP_50: 0.7550  coco/bbox_mAP_75: 0.5560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4960  data_time: 0.0016  time: 0.0364
2025/05/19 16:14:47 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/19 16:14:48 - mmengine - INFO - The best checkpoint with 0.4700 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/19 16:15:07 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:56  time: 0.3746  data_time: 0.0057  memory: 4361  loss: 0.7246  loss_rpn_cls: 0.0274  loss_rpn_bbox: 0.0970  loss_cls: 0.2567  acc: 87.6953  loss_bbox: 0.3434
2025/05/19 16:15:25 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:37  time: 0.3678  data_time: 0.0023  memory: 4361  loss: 0.7001  loss_rpn_cls: 0.0260  loss_rpn_bbox: 0.0960  loss_cls: 0.2418  acc: 93.1152  loss_bbox: 0.3363
2025/05/19 16:15:40 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:15:42 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:15:43 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.712 0.532 -1.000 0.296 0.473
2025/05/19 16:15:43 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7120  coco/bbox_mAP_75: 0.5320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.4730  data_time: 0.0016  time: 0.0365
2025/05/19 16:16:02 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:04  time: 0.3707  data_time: 0.0059  memory: 4361  loss: 0.6959  loss_rpn_cls: 0.0242  loss_rpn_bbox: 0.0936  loss_cls: 0.2440  acc: 91.1621  loss_bbox: 0.3341
2025/05/19 16:16:20 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:45  time: 0.3688  data_time: 0.0024  memory: 4361  loss: 0.6978  loss_rpn_cls: 0.0254  loss_rpn_bbox: 0.0952  loss_cls: 0.2429  acc: 90.8203  loss_bbox: 0.3343
2025/05/19 16:16:35 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:16:37 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:16:39 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.727 0.544 -1.000 0.298 0.479
2025/05/19 16:16:39 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4790  data_time: 0.0016  time: 0.0365
2025/05/19 16:16:57 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:11  time: 0.3736  data_time: 0.0059  memory: 4361  loss: 0.6776  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0929  loss_cls: 0.2330  acc: 90.5762  loss_bbox: 0.3290
2025/05/19 16:17:16 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:53  time: 0.3695  data_time: 0.0025  memory: 4361  loss: 0.6727  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0927  loss_cls: 0.2317  acc: 88.7695  loss_bbox: 0.3243
2025/05/19 16:17:31 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:17:33 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:17:34 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.730 0.546 -1.000 0.304 0.482
2025/05/19 16:17:34 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4820  data_time: 0.0016  time: 0.0369
2025/05/19 16:17:53 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:19  time: 0.3763  data_time: 0.0059  memory: 4361  loss: 0.6764  loss_rpn_cls: 0.0224  loss_rpn_bbox: 0.0934  loss_cls: 0.2329  acc: 91.0156  loss_bbox: 0.3277
2025/05/19 16:18:11 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:01  time: 0.3666  data_time: 0.0023  memory: 4361  loss: 0.6636  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0918  loss_cls: 0.2282  acc: 90.3320  loss_bbox: 0.3241
2025/05/19 16:18:26 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:18:28 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:18:29 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.735 0.554 -1.000 0.305 0.486
2025/05/19 16:18:29 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3050  coco/bbox_mAP_l: 0.4860  data_time: 0.0016  time: 0.0366
2025/05/19 16:18:48 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:27  time: 0.3724  data_time: 0.0069  memory: 4361  loss: 0.6538  loss_rpn_cls: 0.0220  loss_rpn_bbox: 0.0913  loss_cls: 0.2195  acc: 92.4805  loss_bbox: 0.3210
2025/05/19 16:19:06 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:09  time: 0.3688  data_time: 0.0023  memory: 4361  loss: 0.6774  loss_rpn_cls: 0.0209  loss_rpn_bbox: 0.0912  loss_cls: 0.2369  acc: 91.6016  loss_bbox: 0.3284
2025/05/19 16:19:21 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:19:23 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:19:25 - mmengine - INFO - bbox_mAP_copypaste: 0.455 0.726 0.542 -1.000 0.304 0.481
2025/05/19 16:19:25 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4550  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0367
2025/05/19 16:19:34 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:19:43 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:35  time: 0.3732  data_time: 0.0060  memory: 4361  loss: 0.6716  loss_rpn_cls: 0.0224  loss_rpn_bbox: 0.0933  loss_cls: 0.2306  acc: 91.7480  loss_bbox: 0.3253
2025/05/19 16:20:02 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:16  time: 0.3670  data_time: 0.0023  memory: 4361  loss: 0.6610  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0903  loss_cls: 0.2279  acc: 92.1387  loss_bbox: 0.3210
2025/05/19 16:20:17 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:20:19 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:20:20 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.731 0.552 -1.000 0.304 0.484
2025/05/19 16:20:20 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.7310  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4840  data_time: 0.0017  time: 0.0367
2025/05/19 16:20:39 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:43  time: 0.3693  data_time: 0.0054  memory: 4361  loss: 0.6776  loss_rpn_cls: 0.0232  loss_rpn_bbox: 0.0926  loss_cls: 0.2378  acc: 90.1855  loss_bbox: 0.3240
2025/05/19 16:20:57 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:24  time: 0.3712  data_time: 0.0024  memory: 4361  loss: 0.6652  loss_rpn_cls: 0.0241  loss_rpn_bbox: 0.0926  loss_cls: 0.2246  acc: 89.4531  loss_bbox: 0.3238
2025/05/19 16:21:12 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:21:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:21:15 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.729 0.543 -1.000 0.303 0.483
2025/05/19 16:21:15 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7290  coco/bbox_mAP_75: 0.5430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3030  coco/bbox_mAP_l: 0.4830  data_time: 0.0016  time: 0.0365
2025/05/19 16:21:34 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:51  time: 0.3722  data_time: 0.0055  memory: 4361  loss: 0.6686  loss_rpn_cls: 0.0238  loss_rpn_bbox: 0.0928  loss_cls: 0.2285  acc: 91.2598  loss_bbox: 0.3236
2025/05/19 16:21:52 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:32  time: 0.3656  data_time: 0.0022  memory: 4361  loss: 0.6655  loss_rpn_cls: 0.0199  loss_rpn_bbox: 0.0909  loss_cls: 0.2324  acc: 90.2344  loss_bbox: 0.3223
2025/05/19 16:22:07 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:22:09 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:22:11 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.722 0.539 -1.000 0.302 0.479
2025/05/19 16:22:11 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7220  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4790  data_time: 0.0015  time: 0.0363
2025/05/19 16:22:29 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:59  time: 0.3731  data_time: 0.0053  memory: 4361  loss: 0.6671  loss_rpn_cls: 0.0233  loss_rpn_bbox: 0.0918  loss_cls: 0.2292  acc: 91.9434  loss_bbox: 0.3228
2025/05/19 16:22:48 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:40  time: 0.3677  data_time: 0.0024  memory: 4361  loss: 0.6592  loss_rpn_cls: 0.0214  loss_rpn_bbox: 0.0917  loss_cls: 0.2235  acc: 91.0645  loss_bbox: 0.3225
2025/05/19 16:23:03 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:23:05 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:23:06 - mmengine - INFO - bbox_mAP_copypaste: 0.457 0.730 0.546 -1.000 0.307 0.483
2025/05/19 16:23:06 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4570  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4830  data_time: 0.0015  time: 0.0366
2025/05/19 16:23:25 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:06  time: 0.3722  data_time: 0.0059  memory: 4361  loss: 0.6718  loss_rpn_cls: 0.0223  loss_rpn_bbox: 0.0922  loss_cls: 0.2329  acc: 91.1621  loss_bbox: 0.3244
2025/05/19 16:23:43 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:48  time: 0.3703  data_time: 0.0024  memory: 4361  loss: 0.6601  loss_rpn_cls: 0.0217  loss_rpn_bbox: 0.0916  loss_cls: 0.2264  acc: 91.1621  loss_bbox: 0.3203
2025/05/19 16:23:58 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:24:00 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:24:01 - mmengine - INFO - bbox_mAP_copypaste: 0.447 0.717 0.531 -1.000 0.301 0.474
2025/05/19 16:24:01 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4470  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.5310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4740  data_time: 0.0016  time: 0.0369
2025/05/19 16:24:20 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:14  time: 0.3712  data_time: 0.0049  memory: 4361  loss: 0.6537  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0899  loss_cls: 0.2233  acc: 93.9453  loss_bbox: 0.3203
2025/05/19 16:24:38 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:56  time: 0.3685  data_time: 0.0023  memory: 4361  loss: 0.6646  loss_rpn_cls: 0.0194  loss_rpn_bbox: 0.0919  loss_cls: 0.2285  acc: 90.6738  loss_bbox: 0.3248
2025/05/19 16:24:53 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:24:55 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:24:57 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.721 0.537 -1.000 0.300 0.477
2025/05/19 16:24:57 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4770  data_time: 0.0016  time: 0.0366
2025/05/19 16:25:15 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:22  time: 0.3761  data_time: 0.0050  memory: 4361  loss: 0.6727  loss_rpn_cls: 0.0210  loss_rpn_bbox: 0.0929  loss_cls: 0.2327  acc: 92.7246  loss_bbox: 0.3261
2025/05/19 16:25:34 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:04  time: 0.3653  data_time: 0.0023  memory: 4361  loss: 0.6677  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0915  loss_cls: 0.2289  acc: 88.5254  loss_bbox: 0.3246
2025/05/19 16:25:49 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:25:50 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:25:52 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.727 0.538 -1.000 0.300 0.481
2025/05/19 16:25:52 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7270  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0365
2025/05/19 16:26:06 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:26:11 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:30  time: 0.3746  data_time: 0.0056  memory: 4361  loss: 0.6659  loss_rpn_cls: 0.0226  loss_rpn_bbox: 0.0924  loss_cls: 0.2297  acc: 91.4062  loss_bbox: 0.3212
2025/05/19 16:26:29 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:12  time: 0.3694  data_time: 0.0024  memory: 4361  loss: 0.6596  loss_rpn_cls: 0.0205  loss_rpn_bbox: 0.0911  loss_cls: 0.2271  acc: 90.8203  loss_bbox: 0.3210
2025/05/19 16:26:44 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:26:46 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:26:47 - mmengine - INFO - bbox_mAP_copypaste: 0.456 0.730 0.542 -1.000 0.307 0.481
2025/05/19 16:26:47 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4560  coco/bbox_mAP_50: 0.7300  coco/bbox_mAP_75: 0.5420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.4810  data_time: 0.0016  time: 0.0366
2025/05/19 16:27:06 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:38  time: 0.3709  data_time: 0.0054  memory: 4361  loss: 0.6691  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0908  loss_cls: 0.2314  acc: 88.7695  loss_bbox: 0.3238
2025/05/19 16:27:24 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:19  time: 0.3709  data_time: 0.0022  memory: 4361  loss: 0.6691  loss_rpn_cls: 0.0234  loss_rpn_bbox: 0.0926  loss_cls: 0.2282  acc: 92.7246  loss_bbox: 0.3248
2025/05/19 16:27:39 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:27:41 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:27:42 - mmengine - INFO - bbox_mAP_copypaste: 0.451 0.720 0.539 -1.000 0.298 0.477
2025/05/19 16:27:42 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4510  coco/bbox_mAP_50: 0.7200  coco/bbox_mAP_75: 0.5390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4770  data_time: 0.0017  time: 0.0361
2025/05/19 16:28:01 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:46  time: 0.3727  data_time: 0.0058  memory: 4361  loss: 0.6611  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0900  loss_cls: 0.2284  acc: 92.1387  loss_bbox: 0.3196
2025/05/19 16:28:20 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:27  time: 0.3710  data_time: 0.0026  memory: 4361  loss: 0.6657  loss_rpn_cls: 0.0213  loss_rpn_bbox: 0.0924  loss_cls: 0.2311  acc: 90.6738  loss_bbox: 0.3209
2025/05/19 16:28:35 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:28:36 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:28:38 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.725 0.538 -1.000 0.300 0.479
2025/05/19 16:28:38 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7250  coco/bbox_mAP_75: 0.5380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4790  data_time: 0.0017  time: 0.0364
2025/05/19 16:28:56 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:54  time: 0.3702  data_time: 0.0055  memory: 4361  loss: 0.6419  loss_rpn_cls: 0.0192  loss_rpn_bbox: 0.0900  loss_cls: 0.2160  acc: 89.5020  loss_bbox: 0.3167
2025/05/19 16:29:15 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.3692  data_time: 0.0023  memory: 4361  loss: 0.6658  loss_rpn_cls: 0.0232  loss_rpn_bbox: 0.0922  loss_cls: 0.2301  acc: 89.3555  loss_bbox: 0.3204
2025/05/19 16:29:30 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:29:32 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:29:33 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.723 0.540 -1.000 0.304 0.477
2025/05/19 16:29:33 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7230  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4770  data_time: 0.0015  time: 0.0363
2025/05/19 16:29:52 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:02  time: 0.3729  data_time: 0.0054  memory: 4361  loss: 0.6710  loss_rpn_cls: 0.0221  loss_rpn_bbox: 0.0926  loss_cls: 0.2286  acc: 88.2812  loss_bbox: 0.3277
2025/05/19 16:30:10 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:43  time: 0.3670  data_time: 0.0023  memory: 4361  loss: 0.6394  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0901  loss_cls: 0.2176  acc: 91.8945  loss_bbox: 0.3125
2025/05/19 16:30:25 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:30:27 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:30:29 - mmengine - INFO - bbox_mAP_copypaste: 0.460 0.735 0.552 -1.000 0.308 0.485
2025/05/19 16:30:29 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4600  coco/bbox_mAP_50: 0.7350  coco/bbox_mAP_75: 0.5520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3080  coco/bbox_mAP_l: 0.4850  data_time: 0.0016  time: 0.0376
2025/05/19 16:30:47 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3713  data_time: 0.0065  memory: 4361  loss: 0.6599  loss_rpn_cls: 0.0196  loss_rpn_bbox: 0.0919  loss_cls: 0.2272  acc: 91.0156  loss_bbox: 0.3213
2025/05/19 16:31:06 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:51  time: 0.3703  data_time: 0.0024  memory: 4361  loss: 0.6512  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0903  loss_cls: 0.2239  acc: 91.1133  loss_bbox: 0.3168
2025/05/19 16:31:21 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:31:22 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:31:24 - mmengine - INFO - bbox_mAP_copypaste: 0.454 0.726 0.540 -1.000 0.301 0.480
2025/05/19 16:31:24 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4540  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3010  coco/bbox_mAP_l: 0.4800  data_time: 0.0017  time: 0.0364
2025/05/19 16:31:43 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3745  data_time: 0.0056  memory: 4361  loss: 0.6428  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0891  loss_cls: 0.2176  acc: 92.7734  loss_bbox: 0.3165
2025/05/19 16:32:01 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:59  time: 0.3687  data_time: 0.0023  memory: 4361  loss: 0.6644  loss_rpn_cls: 0.0231  loss_rpn_bbox: 0.0921  loss_cls: 0.2288  acc: 91.5039  loss_bbox: 0.3205
2025/05/19 16:32:16 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:32:18 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:32:20 - mmengine - INFO - bbox_mAP_copypaste: 0.453 0.726 0.541 -1.000 0.302 0.479
2025/05/19 16:32:20 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4530  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3020  coco/bbox_mAP_l: 0.4790  data_time: 0.0015  time: 0.0405
2025/05/19 16:32:39 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3751  data_time: 0.0055  memory: 4361  loss: 0.6523  loss_rpn_cls: 0.0208  loss_rpn_bbox: 0.0904  loss_cls: 0.2243  acc: 89.0137  loss_bbox: 0.3167
2025/05/19 16:32:39 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:32:57 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3686  data_time: 0.0024  memory: 4361  loss: 0.6587  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0910  loss_cls: 0.2260  acc: 92.8711  loss_bbox: 0.3216
2025/05/19 16:33:12 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:33:14 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:33:15 - mmengine - INFO - bbox_mAP_copypaste: 0.450 0.721 0.532 -1.000 0.298 0.476
2025/05/19 16:33:15 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4500  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2980  coco/bbox_mAP_l: 0.4760  data_time: 0.0016  time: 0.0367
2025/05/19 16:33:34 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3721  data_time: 0.0059  memory: 4361  loss: 0.6516  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0903  loss_cls: 0.2209  acc: 90.0879  loss_bbox: 0.3204
2025/05/19 16:33:52 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3694  data_time: 0.0024  memory: 4361  loss: 0.6631  loss_rpn_cls: 0.0227  loss_rpn_bbox: 0.0928  loss_cls: 0.2272  acc: 91.0645  loss_bbox: 0.3204
2025/05/19 16:34:07 - mmengine - INFO - Exp name: fasterrcnn_fs_equalize_20250519_160609
2025/05/19 16:34:07 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/19 16:34:10 - mmengine - INFO - Evaluating bbox...
2025/05/19 16:34:12 - mmengine - INFO - bbox_mAP_copypaste: 0.452 0.726 0.540 -1.000 0.304 0.478
2025/05/19 16:34:12 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4520  coco/bbox_mAP_50: 0.7260  coco/bbox_mAP_75: 0.5400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3040  coco/bbox_mAP_l: 0.4780  data_time: 0.0016  time: 0.0363
