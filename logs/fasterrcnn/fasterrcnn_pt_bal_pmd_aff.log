2025/05/13 23:00:10 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 516286266
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 516286266
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 23:00:11 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(type='PhotoMetricDistortion'),
                dict(type='RandomAffine'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 23:00:11 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 23:00:11 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 23:00:12 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 23:00:12 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 23:00:12 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 23:00:13 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 23:00:13 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 23:00:13 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 23:00:13 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 23:00:36 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:32:42  time: 0.4695  data_time: 0.0938  memory: 4359  loss: 2.4212  loss_rpn_cls: 0.5965  loss_rpn_bbox: 0.2066  loss_cls: 0.9286  acc: 77.0508  loss_bbox: 0.6895
2025/05/13 23:00:54 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:36  time: 0.3616  data_time: 0.0044  memory: 4359  loss: 1.4274  loss_rpn_cls: 0.1021  loss_rpn_bbox: 0.1609  loss_cls: 0.5801  acc: 84.0332  loss_bbox: 0.5843
2025/05/13 23:01:09 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:01:19 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:01:21 - mmengine - INFO - bbox_mAP_copypaste: 0.149 0.303 0.120 -1.000 0.086 0.157
2025/05/13 23:01:21 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1490  coco/bbox_mAP_50: 0.3030  coco/bbox_mAP_75: 0.1200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0860  coco/bbox_mAP_l: 0.1570  data_time: 0.1634  time: 0.2063
2025/05/13 23:01:21 - mmengine - INFO - The best checkpoint with 0.1490 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 23:01:40 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:28  time: 0.3729  data_time: 0.0078  memory: 4359  loss: 1.2081  loss_rpn_cls: 0.0824  loss_rpn_bbox: 0.1522  loss_cls: 0.4951  acc: 83.9355  loss_bbox: 0.4784
2025/05/13 23:01:58 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:43  time: 0.3619  data_time: 0.0043  memory: 4359  loss: 1.1422  loss_rpn_cls: 0.0777  loss_rpn_bbox: 0.1552  loss_cls: 0.4488  acc: 83.0078  loss_bbox: 0.4605
2025/05/13 23:02:13 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:02:15 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:02:16 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.504 0.275 -1.000 0.200 0.297
2025/05/13 23:02:16 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5040  coco/bbox_mAP_75: 0.2750  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.2970  data_time: 0.0016  time: 0.0372
2025/05/13 23:02:16 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 23:02:17 - mmengine - INFO - The best checkpoint with 0.2790 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 23:02:36 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:46  time: 0.3687  data_time: 0.0076  memory: 4359  loss: 1.1349  loss_rpn_cls: 0.0764  loss_rpn_bbox: 0.1485  loss_cls: 0.4557  acc: 83.6914  loss_bbox: 0.4543
2025/05/13 23:02:54 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:18  time: 0.3640  data_time: 0.0041  memory: 4359  loss: 1.1215  loss_rpn_cls: 0.0735  loss_rpn_bbox: 0.1500  loss_cls: 0.4483  acc: 83.3984  loss_bbox: 0.4497
2025/05/13 23:03:09 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:03:11 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:03:12 - mmengine - INFO - bbox_mAP_copypaste: 0.158 0.313 0.141 -1.000 0.071 0.169
2025/05/13 23:03:12 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1580  coco/bbox_mAP_50: 0.3130  coco/bbox_mAP_75: 0.1410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0710  coco/bbox_mAP_l: 0.1690  data_time: 0.0016  time: 0.0374
2025/05/13 23:03:31 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:23:37  time: 0.3718  data_time: 0.0078  memory: 4359  loss: 1.1489  loss_rpn_cls: 0.0758  loss_rpn_bbox: 0.1607  loss_cls: 0.4569  acc: 83.1543  loss_bbox: 0.4554
2025/05/13 23:03:49 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:13  time: 0.3621  data_time: 0.0043  memory: 4359  loss: 1.1882  loss_rpn_cls: 0.0825  loss_rpn_bbox: 0.1618  loss_cls: 0.4869  acc: 80.8594  loss_bbox: 0.4570
2025/05/13 23:04:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:04:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:04:07 - mmengine - INFO - bbox_mAP_copypaste: 0.300 0.526 0.314 -1.000 0.207 0.330
2025/05/13 23:04:07 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3000  coco/bbox_mAP_50: 0.5260  coco/bbox_mAP_75: 0.3140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3300  data_time: 0.0017  time: 0.0378
2025/05/13 23:04:07 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 23:04:08 - mmengine - INFO - The best checkpoint with 0.3000 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/13 23:04:27 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:22:34  time: 0.3715  data_time: 0.0077  memory: 4359  loss: 1.0860  loss_rpn_cls: 0.0712  loss_rpn_bbox: 0.1490  loss_cls: 0.4298  acc: 81.6895  loss_bbox: 0.4358
2025/05/13 23:04:45 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:13  time: 0.3642  data_time: 0.0041  memory: 4359  loss: 1.1041  loss_rpn_cls: 0.0696  loss_rpn_bbox: 0.1537  loss_cls: 0.4224  acc: 85.7422  loss_bbox: 0.4584
2025/05/13 23:05:00 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:05:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:05:03 - mmengine - INFO - bbox_mAP_copypaste: 0.281 0.531 0.260 -1.000 0.207 0.299
2025/05/13 23:05:03 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2810  coco/bbox_mAP_50: 0.5310  coco/bbox_mAP_75: 0.2600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.2990  data_time: 0.0015  time: 0.0375
2025/05/13 23:05:22 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:21:36  time: 0.3685  data_time: 0.0079  memory: 4359  loss: 1.0652  loss_rpn_cls: 0.0647  loss_rpn_bbox: 0.1490  loss_cls: 0.4106  acc: 85.8398  loss_bbox: 0.4409
2025/05/13 23:05:40 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:16  time: 0.3672  data_time: 0.0041  memory: 4359  loss: 1.0412  loss_rpn_cls: 0.0625  loss_rpn_bbox: 0.1421  loss_cls: 0.4092  acc: 86.5723  loss_bbox: 0.4274
2025/05/13 23:05:55 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:05:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:05:58 - mmengine - INFO - bbox_mAP_copypaste: 0.364 0.658 0.369 -1.000 0.232 0.392
2025/05/13 23:05:58 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3640  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.3690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2320  coco/bbox_mAP_l: 0.3920  data_time: 0.0016  time: 0.0378
2025/05/13 23:05:58 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/13 23:05:59 - mmengine - INFO - The best checkpoint with 0.3640 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/13 23:06:18 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:40  time: 0.3724  data_time: 0.0078  memory: 4359  loss: 0.9869  loss_rpn_cls: 0.0584  loss_rpn_bbox: 0.1355  loss_cls: 0.3762  acc: 84.9010  loss_bbox: 0.4168
2025/05/13 23:06:36 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:20  time: 0.3621  data_time: 0.0042  memory: 4359  loss: 1.0240  loss_rpn_cls: 0.0636  loss_rpn_bbox: 0.1415  loss_cls: 0.3924  acc: 86.6699  loss_bbox: 0.4266
2025/05/13 23:06:51 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:06:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:06:54 - mmengine - INFO - bbox_mAP_copypaste: 0.346 0.628 0.352 -1.000 0.200 0.378
2025/05/13 23:06:54 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3460  coco/bbox_mAP_50: 0.6280  coco/bbox_mAP_75: 0.3520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.3780  data_time: 0.0015  time: 0.0374
2025/05/13 23:06:59 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:07:13 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:45  time: 0.3675  data_time: 0.0077  memory: 4359  loss: 1.0085  loss_rpn_cls: 0.0616  loss_rpn_bbox: 0.1461  loss_cls: 0.3763  acc: 86.4258  loss_bbox: 0.4245
2025/05/13 23:07:31 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:25  time: 0.3642  data_time: 0.0042  memory: 4359  loss: 0.9855  loss_rpn_cls: 0.0587  loss_rpn_bbox: 0.1375  loss_cls: 0.3629  acc: 88.6230  loss_bbox: 0.4264
2025/05/13 23:07:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:07:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:07:49 - mmengine - INFO - bbox_mAP_copypaste: 0.333 0.616 0.320 -1.000 0.206 0.362
2025/05/13 23:07:49 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3330  coco/bbox_mAP_50: 0.6160  coco/bbox_mAP_75: 0.3200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3620  data_time: 0.0016  time: 0.0372
2025/05/13 23:08:08 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:51  time: 0.3723  data_time: 0.0077  memory: 4359  loss: 0.9228  loss_rpn_cls: 0.0512  loss_rpn_bbox: 0.1250  loss_cls: 0.3438  acc: 88.8672  loss_bbox: 0.4028
2025/05/13 23:08:26 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:18:32  time: 0.3678  data_time: 0.0043  memory: 4359  loss: 0.8997  loss_rpn_cls: 0.0492  loss_rpn_bbox: 0.1215  loss_cls: 0.3344  acc: 86.3770  loss_bbox: 0.3946
2025/05/13 23:08:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:08:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:08:44 - mmengine - INFO - bbox_mAP_copypaste: 0.363 0.654 0.369 -1.000 0.233 0.391
2025/05/13 23:08:44 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3630  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2330  coco/bbox_mAP_l: 0.3910  data_time: 0.0017  time: 0.0376
2025/05/13 23:09:03 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:57  time: 0.3693  data_time: 0.0079  memory: 4359  loss: 0.8844  loss_rpn_cls: 0.0486  loss_rpn_bbox: 0.1196  loss_cls: 0.3260  acc: 89.1602  loss_bbox: 0.3903
2025/05/13 23:09:21 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:39  time: 0.3698  data_time: 0.0041  memory: 4359  loss: 0.8952  loss_rpn_cls: 0.0441  loss_rpn_bbox: 0.1187  loss_cls: 0.3374  acc: 84.7168  loss_bbox: 0.3950
2025/05/13 23:09:36 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:09:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:09:39 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.646 0.341 -1.000 0.218 0.376
2025/05/13 23:09:39 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3760  data_time: 0.0017  time: 0.0374
2025/05/13 23:09:58 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:05  time: 0.3731  data_time: 0.0077  memory: 4359  loss: 0.8643  loss_rpn_cls: 0.0482  loss_rpn_bbox: 0.1161  loss_cls: 0.3228  acc: 88.3301  loss_bbox: 0.3772
2025/05/13 23:10:17 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:46  time: 0.3710  data_time: 0.0042  memory: 4359  loss: 0.8755  loss_rpn_cls: 0.0439  loss_rpn_bbox: 0.1175  loss_cls: 0.3260  acc: 88.2324  loss_bbox: 0.3880
2025/05/13 23:10:32 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:10:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:10:35 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.659 0.361 -1.000 0.226 0.386
2025/05/13 23:10:35 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6590  coco/bbox_mAP_75: 0.3610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2260  coco/bbox_mAP_l: 0.3860  data_time: 0.0017  time: 0.0375
2025/05/13 23:10:54 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:13  time: 0.3722  data_time: 0.0076  memory: 4359  loss: 0.8655  loss_rpn_cls: 0.0430  loss_rpn_bbox: 0.1163  loss_cls: 0.3199  acc: 86.0840  loss_bbox: 0.3863
2025/05/13 23:11:12 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:54  time: 0.3697  data_time: 0.0043  memory: 4359  loss: 0.8589  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.1136  loss_cls: 0.3227  acc: 83.1543  loss_bbox: 0.3782
2025/05/13 23:11:27 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:11:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:11:31 - mmengine - INFO - bbox_mAP_copypaste: 0.370 0.654 0.388 -1.000 0.221 0.398
2025/05/13 23:11:31 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3700  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3980  data_time: 0.0016  time: 0.0379
2025/05/13 23:11:31 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/13 23:11:31 - mmengine - INFO - The best checkpoint with 0.3700 coco/bbox_mAP at 12 epoch is saved to best_coco_bbox_mAP_epoch_12.pth.
2025/05/13 23:11:50 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:20  time: 0.3690  data_time: 0.0077  memory: 4359  loss: 0.8654  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.1138  loss_cls: 0.3235  acc: 88.5742  loss_bbox: 0.3836
2025/05/13 23:12:08 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:02  time: 0.3657  data_time: 0.0042  memory: 4359  loss: 0.8608  loss_rpn_cls: 0.0450  loss_rpn_bbox: 0.1148  loss_cls: 0.3206  acc: 87.1582  loss_bbox: 0.3804
2025/05/13 23:12:23 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:12:25 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:12:27 - mmengine - INFO - bbox_mAP_copypaste: 0.362 0.653 0.372 -1.000 0.211 0.390
2025/05/13 23:12:27 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3620  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3900  data_time: 0.0016  time: 0.0385
2025/05/13 23:12:45 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:28  time: 0.3708  data_time: 0.0076  memory: 4359  loss: 0.8661  loss_rpn_cls: 0.0457  loss_rpn_bbox: 0.1164  loss_cls: 0.3230  acc: 86.9629  loss_bbox: 0.3810
2025/05/13 23:13:04 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:09  time: 0.3659  data_time: 0.0043  memory: 4359  loss: 0.8618  loss_rpn_cls: 0.0439  loss_rpn_bbox: 0.1129  loss_cls: 0.3216  acc: 85.8398  loss_bbox: 0.3834
2025/05/13 23:13:19 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:13:20 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:13:22 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.656 0.363 -1.000 0.213 0.388
2025/05/13 23:13:22 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3880  data_time: 0.0016  time: 0.0377
2025/05/13 23:13:32 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:13:41 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:36  time: 0.3731  data_time: 0.0078  memory: 4359  loss: 0.8552  loss_rpn_cls: 0.0417  loss_rpn_bbox: 0.1137  loss_cls: 0.3219  acc: 90.1367  loss_bbox: 0.3780
2025/05/13 23:13:59 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:17  time: 0.3681  data_time: 0.0042  memory: 4359  loss: 0.8633  loss_rpn_cls: 0.0454  loss_rpn_bbox: 0.1156  loss_cls: 0.3223  acc: 84.9609  loss_bbox: 0.3799
2025/05/13 23:14:14 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:14:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:14:17 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.658 0.355 -1.000 0.209 0.384
2025/05/13 23:14:17 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0373
2025/05/13 23:14:36 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:43  time: 0.3713  data_time: 0.0080  memory: 4359  loss: 0.8616  loss_rpn_cls: 0.0422  loss_rpn_bbox: 0.1143  loss_cls: 0.3178  acc: 88.9160  loss_bbox: 0.3872
2025/05/13 23:14:54 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:24  time: 0.3679  data_time: 0.0041  memory: 4359  loss: 0.8599  loss_rpn_cls: 0.0432  loss_rpn_bbox: 0.1159  loss_cls: 0.3215  acc: 88.7695  loss_bbox: 0.3792
2025/05/13 23:15:09 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:15:11 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:15:13 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.649 0.350 -1.000 0.207 0.379
2025/05/13 23:15:13 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6490  coco/bbox_mAP_75: 0.3500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3790  data_time: 0.0018  time: 0.0378
2025/05/13 23:15:31 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:51  time: 0.3709  data_time: 0.0076  memory: 4359  loss: 0.8648  loss_rpn_cls: 0.0453  loss_rpn_bbox: 0.1135  loss_cls: 0.3262  acc: 90.2832  loss_bbox: 0.3799
2025/05/13 23:15:49 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:32  time: 0.3657  data_time: 0.0042  memory: 4359  loss: 0.8513  loss_rpn_cls: 0.0426  loss_rpn_bbox: 0.1155  loss_cls: 0.3093  acc: 88.8184  loss_bbox: 0.3839
2025/05/13 23:16:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:16:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:16:08 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.653 0.352 -1.000 0.211 0.382
2025/05/13 23:16:08 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3820  data_time: 0.0014  time: 0.0374
2025/05/13 23:16:26 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:58  time: 0.3695  data_time: 0.0077  memory: 4359  loss: 0.8437  loss_rpn_cls: 0.0427  loss_rpn_bbox: 0.1135  loss_cls: 0.3108  acc: 88.4277  loss_bbox: 0.3766
2025/05/13 23:16:45 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:40  time: 0.3708  data_time: 0.0042  memory: 4359  loss: 0.8661  loss_rpn_cls: 0.0456  loss_rpn_bbox: 0.1164  loss_cls: 0.3201  acc: 86.0840  loss_bbox: 0.3840
2025/05/13 23:17:00 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:17:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:17:03 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.655 0.358 -1.000 0.210 0.387
2025/05/13 23:17:03 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3870  data_time: 0.0015  time: 0.0375
2025/05/13 23:17:22 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:06  time: 0.3692  data_time: 0.0078  memory: 4359  loss: 0.8539  loss_rpn_cls: 0.0423  loss_rpn_bbox: 0.1139  loss_cls: 0.3152  acc: 91.5527  loss_bbox: 0.3825
2025/05/13 23:17:40 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:48  time: 0.3687  data_time: 0.0041  memory: 4359  loss: 0.8556  loss_rpn_cls: 0.0459  loss_rpn_bbox: 0.1135  loss_cls: 0.3193  acc: 85.2539  loss_bbox: 0.3769
2025/05/13 23:17:55 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:17:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:17:58 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.653 0.364 -1.000 0.209 0.389
2025/05/13 23:17:58 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3890  data_time: 0.0015  time: 0.0373
2025/05/13 23:18:17 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:14  time: 0.3733  data_time: 0.0075  memory: 4359  loss: 0.8698  loss_rpn_cls: 0.0430  loss_rpn_bbox: 0.1186  loss_cls: 0.3252  acc: 86.1816  loss_bbox: 0.3830
2025/05/13 23:18:35 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:56  time: 0.3652  data_time: 0.0042  memory: 4359  loss: 0.8521  loss_rpn_cls: 0.0411  loss_rpn_bbox: 0.1118  loss_cls: 0.3190  acc: 86.4258  loss_bbox: 0.3803
2025/05/13 23:18:50 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:18:52 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:18:54 - mmengine - INFO - bbox_mAP_copypaste: 0.365 0.655 0.373 -1.000 0.218 0.393
2025/05/13 23:18:54 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3650  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3930  data_time: 0.0015  time: 0.0373
2025/05/13 23:19:12 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:22  time: 0.3725  data_time: 0.0076  memory: 4359  loss: 0.8692  loss_rpn_cls: 0.0438  loss_rpn_bbox: 0.1197  loss_cls: 0.3239  acc: 85.9375  loss_bbox: 0.3817
2025/05/13 23:19:31 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:03  time: 0.3666  data_time: 0.0044  memory: 4359  loss: 0.8499  loss_rpn_cls: 0.0462  loss_rpn_bbox: 0.1119  loss_cls: 0.3130  acc: 84.9609  loss_bbox: 0.3787
2025/05/13 23:19:46 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:19:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:19:49 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.655 0.360 -1.000 0.216 0.388
2025/05/13 23:19:49 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.3880  data_time: 0.0015  time: 0.0374
2025/05/13 23:20:04 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:20:08 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:30  time: 0.3721  data_time: 0.0076  memory: 4359  loss: 0.8627  loss_rpn_cls: 0.0439  loss_rpn_bbox: 0.1195  loss_cls: 0.3174  acc: 88.3301  loss_bbox: 0.3819
2025/05/13 23:20:26 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:11  time: 0.3662  data_time: 0.0043  memory: 4359  loss: 0.8724  loss_rpn_cls: 0.0463  loss_rpn_bbox: 0.1182  loss_cls: 0.3200  acc: 87.3047  loss_bbox: 0.3878
2025/05/13 23:20:41 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:20:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:20:44 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.646 0.354 -1.000 0.205 0.382
2025/05/13 23:20:44 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6460  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3820  data_time: 0.0016  time: 0.0387
2025/05/13 23:21:03 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:38  time: 0.3697  data_time: 0.0076  memory: 4359  loss: 0.8502  loss_rpn_cls: 0.0434  loss_rpn_bbox: 0.1118  loss_cls: 0.3127  acc: 86.1816  loss_bbox: 0.3823
2025/05/13 23:21:21 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:19  time: 0.3679  data_time: 0.0043  memory: 4359  loss: 0.8465  loss_rpn_cls: 0.0428  loss_rpn_bbox: 0.1130  loss_cls: 0.3182  acc: 88.5254  loss_bbox: 0.3726
2025/05/13 23:21:36 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:21:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:21:40 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.653 0.362 -1.000 0.208 0.384
2025/05/13 23:21:40 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6530  coco/bbox_mAP_75: 0.3620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3840  data_time: 0.0016  time: 0.0379
2025/05/13 23:21:58 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:46  time: 0.3749  data_time: 0.0076  memory: 4359  loss: 0.8586  loss_rpn_cls: 0.0453  loss_rpn_bbox: 0.1132  loss_cls: 0.3184  acc: 88.9648  loss_bbox: 0.3817
2025/05/13 23:22:17 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:27  time: 0.3667  data_time: 0.0042  memory: 4359  loss: 0.8442  loss_rpn_cls: 0.0448  loss_rpn_bbox: 0.1159  loss_cls: 0.3098  acc: 88.9648  loss_bbox: 0.3736
2025/05/13 23:22:32 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:22:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:22:35 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.651 0.360 -1.000 0.222 0.387
2025/05/13 23:22:35 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3870  data_time: 0.0016  time: 0.0377
2025/05/13 23:22:54 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:53  time: 0.3714  data_time: 0.0076  memory: 4359  loss: 0.8626  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.1157  loss_cls: 0.3188  acc: 88.4277  loss_bbox: 0.3837
2025/05/13 23:23:12 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:35  time: 0.3672  data_time: 0.0043  memory: 4359  loss: 0.8725  loss_rpn_cls: 0.0447  loss_rpn_bbox: 0.1156  loss_cls: 0.3256  acc: 86.0352  loss_bbox: 0.3866
2025/05/13 23:23:27 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:23:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:23:30 - mmengine - INFO - bbox_mAP_copypaste: 0.352 0.652 0.340 -1.000 0.206 0.379
2025/05/13 23:23:30 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3520  coco/bbox_mAP_50: 0.6520  coco/bbox_mAP_75: 0.3400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3790  data_time: 0.0015  time: 0.0373
2025/05/13 23:23:49 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:01  time: 0.3689  data_time: 0.0080  memory: 4359  loss: 0.8572  loss_rpn_cls: 0.0454  loss_rpn_bbox: 0.1135  loss_cls: 0.3156  acc: 85.3027  loss_bbox: 0.3827
2025/05/13 23:24:07 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:43  time: 0.3675  data_time: 0.0042  memory: 4359  loss: 0.8558  loss_rpn_cls: 0.0433  loss_rpn_bbox: 0.1158  loss_cls: 0.3149  acc: 88.2812  loss_bbox: 0.3818
2025/05/13 23:24:22 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:24:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:24:25 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.652 0.359 -1.000 0.221 0.386
2025/05/13 23:24:25 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6520  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3860  data_time: 0.0017  time: 0.0374
2025/05/13 23:24:44 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:09  time: 0.3688  data_time: 0.0077  memory: 4359  loss: 0.8623  loss_rpn_cls: 0.0416  loss_rpn_bbox: 0.1132  loss_cls: 0.3209  acc: 88.7207  loss_bbox: 0.3866
2025/05/13 23:25:02 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:51  time: 0.3717  data_time: 0.0042  memory: 4359  loss: 0.8595  loss_rpn_cls: 0.0462  loss_rpn_bbox: 0.1159  loss_cls: 0.3188  acc: 88.2324  loss_bbox: 0.3786
2025/05/13 23:25:17 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:25:19 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:25:21 - mmengine - INFO - bbox_mAP_copypaste: 0.353 0.655 0.342 -1.000 0.206 0.380
2025/05/13 23:25:21 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3530  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3800  data_time: 0.0017  time: 0.0373
2025/05/13 23:25:39 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:17  time: 0.3699  data_time: 0.0076  memory: 4359  loss: 0.8399  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1149  loss_cls: 0.3094  acc: 90.2344  loss_bbox: 0.3757
2025/05/13 23:25:58 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:59  time: 0.3682  data_time: 0.0042  memory: 4359  loss: 0.8450  loss_rpn_cls: 0.0446  loss_rpn_bbox: 0.1119  loss_cls: 0.3150  acc: 88.4277  loss_bbox: 0.3736
2025/05/13 23:26:13 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:26:14 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:26:16 - mmengine - INFO - bbox_mAP_copypaste: 0.365 0.656 0.371 -1.000 0.211 0.394
2025/05/13 23:26:16 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3650  coco/bbox_mAP_50: 0.6560  coco/bbox_mAP_75: 0.3710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2110  coco/bbox_mAP_l: 0.3940  data_time: 0.0016  time: 0.0373
2025/05/13 23:26:34 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:25  time: 0.3708  data_time: 0.0077  memory: 4359  loss: 0.8467  loss_rpn_cls: 0.0453  loss_rpn_bbox: 0.1126  loss_cls: 0.3181  acc: 90.1855  loss_bbox: 0.3707
2025/05/13 23:26:35 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:26:53 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:07  time: 0.3672  data_time: 0.0045  memory: 4359  loss: 0.8560  loss_rpn_cls: 0.0438  loss_rpn_bbox: 0.1159  loss_cls: 0.3133  acc: 88.7695  loss_bbox: 0.3830
2025/05/13 23:27:08 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:27:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:27:11 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.655 0.369 -1.000 0.212 0.389
2025/05/13 23:27:11 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3690  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3890  data_time: 0.0015  time: 0.0371
2025/05/13 23:27:30 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:33  time: 0.3695  data_time: 0.0076  memory: 4359  loss: 0.8575  loss_rpn_cls: 0.0391  loss_rpn_bbox: 0.1140  loss_cls: 0.3209  acc: 88.3301  loss_bbox: 0.3835
2025/05/13 23:27:48 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3691  data_time: 0.0041  memory: 4359  loss: 0.8460  loss_rpn_cls: 0.0416  loss_rpn_bbox: 0.1111  loss_cls: 0.3180  acc: 87.9395  loss_bbox: 0.3753
2025/05/13 23:28:03 - mmengine - INFO - Exp name: fasterrcnn_pt_bal_pmd_aff_20250513_230007
2025/05/13 23:28:03 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 23:28:06 - mmengine - INFO - Evaluating bbox...
2025/05/13 23:28:08 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.650 0.359 -1.000 0.212 0.386
2025/05/13 23:28:08 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6500  coco/bbox_mAP_75: 0.3590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3860  data_time: 0.0015  time: 0.0378
