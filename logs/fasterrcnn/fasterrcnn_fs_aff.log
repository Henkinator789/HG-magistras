2025/05/13 19:26:32 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1882891053
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1882891053
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 19:26:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 19:26:32 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 19:26:32 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 19:26:33 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 19:26:33 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 19:26:33 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 19:26:33 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 19:26:33 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 19:26:33 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 19:26:56 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:31:20  time: 0.4498  data_time: 0.0916  memory: 4360  loss: 2.2181  loss_rpn_cls: 0.6531  loss_rpn_bbox: 0.2786  loss_cls: 0.8675  acc: 79.2480  loss_bbox: 0.4189
2025/05/13 19:27:14 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:28:02  time: 0.3648  data_time: 0.0023  memory: 4360  loss: 1.9813  loss_rpn_cls: 0.3820  loss_rpn_bbox: 0.2687  loss_cls: 0.7065  acc: 76.5625  loss_bbox: 0.6241
2025/05/13 19:27:29 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:27:39 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:27:41 - mmengine - INFO - bbox_mAP_copypaste: 0.071 0.223 0.016 -1.000 0.060 0.075
2025/05/13 19:27:41 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0710  coco/bbox_mAP_50: 0.2230  coco/bbox_mAP_75: 0.0160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0600  coco/bbox_mAP_l: 0.0750  data_time: 0.1661  time: 0.2080
2025/05/13 19:27:42 - mmengine - INFO - The best checkpoint with 0.0710 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 19:28:00 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:25:55  time: 0.3610  data_time: 0.0050  memory: 4360  loss: 1.7612  loss_rpn_cls: 0.2077  loss_rpn_bbox: 0.2389  loss_cls: 0.6126  acc: 80.0293  loss_bbox: 0.7020
2025/05/13 19:28:17 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:25:10  time: 0.3540  data_time: 0.0024  memory: 4360  loss: 1.6021  loss_rpn_cls: 0.1609  loss_rpn_bbox: 0.2254  loss_cls: 0.5659  acc: 77.0854  loss_bbox: 0.6500
2025/05/13 19:28:32 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:28:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:28:35 - mmengine - INFO - bbox_mAP_copypaste: 0.164 0.343 0.125 -1.000 0.095 0.176
2025/05/13 19:28:35 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1640  coco/bbox_mAP_50: 0.3430  coco/bbox_mAP_75: 0.1250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0950  coco/bbox_mAP_l: 0.1760  data_time: 0.0015  time: 0.0374
2025/05/13 19:28:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 19:28:36 - mmengine - INFO - The best checkpoint with 0.1640 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 19:28:54 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:24:12  time: 0.3594  data_time: 0.0050  memory: 4361  loss: 1.3882  loss_rpn_cls: 0.1246  loss_rpn_bbox: 0.1958  loss_cls: 0.4840  acc: 85.5469  loss_bbox: 0.5838
2025/05/13 19:29:12 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:23:42  time: 0.3509  data_time: 0.0025  memory: 4360  loss: 1.3775  loss_rpn_cls: 0.1205  loss_rpn_bbox: 0.1960  loss_cls: 0.4856  acc: 84.7065  loss_bbox: 0.5754
2025/05/13 19:29:26 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:29:28 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:29:29 - mmengine - INFO - bbox_mAP_copypaste: 0.273 0.565 0.214 -1.000 0.157 0.296
2025/05/13 19:29:29 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2730  coco/bbox_mAP_50: 0.5650  coco/bbox_mAP_75: 0.2140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1570  coco/bbox_mAP_l: 0.2960  data_time: 0.0016  time: 0.0378
2025/05/13 19:29:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 19:29:30 - mmengine - INFO - The best checkpoint with 0.2730 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 19:29:48 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:22:58  time: 0.3577  data_time: 0.0050  memory: 4361  loss: 1.2734  loss_rpn_cls: 0.1001  loss_rpn_bbox: 0.1816  loss_cls: 0.4581  acc: 78.7598  loss_bbox: 0.5335
2025/05/13 19:30:05 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:22:33  time: 0.3493  data_time: 0.0023  memory: 4361  loss: 1.2378  loss_rpn_cls: 0.1007  loss_rpn_bbox: 0.1753  loss_cls: 0.4455  acc: 80.7229  loss_bbox: 0.5162
2025/05/13 19:30:20 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:30:22 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:30:23 - mmengine - INFO - bbox_mAP_copypaste: 0.258 0.566 0.161 -1.000 0.210 0.270
2025/05/13 19:30:23 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2580  coco/bbox_mAP_50: 0.5660  coco/bbox_mAP_75: 0.1610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.2700  data_time: 0.0015  time: 0.0374
2025/05/13 19:30:41 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:21:53  time: 0.3557  data_time: 0.0051  memory: 4361  loss: 1.2013  loss_rpn_cls: 0.0891  loss_rpn_bbox: 0.1736  loss_cls: 0.4354  acc: 86.0352  loss_bbox: 0.5033
2025/05/13 19:30:59 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:21:32  time: 0.3508  data_time: 0.0024  memory: 4361  loss: 1.1483  loss_rpn_cls: 0.0863  loss_rpn_bbox: 0.1582  loss_cls: 0.4093  acc: 84.8139  loss_bbox: 0.4945
2025/05/13 19:31:13 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:31:15 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:31:16 - mmengine - INFO - bbox_mAP_copypaste: 0.347 0.679 0.316 -1.000 0.236 0.365
2025/05/13 19:31:16 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3470  coco/bbox_mAP_50: 0.6790  coco/bbox_mAP_75: 0.3160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2360  coco/bbox_mAP_l: 0.3650  data_time: 0.0017  time: 0.0378
2025/05/13 19:31:16 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 19:31:17 - mmengine - INFO - The best checkpoint with 0.3470 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/13 19:31:35 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:20:56  time: 0.3604  data_time: 0.0050  memory: 4361  loss: 1.1210  loss_rpn_cls: 0.0811  loss_rpn_bbox: 0.1610  loss_cls: 0.4079  acc: 86.3770  loss_bbox: 0.4710
2025/05/13 19:31:53 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:20:35  time: 0.3513  data_time: 0.0025  memory: 4361  loss: 1.0801  loss_rpn_cls: 0.0713  loss_rpn_bbox: 0.1518  loss_cls: 0.3849  acc: 85.5957  loss_bbox: 0.4722
2025/05/13 19:32:07 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:32:09 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:32:10 - mmengine - INFO - bbox_mAP_copypaste: 0.315 0.600 0.302 -1.000 0.203 0.337
2025/05/13 19:32:10 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3150  coco/bbox_mAP_50: 0.6000  coco/bbox_mAP_75: 0.3020  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3370  data_time: 0.0015  time: 0.0375
2025/05/13 19:32:28 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:20:00  time: 0.3599  data_time: 0.0051  memory: 4360  loss: 1.1062  loss_rpn_cls: 0.0797  loss_rpn_bbox: 0.1618  loss_cls: 0.3918  acc: 86.9141  loss_bbox: 0.4729
2025/05/13 19:32:46 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:19:41  time: 0.3530  data_time: 0.0024  memory: 4360  loss: 1.0673  loss_rpn_cls: 0.0702  loss_rpn_bbox: 0.1455  loss_cls: 0.3846  acc: 82.9590  loss_bbox: 0.4671
2025/05/13 19:33:00 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:33:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:33:04 - mmengine - INFO - bbox_mAP_copypaste: 0.338 0.648 0.328 -1.000 0.199 0.364
2025/05/13 19:33:04 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3380  coco/bbox_mAP_50: 0.6480  coco/bbox_mAP_75: 0.3280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.3640  data_time: 0.0015  time: 0.0375
2025/05/13 19:33:08 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:33:21 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:19:06  time: 0.3536  data_time: 0.0050  memory: 4361  loss: 1.0416  loss_rpn_cls: 0.0629  loss_rpn_bbox: 0.1498  loss_cls: 0.3711  acc: 84.4238  loss_bbox: 0.4577
2025/05/13 19:33:39 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:18:48  time: 0.3557  data_time: 0.0023  memory: 4361  loss: 1.0714  loss_rpn_cls: 0.0660  loss_rpn_bbox: 0.1545  loss_cls: 0.3903  acc: 84.8855  loss_bbox: 0.4606
2025/05/13 19:33:53 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:33:55 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:33:57 - mmengine - INFO - bbox_mAP_copypaste: 0.363 0.660 0.356 -1.000 0.230 0.388
2025/05/13 19:33:57 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3630  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3880  data_time: 0.0016  time: 0.0376
2025/05/13 19:33:57 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/13 19:33:58 - mmengine - INFO - The best checkpoint with 0.3630 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/13 19:34:16 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:18:14  time: 0.3606  data_time: 0.0050  memory: 4361  loss: 0.9526  loss_rpn_cls: 0.0574  loss_rpn_bbox: 0.1297  loss_cls: 0.3397  acc: 89.3555  loss_bbox: 0.4258
2025/05/13 19:34:33 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:17:56  time: 0.3561  data_time: 0.0024  memory: 4360  loss: 0.9205  loss_rpn_cls: 0.0509  loss_rpn_bbox: 0.1243  loss_cls: 0.3262  acc: 87.7930  loss_bbox: 0.4190
2025/05/13 19:34:48 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:34:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:34:51 - mmengine - INFO - bbox_mAP_copypaste: 0.351 0.674 0.323 -1.000 0.208 0.378
2025/05/13 19:34:51 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3510  coco/bbox_mAP_50: 0.6740  coco/bbox_mAP_75: 0.3230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3780  data_time: 0.0015  time: 0.0375
2025/05/13 19:35:09 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:17:23  time: 0.3587  data_time: 0.0050  memory: 4360  loss: 0.9117  loss_rpn_cls: 0.0489  loss_rpn_bbox: 0.1231  loss_cls: 0.3240  acc: 88.1348  loss_bbox: 0.4157
2025/05/13 19:35:27 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:17:04  time: 0.3514  data_time: 0.0022  memory: 4360  loss: 0.9038  loss_rpn_cls: 0.0501  loss_rpn_bbox: 0.1197  loss_cls: 0.3191  acc: 87.8906  loss_bbox: 0.4148
2025/05/13 19:35:41 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:35:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:35:45 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.665 0.355 -1.000 0.215 0.386
2025/05/13 19:35:45 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3860  data_time: 0.0015  time: 0.0385
2025/05/13 19:36:03 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:16:31  time: 0.3591  data_time: 0.0050  memory: 4360  loss: 0.8997  loss_rpn_cls: 0.0464  loss_rpn_bbox: 0.1224  loss_cls: 0.3162  acc: 84.8633  loss_bbox: 0.4147
2025/05/13 19:36:20 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:16:13  time: 0.3512  data_time: 0.0023  memory: 4360  loss: 0.9098  loss_rpn_cls: 0.0490  loss_rpn_bbox: 0.1233  loss_cls: 0.3220  acc: 86.0840  loss_bbox: 0.4155
2025/05/13 19:36:35 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:36:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:36:38 - mmengine - INFO - bbox_mAP_copypaste: 0.339 0.655 0.311 -1.000 0.199 0.365
2025/05/13 19:36:38 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3390  coco/bbox_mAP_50: 0.6550  coco/bbox_mAP_75: 0.3110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.3650  data_time: 0.0016  time: 0.0375
2025/05/13 19:36:56 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:15:40  time: 0.3576  data_time: 0.0051  memory: 4360  loss: 0.9074  loss_rpn_cls: 0.0500  loss_rpn_bbox: 0.1207  loss_cls: 0.3179  acc: 89.6973  loss_bbox: 0.4187
2025/05/13 19:37:14 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:15:22  time: 0.3564  data_time: 0.0022  memory: 4360  loss: 0.8887  loss_rpn_cls: 0.0460  loss_rpn_bbox: 0.1232  loss_cls: 0.3117  acc: 87.0605  loss_bbox: 0.4077
2025/05/13 19:37:28 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:37:30 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:37:32 - mmengine - INFO - bbox_mAP_copypaste: 0.357 0.662 0.356 -1.000 0.209 0.384
2025/05/13 19:37:32 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3570  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.3560  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3840  data_time: 0.0015  time: 0.0371
2025/05/13 19:37:50 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:14:49  time: 0.3615  data_time: 0.0049  memory: 4360  loss: 0.8850  loss_rpn_cls: 0.0471  loss_rpn_bbox: 0.1188  loss_cls: 0.3112  acc: 89.7461  loss_bbox: 0.4079
2025/05/13 19:38:07 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:14:31  time: 0.3545  data_time: 0.0024  memory: 4360  loss: 0.8840  loss_rpn_cls: 0.0458  loss_rpn_bbox: 0.1192  loss_cls: 0.3108  acc: 86.8652  loss_bbox: 0.4081
2025/05/13 19:38:22 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:38:24 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:38:25 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.665 0.329 -1.000 0.209 0.376
2025/05/13 19:38:25 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3760  data_time: 0.0016  time: 0.0373
2025/05/13 19:38:43 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:13:58  time: 0.3587  data_time: 0.0051  memory: 4360  loss: 0.8924  loss_rpn_cls: 0.0448  loss_rpn_bbox: 0.1219  loss_cls: 0.3167  acc: 87.0605  loss_bbox: 0.4090
2025/05/13 19:39:01 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:13:40  time: 0.3537  data_time: 0.0025  memory: 4360  loss: 0.8935  loss_rpn_cls: 0.0474  loss_rpn_bbox: 0.1181  loss_cls: 0.3176  acc: 89.5020  loss_bbox: 0.4105
2025/05/13 19:39:15 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:39:17 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:39:18 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.668 0.339 -1.000 0.217 0.380
2025/05/13 19:39:18 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.3800  data_time: 0.0015  time: 0.0371
2025/05/13 19:39:28 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:39:36 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:07  time: 0.3561  data_time: 0.0049  memory: 4360  loss: 0.8902  loss_rpn_cls: 0.0491  loss_rpn_bbox: 0.1231  loss_cls: 0.3095  acc: 90.5762  loss_bbox: 0.4085
2025/05/13 19:39:54 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:12:50  time: 0.3570  data_time: 0.0024  memory: 4360  loss: 0.8865  loss_rpn_cls: 0.0474  loss_rpn_bbox: 0.1209  loss_cls: 0.3084  acc: 86.9141  loss_bbox: 0.4098
2025/05/13 19:40:09 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:40:10 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:40:12 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.669 0.350 -1.000 0.219 0.385
2025/05/13 19:40:12 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3850  data_time: 0.0015  time: 0.0370
2025/05/13 19:40:30 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:12:17  time: 0.3540  data_time: 0.0052  memory: 4360  loss: 0.8812  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.1191  loss_cls: 0.3049  acc: 89.3066  loss_bbox: 0.4117
2025/05/13 19:40:47 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:11:59  time: 0.3557  data_time: 0.0025  memory: 4360  loss: 0.8747  loss_rpn_cls: 0.0463  loss_rpn_bbox: 0.1182  loss_cls: 0.3104  acc: 88.7695  loss_bbox: 0.3998
2025/05/13 19:41:02 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:41:04 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:41:05 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.665 0.331 -1.000 0.210 0.376
2025/05/13 19:41:05 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3760  data_time: 0.0015  time: 0.0370
2025/05/13 19:41:23 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:11:26  time: 0.3560  data_time: 0.0051  memory: 4360  loss: 0.8916  loss_rpn_cls: 0.0500  loss_rpn_bbox: 0.1229  loss_cls: 0.3081  acc: 89.2090  loss_bbox: 0.4107
2025/05/13 19:41:41 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:08  time: 0.3503  data_time: 0.0025  memory: 4360  loss: 0.8826  loss_rpn_cls: 0.0472  loss_rpn_bbox: 0.1181  loss_cls: 0.3124  acc: 89.2578  loss_bbox: 0.4049
2025/05/13 19:41:55 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:41:57 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:41:59 - mmengine - INFO - bbox_mAP_copypaste: 0.348 0.663 0.332 -1.000 0.209 0.375
2025/05/13 19:41:59 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3480  coco/bbox_mAP_50: 0.6630  coco/bbox_mAP_75: 0.3320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3750  data_time: 0.0016  time: 0.0375
2025/05/13 19:42:17 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:10:36  time: 0.3615  data_time: 0.0049  memory: 4360  loss: 0.8807  loss_rpn_cls: 0.0473  loss_rpn_bbox: 0.1189  loss_cls: 0.3074  acc: 88.9648  loss_bbox: 0.4070
2025/05/13 19:42:34 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:18  time: 0.3533  data_time: 0.0023  memory: 4360  loss: 0.8866  loss_rpn_cls: 0.0493  loss_rpn_bbox: 0.1211  loss_cls: 0.3086  acc: 91.4062  loss_bbox: 0.4075
2025/05/13 19:42:49 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:42:51 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:42:52 - mmengine - INFO - bbox_mAP_copypaste: 0.365 0.668 0.363 -1.000 0.219 0.392
2025/05/13 19:42:52 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3650  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3920  data_time: 0.0016  time: 0.0374
2025/05/13 19:42:52 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/13 19:42:53 - mmengine - INFO - The best checkpoint with 0.3650 coco/bbox_mAP at 18 epoch is saved to best_coco_bbox_mAP_epoch_18.pth.
2025/05/13 19:43:11 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:09:45  time: 0.3617  data_time: 0.0049  memory: 4360  loss: 0.8853  loss_rpn_cls: 0.0457  loss_rpn_bbox: 0.1195  loss_cls: 0.3161  acc: 87.3535  loss_bbox: 0.4040
2025/05/13 19:43:29 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:09:28  time: 0.3526  data_time: 0.0024  memory: 4360  loss: 0.8956  loss_rpn_cls: 0.0488  loss_rpn_bbox: 0.1212  loss_cls: 0.3133  acc: 89.6973  loss_bbox: 0.4123
2025/05/13 19:43:43 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:43:45 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:43:47 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.664 0.319 -1.000 0.208 0.372
2025/05/13 19:43:47 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3720  data_time: 0.0017  time: 0.0370
2025/05/13 19:44:04 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:08:55  time: 0.3556  data_time: 0.0050  memory: 4360  loss: 0.8757  loss_rpn_cls: 0.0444  loss_rpn_bbox: 0.1195  loss_cls: 0.3069  acc: 88.4766  loss_bbox: 0.4050
2025/05/13 19:44:22 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:08:37  time: 0.3522  data_time: 0.0024  memory: 4360  loss: 0.8846  loss_rpn_cls: 0.0476  loss_rpn_bbox: 0.1210  loss_cls: 0.3091  acc: 89.4531  loss_bbox: 0.4069
2025/05/13 19:44:36 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:44:38 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:44:40 - mmengine - INFO - bbox_mAP_copypaste: 0.367 0.669 0.366 -1.000 0.225 0.394
2025/05/13 19:44:40 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3670  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2250  coco/bbox_mAP_l: 0.3940  data_time: 0.0016  time: 0.0371
2025/05/13 19:44:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_18.pth is removed
2025/05/13 19:44:41 - mmengine - INFO - The best checkpoint with 0.3670 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2025/05/13 19:44:59 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:05  time: 0.3591  data_time: 0.0051  memory: 4360  loss: 0.8789  loss_rpn_cls: 0.0434  loss_rpn_bbox: 0.1196  loss_cls: 0.3120  acc: 89.5020  loss_bbox: 0.4038
2025/05/13 19:45:17 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:07:47  time: 0.3577  data_time: 0.0023  memory: 4360  loss: 0.8998  loss_rpn_cls: 0.0524  loss_rpn_bbox: 0.1213  loss_cls: 0.3160  acc: 87.2070  loss_bbox: 0.4101
2025/05/13 19:45:31 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:45:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:45:34 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.669 0.349 -1.000 0.213 0.386
2025/05/13 19:45:34 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.3860  data_time: 0.0015  time: 0.0371
2025/05/13 19:45:48 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:45:52 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:14  time: 0.3561  data_time: 0.0048  memory: 4360  loss: 0.8691  loss_rpn_cls: 0.0439  loss_rpn_bbox: 0.1173  loss_cls: 0.3079  acc: 87.7441  loss_bbox: 0.4000
2025/05/13 19:46:10 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:06:56  time: 0.3573  data_time: 0.0023  memory: 4360  loss: 0.8954  loss_rpn_cls: 0.0471  loss_rpn_bbox: 0.1202  loss_cls: 0.3161  acc: 88.0371  loss_bbox: 0.4120
2025/05/13 19:46:25 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:46:26 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:46:28 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.667 0.338 -1.000 0.212 0.380
2025/05/13 19:46:28 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6670  coco/bbox_mAP_75: 0.3380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3800  data_time: 0.0015  time: 0.0372
2025/05/13 19:46:46 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:24  time: 0.3595  data_time: 0.0050  memory: 4360  loss: 0.8871  loss_rpn_cls: 0.0487  loss_rpn_bbox: 0.1195  loss_cls: 0.3136  acc: 86.1328  loss_bbox: 0.4053
2025/05/13 19:47:03 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:06  time: 0.3531  data_time: 0.0024  memory: 4360  loss: 0.8759  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.1176  loss_cls: 0.3060  acc: 90.1855  loss_bbox: 0.4068
2025/05/13 19:47:18 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:47:20 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:47:21 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.664 0.337 -1.000 0.208 0.380
2025/05/13 19:47:21 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3800  data_time: 0.0017  time: 0.0373
2025/05/13 19:47:39 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:34  time: 0.3583  data_time: 0.0051  memory: 4360  loss: 0.8862  loss_rpn_cls: 0.0504  loss_rpn_bbox: 0.1207  loss_cls: 0.3066  acc: 88.8672  loss_bbox: 0.4084
2025/05/13 19:47:57 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:16  time: 0.3549  data_time: 0.0023  memory: 4360  loss: 0.8756  loss_rpn_cls: 0.0470  loss_rpn_bbox: 0.1179  loss_cls: 0.3075  acc: 87.3535  loss_bbox: 0.4032
2025/05/13 19:48:12 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:48:13 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:48:15 - mmengine - INFO - bbox_mAP_copypaste: 0.346 0.663 0.328 -1.000 0.206 0.373
2025/05/13 19:48:15 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3460  coco/bbox_mAP_50: 0.6630  coco/bbox_mAP_75: 0.3280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3730  data_time: 0.0016  time: 0.0383
2025/05/13 19:48:33 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:04:43  time: 0.3583  data_time: 0.0051  memory: 4360  loss: 0.8736  loss_rpn_cls: 0.0446  loss_rpn_bbox: 0.1179  loss_cls: 0.3094  acc: 89.5996  loss_bbox: 0.4018
2025/05/13 19:48:51 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:25  time: 0.3570  data_time: 0.0023  memory: 4360  loss: 0.8826  loss_rpn_cls: 0.0441  loss_rpn_bbox: 0.1187  loss_cls: 0.3144  acc: 88.5742  loss_bbox: 0.4055
2025/05/13 19:49:05 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:49:07 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:49:08 - mmengine - INFO - bbox_mAP_copypaste: 0.347 0.664 0.325 -1.000 0.208 0.373
2025/05/13 19:49:08 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3470  coco/bbox_mAP_50: 0.6640  coco/bbox_mAP_75: 0.3250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3730  data_time: 0.0015  time: 0.0370
2025/05/13 19:49:26 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:03:53  time: 0.3581  data_time: 0.0050  memory: 4360  loss: 0.8698  loss_rpn_cls: 0.0415  loss_rpn_bbox: 0.1179  loss_cls: 0.3061  acc: 89.3066  loss_bbox: 0.4044
2025/05/13 19:49:44 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:35  time: 0.3553  data_time: 0.0025  memory: 4360  loss: 0.8940  loss_rpn_cls: 0.0453  loss_rpn_bbox: 0.1230  loss_cls: 0.3121  acc: 92.0410  loss_bbox: 0.4136
2025/05/13 19:49:58 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:50:00 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:50:02 - mmengine - INFO - bbox_mAP_copypaste: 0.349 0.663 0.334 -1.000 0.206 0.376
2025/05/13 19:50:02 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3490  coco/bbox_mAP_50: 0.6630  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3760  data_time: 0.0016  time: 0.0373
2025/05/13 19:50:20 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:03  time: 0.3581  data_time: 0.0051  memory: 4360  loss: 0.8783  loss_rpn_cls: 0.0474  loss_rpn_bbox: 0.1209  loss_cls: 0.3038  acc: 86.4258  loss_bbox: 0.4061
2025/05/13 19:50:37 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:45  time: 0.3538  data_time: 0.0024  memory: 4360  loss: 0.8659  loss_rpn_cls: 0.0455  loss_rpn_bbox: 0.1194  loss_cls: 0.2990  acc: 87.3535  loss_bbox: 0.4021
2025/05/13 19:50:52 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:50:54 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:50:55 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.665 0.332 -1.000 0.208 0.377
2025/05/13 19:50:55 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3770  data_time: 0.0016  time: 0.0373
2025/05/13 19:51:13 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:12  time: 0.3593  data_time: 0.0049  memory: 4360  loss: 0.8788  loss_rpn_cls: 0.0434  loss_rpn_bbox: 0.1220  loss_cls: 0.3094  acc: 88.8184  loss_bbox: 0.4040
2025/05/13 19:51:31 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:01:55  time: 0.3579  data_time: 0.0023  memory: 4360  loss: 0.8653  loss_rpn_cls: 0.0458  loss_rpn_bbox: 0.1149  loss_cls: 0.3021  acc: 88.9648  loss_bbox: 0.4025
2025/05/13 19:51:46 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:51:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:51:49 - mmengine - INFO - bbox_mAP_copypaste: 0.358 0.665 0.353 -1.000 0.216 0.385
2025/05/13 19:51:49 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3580  coco/bbox_mAP_50: 0.6650  coco/bbox_mAP_75: 0.3530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.3850  data_time: 0.0015  time: 0.0371
2025/05/13 19:52:07 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:22  time: 0.3567  data_time: 0.0050  memory: 4360  loss: 0.8680  loss_rpn_cls: 0.0435  loss_rpn_bbox: 0.1176  loss_cls: 0.3041  acc: 86.4746  loss_bbox: 0.4028
2025/05/13 19:52:07 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:52:25 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:04  time: 0.3548  data_time: 0.0024  memory: 4360  loss: 0.8814  loss_rpn_cls: 0.0452  loss_rpn_bbox: 0.1209  loss_cls: 0.3084  acc: 90.3809  loss_bbox: 0.4070
2025/05/13 19:52:39 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:52:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:52:43 - mmengine - INFO - bbox_mAP_copypaste: 0.359 0.668 0.354 -1.000 0.214 0.386
2025/05/13 19:52:43 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3590  coco/bbox_mAP_50: 0.6680  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3860  data_time: 0.0016  time: 0.0371
2025/05/13 19:53:00 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:32  time: 0.3579  data_time: 0.0049  memory: 4360  loss: 0.8806  loss_rpn_cls: 0.0446  loss_rpn_bbox: 0.1213  loss_cls: 0.3108  acc: 87.4023  loss_bbox: 0.4040
2025/05/13 19:53:19 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:14  time: 0.3667  data_time: 0.0023  memory: 4360  loss: 0.8876  loss_rpn_cls: 0.0454  loss_rpn_bbox: 0.1206  loss_cls: 0.3109  acc: 87.8906  loss_bbox: 0.4108
2025/05/13 19:53:33 - mmengine - INFO - Exp name: fasterrcnn_fs_aff_20250513_192628
2025/05/13 19:53:33 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 19:53:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 19:53:38 - mmengine - INFO - bbox_mAP_copypaste: 0.367 0.669 0.372 -1.000 0.215 0.395
2025/05/13 19:53:38 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3670  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.3720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3950  data_time: 0.0015  time: 0.0372
