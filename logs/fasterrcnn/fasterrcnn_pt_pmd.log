2025/05/13 17:48:46 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1571398720
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1571398720
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 17:48:47 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=4,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/fasterrcnn'

2025/05/13 17:48:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 17:48:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/13 17:48:48 - mmengine - INFO - load model from: torchvision://resnet50
2025/05/13 17:48:48 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/05/13 17:48:48 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2025/05/13 17:48:48 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/fasterrcnn/weights/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
2025/05/13 17:48:48 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 17:48:48 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 17:48:48 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\fasterrcnn.
2025/05/13 17:49:12 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.9820e-03  eta: 0:33:07  time: 0.4755  data_time: 0.0915  memory: 4361  loss: 2.3061  loss_rpn_cls: 0.5478  loss_rpn_bbox: 0.1759  loss_cls: 0.9098  acc: 81.2500  loss_bbox: 0.6727
2025/05/13 17:49:31 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 3.9840e-03  eta: 0:29:08  time: 0.3713  data_time: 0.0041  memory: 4361  loss: 1.2964  loss_rpn_cls: 0.0959  loss_rpn_bbox: 0.1420  loss_cls: 0.5255  acc: 82.2266  loss_bbox: 0.5331
2025/05/13 17:49:46 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:49:56 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:49:57 - mmengine - INFO - bbox_mAP_copypaste: 0.252 0.445 0.270 -1.000 0.144 0.268
2025/05/13 17:49:57 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.2520  coco/bbox_mAP_50: 0.4450  coco/bbox_mAP_75: 0.2700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1440  coco/bbox_mAP_l: 0.2680  data_time: 0.1653  time: 0.2048
2025/05/13 17:49:58 - mmengine - INFO - The best checkpoint with 0.2520 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/13 17:50:17 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 7.6276e-03  eta: 0:26:57  time: 0.3794  data_time: 0.0070  memory: 4361  loss: 1.0850  loss_rpn_cls: 0.0701  loss_rpn_bbox: 0.1315  loss_cls: 0.4524  acc: 81.6895  loss_bbox: 0.4309
2025/05/13 17:50:36 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 9.6296e-03  eta: 0:26:16  time: 0.3753  data_time: 0.0040  memory: 4361  loss: 1.0284  loss_rpn_cls: 0.0678  loss_rpn_bbox: 0.1287  loss_cls: 0.4100  acc: 86.5723  loss_bbox: 0.4219
2025/05/13 17:50:51 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:50:53 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:50:54 - mmengine - INFO - bbox_mAP_copypaste: 0.280 0.479 0.308 -1.000 0.208 0.296
2025/05/13 17:50:54 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2800  coco/bbox_mAP_50: 0.4790  coco/bbox_mAP_75: 0.3080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.2960  data_time: 0.0016  time: 0.0375
2025/05/13 17:50:54 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/13 17:50:55 - mmengine - INFO - The best checkpoint with 0.2800 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/13 17:51:14 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 1.3273e-02  eta: 0:25:21  time: 0.3835  data_time: 0.0070  memory: 4361  loss: 1.0280  loss_rpn_cls: 0.0630  loss_rpn_bbox: 0.1311  loss_cls: 0.4129  acc: 85.6192  loss_bbox: 0.4210
2025/05/13 17:51:33 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 1.5275e-02  eta: 0:24:52  time: 0.3717  data_time: 0.0041  memory: 4361  loss: 1.0335  loss_rpn_cls: 0.0673  loss_rpn_bbox: 0.1322  loss_cls: 0.4143  acc: 84.3750  loss_bbox: 0.4197
2025/05/13 17:51:48 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:51:50 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:51:51 - mmengine - INFO - bbox_mAP_copypaste: 0.396 0.671 0.439 -1.000 0.300 0.422
2025/05/13 17:51:51 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.3960  coco/bbox_mAP_50: 0.6710  coco/bbox_mAP_75: 0.4390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4220  data_time: 0.0016  time: 0.0376
2025/05/13 17:51:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/13 17:51:52 - mmengine - INFO - The best checkpoint with 0.3960 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/13 17:52:11 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 1.8919e-02  eta: 0:24:07  time: 0.3813  data_time: 0.0073  memory: 4361  loss: 0.9633  loss_rpn_cls: 0.0534  loss_rpn_bbox: 0.1281  loss_cls: 0.3787  acc: 86.3770  loss_bbox: 0.4032
2025/05/13 17:52:30 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 2.0000e-02  eta: 0:23:44  time: 0.3761  data_time: 0.0041  memory: 4361  loss: 0.9840  loss_rpn_cls: 0.0607  loss_rpn_bbox: 0.1341  loss_cls: 0.3842  acc: 87.8418  loss_bbox: 0.4050
2025/05/13 17:52:45 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:52:47 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:52:48 - mmengine - INFO - bbox_mAP_copypaste: 0.366 0.625 0.403 -1.000 0.246 0.396
2025/05/13 17:52:48 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3660  coco/bbox_mAP_50: 0.6250  coco/bbox_mAP_75: 0.4030  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2460  coco/bbox_mAP_l: 0.3960  data_time: 0.0016  time: 0.0375
2025/05/13 17:53:07 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 2.0000e-02  eta: 0:23:04  time: 0.3776  data_time: 0.0072  memory: 4361  loss: 0.9017  loss_rpn_cls: 0.0443  loss_rpn_bbox: 0.1197  loss_cls: 0.3560  acc: 89.8438  loss_bbox: 0.3816
2025/05/13 17:53:26 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 2.0000e-02  eta: 0:22:42  time: 0.3752  data_time: 0.0043  memory: 4361  loss: 0.8867  loss_rpn_cls: 0.0475  loss_rpn_bbox: 0.1197  loss_cls: 0.3402  acc: 89.0137  loss_bbox: 0.3792
2025/05/13 17:53:41 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:53:43 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:53:45 - mmengine - INFO - bbox_mAP_copypaste: 0.431 0.705 0.496 -1.000 0.285 0.459
2025/05/13 17:53:45 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.4310  coco/bbox_mAP_50: 0.7050  coco/bbox_mAP_75: 0.4960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2850  coco/bbox_mAP_l: 0.4590  data_time: 0.0016  time: 0.0373
2025/05/13 17:53:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/13 17:53:46 - mmengine - INFO - The best checkpoint with 0.4310 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/13 17:54:05 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 2.0000e-02  eta: 0:22:07  time: 0.3848  data_time: 0.0075  memory: 4361  loss: 0.8434  loss_rpn_cls: 0.0360  loss_rpn_bbox: 0.1112  loss_cls: 0.3321  acc: 86.9141  loss_bbox: 0.3641
2025/05/13 17:54:24 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 2.0000e-02  eta: 0:21:47  time: 0.3774  data_time: 0.0042  memory: 4361  loss: 0.8422  loss_rpn_cls: 0.0399  loss_rpn_bbox: 0.1132  loss_cls: 0.3215  acc: 88.4277  loss_bbox: 0.3675
2025/05/13 17:54:39 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:54:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:54:42 - mmengine - INFO - bbox_mAP_copypaste: 0.398 0.666 0.447 -1.000 0.214 0.428
2025/05/13 17:54:42 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3980  coco/bbox_mAP_50: 0.6660  coco/bbox_mAP_75: 0.4470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.4280  data_time: 0.0016  time: 0.0373
2025/05/13 17:55:01 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 2.0000e-02  eta: 0:21:11  time: 0.3773  data_time: 0.0071  memory: 4361  loss: 0.8414  loss_rpn_cls: 0.0362  loss_rpn_bbox: 0.1131  loss_cls: 0.3311  acc: 89.9414  loss_bbox: 0.3610
2025/05/13 17:55:20 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 2.0000e-02  eta: 0:20:51  time: 0.3780  data_time: 0.0040  memory: 4361  loss: 0.8031  loss_rpn_cls: 0.0349  loss_rpn_bbox: 0.1084  loss_cls: 0.3041  acc: 87.0605  loss_bbox: 0.3556
2025/05/13 17:55:35 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:55:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:55:39 - mmengine - INFO - bbox_mAP_copypaste: 0.372 0.627 0.418 -1.000 0.272 0.402
2025/05/13 17:55:39 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3720  coco/bbox_mAP_50: 0.6270  coco/bbox_mAP_75: 0.4180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2720  coco/bbox_mAP_l: 0.4020  data_time: 0.0016  time: 0.0374
2025/05/13 17:55:44 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:55:58 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 2.0000e-02  eta: 0:20:15  time: 0.3791  data_time: 0.0072  memory: 4361  loss: 0.8060  loss_rpn_cls: 0.0338  loss_rpn_bbox: 0.1069  loss_cls: 0.3135  acc: 88.1836  loss_bbox: 0.3519
2025/05/13 17:56:16 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 2.0000e-02  eta: 0:19:55  time: 0.3764  data_time: 0.0041  memory: 4361  loss: 0.7916  loss_rpn_cls: 0.0334  loss_rpn_bbox: 0.1099  loss_cls: 0.2970  acc: 85.9113  loss_bbox: 0.3514
2025/05/13 17:56:32 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:56:34 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:56:35 - mmengine - INFO - bbox_mAP_copypaste: 0.444 0.721 0.517 -1.000 0.269 0.472
2025/05/13 17:56:35 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.4440  coco/bbox_mAP_50: 0.7210  coco/bbox_mAP_75: 0.5170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2690  coco/bbox_mAP_l: 0.4720  data_time: 0.0017  time: 0.0370
2025/05/13 17:56:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/13 17:56:36 - mmengine - INFO - The best checkpoint with 0.4440 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/13 17:56:55 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 2.0000e-03  eta: 0:19:21  time: 0.3853  data_time: 0.0073  memory: 4361  loss: 0.6974  loss_rpn_cls: 0.0244  loss_rpn_bbox: 0.0922  loss_cls: 0.2669  acc: 90.7715  loss_bbox: 0.3139
2025/05/13 17:57:14 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 2.0000e-03  eta: 0:19:01  time: 0.3767  data_time: 0.0041  memory: 4361  loss: 0.6656  loss_rpn_cls: 0.0220  loss_rpn_bbox: 0.0903  loss_cls: 0.2460  acc: 89.2578  loss_bbox: 0.3072
2025/05/13 17:57:29 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:57:31 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:57:33 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.714 0.522 -1.000 0.300 0.475
2025/05/13 17:57:33 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.3000  coco/bbox_mAP_l: 0.4750  data_time: 0.0015  time: 0.0381
2025/05/13 17:57:33 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/13 17:57:33 - mmengine - INFO - The best checkpoint with 0.4480 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/13 17:57:53 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 2.0000e-03  eta: 0:18:27  time: 0.3839  data_time: 0.0071  memory: 4361  loss: 0.6437  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0872  loss_cls: 0.2408  acc: 90.9668  loss_bbox: 0.2973
2025/05/13 17:58:12 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 2.0000e-03  eta: 0:18:07  time: 0.3769  data_time: 0.0042  memory: 4361  loss: 0.6359  loss_rpn_cls: 0.0201  loss_rpn_bbox: 0.0859  loss_cls: 0.2315  acc: 91.8945  loss_bbox: 0.2984
2025/05/13 17:58:27 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:58:29 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:58:30 - mmengine - INFO - bbox_mAP_copypaste: 0.449 0.716 0.512 -1.000 0.290 0.477
2025/05/13 17:58:30 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.4490  coco/bbox_mAP_50: 0.7160  coco/bbox_mAP_75: 0.5120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.4770  data_time: 0.0016  time: 0.0376
2025/05/13 17:58:30 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\fasterrcnn\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/13 17:58:31 - mmengine - INFO - The best checkpoint with 0.4490 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2025/05/13 17:58:50 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 2.0000e-03  eta: 0:17:33  time: 0.3837  data_time: 0.0072  memory: 4361  loss: 0.6235  loss_rpn_cls: 0.0170  loss_rpn_bbox: 0.0845  loss_cls: 0.2319  acc: 91.6504  loss_bbox: 0.2901
2025/05/13 17:59:09 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 2.0000e-03  eta: 0:17:14  time: 0.3810  data_time: 0.0041  memory: 4361  loss: 0.6535  loss_rpn_cls: 0.0195  loss_rpn_bbox: 0.0904  loss_cls: 0.2433  acc: 89.6973  loss_bbox: 0.3003
2025/05/13 17:59:24 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 17:59:26 - mmengine - INFO - Evaluating bbox...
2025/05/13 17:59:28 - mmengine - INFO - bbox_mAP_copypaste: 0.418 0.669 0.496 -1.000 0.275 0.446
2025/05/13 17:59:28 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.4180  coco/bbox_mAP_50: 0.6690  coco/bbox_mAP_75: 0.4960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2750  coco/bbox_mAP_l: 0.4460  data_time: 0.0014  time: 0.0367
2025/05/13 17:59:47 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 2.0000e-04  eta: 0:16:38  time: 0.3806  data_time: 0.0072  memory: 4361  loss: 0.6192  loss_rpn_cls: 0.0182  loss_rpn_bbox: 0.0846  loss_cls: 0.2284  acc: 91.3574  loss_bbox: 0.2880
2025/05/13 18:00:05 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 2.0000e-04  eta: 0:16:19  time: 0.3769  data_time: 0.0040  memory: 4361  loss: 0.6133  loss_rpn_cls: 0.0174  loss_rpn_bbox: 0.0845  loss_cls: 0.2231  acc: 92.5293  loss_bbox: 0.2882
2025/05/13 18:00:21 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:00:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:00:24 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.703 0.522 -1.000 0.294 0.469
2025/05/13 18:00:24 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7030  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2940  coco/bbox_mAP_l: 0.4690  data_time: 0.0015  time: 0.0367
2025/05/13 18:00:43 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 2.0000e-04  eta: 0:15:45  time: 0.3829  data_time: 0.0071  memory: 4361  loss: 0.6213  loss_rpn_cls: 0.0184  loss_rpn_bbox: 0.0845  loss_cls: 0.2317  acc: 92.6270  loss_bbox: 0.2867
2025/05/13 18:01:02 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 2.0000e-04  eta: 0:15:25  time: 0.3745  data_time: 0.0042  memory: 4361  loss: 0.6102  loss_rpn_cls: 0.0165  loss_rpn_bbox: 0.0843  loss_cls: 0.2220  acc: 91.6016  loss_bbox: 0.2874
2025/05/13 18:01:17 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:01:19 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:01:21 - mmengine - INFO - bbox_mAP_copypaste: 0.439 0.699 0.522 -1.000 0.288 0.466
2025/05/13 18:01:21 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.4390  coco/bbox_mAP_50: 0.6990  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4660  data_time: 0.0016  time: 0.0368
2025/05/13 18:01:40 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 2.0000e-04  eta: 0:14:51  time: 0.3824  data_time: 0.0072  memory: 4361  loss: 0.6234  loss_rpn_cls: 0.0188  loss_rpn_bbox: 0.0836  loss_cls: 0.2336  acc: 91.2109  loss_bbox: 0.2875
2025/05/13 18:01:59 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 2.0000e-04  eta: 0:14:32  time: 0.3821  data_time: 0.0041  memory: 4361  loss: 0.6358  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0874  loss_cls: 0.2345  acc: 88.1348  loss_bbox: 0.2947
2025/05/13 18:02:14 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:02:16 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:02:17 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.698 0.520 -1.000 0.290 0.467
2025/05/13 18:02:17 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.6980  coco/bbox_mAP_75: 0.5200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.4670  data_time: 0.0016  time: 0.0370
2025/05/13 18:02:27 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:02:36 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 2.0000e-04  eta: 0:13:57  time: 0.3787  data_time: 0.0072  memory: 4361  loss: 0.6036  loss_rpn_cls: 0.0172  loss_rpn_bbox: 0.0834  loss_cls: 0.2188  acc: 90.6250  loss_bbox: 0.2842
2025/05/13 18:02:55 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 2.0000e-04  eta: 0:13:38  time: 0.3758  data_time: 0.0041  memory: 4361  loss: 0.6102  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0832  loss_cls: 0.2227  acc: 92.4805  loss_bbox: 0.2858
2025/05/13 18:03:10 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:03:12 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:03:14 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.695 0.515 -1.000 0.288 0.464
2025/05/13 18:03:14 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4640  data_time: 0.0015  time: 0.0368
2025/05/13 18:03:33 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 2.0000e-04  eta: 0:13:03  time: 0.3841  data_time: 0.0071  memory: 4361  loss: 0.6249  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0869  loss_cls: 0.2272  acc: 90.8203  loss_bbox: 0.2929
2025/05/13 18:03:52 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 2.0000e-04  eta: 0:12:44  time: 0.3747  data_time: 0.0042  memory: 4361  loss: 0.6044  loss_rpn_cls: 0.0172  loss_rpn_bbox: 0.0829  loss_cls: 0.2189  acc: 91.0645  loss_bbox: 0.2854
2025/05/13 18:04:07 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:04:09 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:04:10 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.690 0.519 -1.000 0.284 0.465
2025/05/13 18:04:10 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6900  coco/bbox_mAP_75: 0.5190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2840  coco/bbox_mAP_l: 0.4650  data_time: 0.0016  time: 0.0368
2025/05/13 18:04:29 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 2.0000e-04  eta: 0:12:09  time: 0.3809  data_time: 0.0072  memory: 4361  loss: 0.6035  loss_rpn_cls: 0.0152  loss_rpn_bbox: 0.0829  loss_cls: 0.2220  acc: 93.4082  loss_bbox: 0.2834
2025/05/13 18:04:48 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 2.0000e-04  eta: 0:11:50  time: 0.3764  data_time: 0.0043  memory: 4361  loss: 0.6136  loss_rpn_cls: 0.0180  loss_rpn_bbox: 0.0850  loss_cls: 0.2235  acc: 94.8242  loss_bbox: 0.2872
2025/05/13 18:05:03 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:05:05 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:05:07 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.698 0.522 -1.000 0.288 0.467
2025/05/13 18:05:07 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.6980  coco/bbox_mAP_75: 0.5220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4670  data_time: 0.0016  time: 0.0369
2025/05/13 18:05:26 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 2.0000e-04  eta: 0:11:16  time: 0.3798  data_time: 0.0071  memory: 4361  loss: 0.6185  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0852  loss_cls: 0.2266  acc: 89.3066  loss_bbox: 0.2882
2025/05/13 18:05:44 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 2.0000e-04  eta: 0:10:57  time: 0.3764  data_time: 0.0042  memory: 4361  loss: 0.6058  loss_rpn_cls: 0.0172  loss_rpn_bbox: 0.0827  loss_cls: 0.2218  acc: 89.9902  loss_bbox: 0.2842
2025/05/13 18:06:00 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:06:02 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:06:03 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.691 0.519 -1.000 0.286 0.465
2025/05/13 18:06:03 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6910  coco/bbox_mAP_75: 0.5190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4650  data_time: 0.0015  time: 0.0370
2025/05/13 18:06:22 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 2.0000e-04  eta: 0:10:22  time: 0.3781  data_time: 0.0072  memory: 4361  loss: 0.6118  loss_rpn_cls: 0.0170  loss_rpn_bbox: 0.0834  loss_cls: 0.2240  acc: 94.3359  loss_bbox: 0.2873
2025/05/13 18:06:41 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 2.0000e-04  eta: 0:10:03  time: 0.3779  data_time: 0.0042  memory: 4361  loss: 0.6088  loss_rpn_cls: 0.0179  loss_rpn_bbox: 0.0841  loss_cls: 0.2232  acc: 91.2109  loss_bbox: 0.2836
2025/05/13 18:06:56 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:06:58 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:07:00 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.701 0.524 -1.000 0.286 0.470
2025/05/13 18:07:00 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.7010  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0378
2025/05/13 18:07:19 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 2.0000e-04  eta: 0:09:28  time: 0.3792  data_time: 0.0072  memory: 4361  loss: 0.6098  loss_rpn_cls: 0.0183  loss_rpn_bbox: 0.0845  loss_cls: 0.2214  acc: 92.3340  loss_bbox: 0.2857
2025/05/13 18:07:37 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 2.0000e-04  eta: 0:09:09  time: 0.3768  data_time: 0.0040  memory: 4361  loss: 0.6124  loss_rpn_cls: 0.0183  loss_rpn_bbox: 0.0847  loss_cls: 0.2223  acc: 91.4551  loss_bbox: 0.2871
2025/05/13 18:07:53 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:07:55 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:07:56 - mmengine - INFO - bbox_mAP_copypaste: 0.443 0.699 0.524 -1.000 0.286 0.471
2025/05/13 18:07:56 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.4430  coco/bbox_mAP_50: 0.6990  coco/bbox_mAP_75: 0.5240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4710  data_time: 0.0017  time: 0.0372
2025/05/13 18:08:15 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 2.0000e-04  eta: 0:08:35  time: 0.3808  data_time: 0.0071  memory: 4361  loss: 0.6053  loss_rpn_cls: 0.0163  loss_rpn_bbox: 0.0830  loss_cls: 0.2220  acc: 92.7734  loss_bbox: 0.2839
2025/05/13 18:08:34 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 2.0000e-04  eta: 0:08:16  time: 0.3786  data_time: 0.0043  memory: 4361  loss: 0.6088  loss_rpn_cls: 0.0184  loss_rpn_bbox: 0.0839  loss_cls: 0.2221  acc: 87.8418  loss_bbox: 0.2844
2025/05/13 18:08:49 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:08:51 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:08:52 - mmengine - INFO - bbox_mAP_copypaste: 0.440 0.700 0.517 -1.000 0.286 0.469
2025/05/13 18:08:52 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.4400  coco/bbox_mAP_50: 0.7000  coco/bbox_mAP_75: 0.5170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4690  data_time: 0.0016  time: 0.0370
2025/05/13 18:09:07 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:09:11 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 2.0000e-04  eta: 0:07:41  time: 0.3795  data_time: 0.0073  memory: 4361  loss: 0.5952  loss_rpn_cls: 0.0166  loss_rpn_bbox: 0.0822  loss_cls: 0.2146  acc: 91.8945  loss_bbox: 0.2818
2025/05/13 18:09:30 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 2.0000e-04  eta: 0:07:22  time: 0.3761  data_time: 0.0041  memory: 4361  loss: 0.6245  loss_rpn_cls: 0.0173  loss_rpn_bbox: 0.0840  loss_cls: 0.2347  acc: 87.6953  loss_bbox: 0.2885
2025/05/13 18:09:46 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:09:48 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:09:49 - mmengine - INFO - bbox_mAP_copypaste: 0.438 0.695 0.515 -1.000 0.278 0.466
2025/05/13 18:09:49 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.4380  coco/bbox_mAP_50: 0.6950  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2780  coco/bbox_mAP_l: 0.4660  data_time: 0.0016  time: 0.0367
2025/05/13 18:10:08 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 2.0000e-04  eta: 0:06:48  time: 0.3828  data_time: 0.0072  memory: 4361  loss: 0.6141  loss_rpn_cls: 0.0187  loss_rpn_bbox: 0.0840  loss_cls: 0.2245  acc: 90.1367  loss_bbox: 0.2869
2025/05/13 18:10:27 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 2.0000e-04  eta: 0:06:29  time: 0.3775  data_time: 0.0043  memory: 4361  loss: 0.6047  loss_rpn_cls: 0.0164  loss_rpn_bbox: 0.0839  loss_cls: 0.2205  acc: 92.0898  loss_bbox: 0.2839
2025/05/13 18:10:42 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:10:44 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:10:45 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.693 0.515 -1.000 0.285 0.465
2025/05/13 18:10:45 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.6930  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2850  coco/bbox_mAP_l: 0.4650  data_time: 0.0015  time: 0.0368
2025/05/13 18:11:04 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 2.0000e-04  eta: 0:05:54  time: 0.3805  data_time: 0.0071  memory: 4361  loss: 0.6015  loss_rpn_cls: 0.0158  loss_rpn_bbox: 0.0845  loss_cls: 0.2151  acc: 91.5527  loss_bbox: 0.2861
2025/05/13 18:11:23 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 2.0000e-04  eta: 0:05:35  time: 0.3786  data_time: 0.0042  memory: 4361  loss: 0.6146  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0837  loss_cls: 0.2288  acc: 88.9648  loss_bbox: 0.2853
2025/05/13 18:11:39 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:11:41 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:11:42 - mmengine - INFO - bbox_mAP_copypaste: 0.436 0.691 0.515 -1.000 0.281 0.464
2025/05/13 18:11:42 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.4360  coco/bbox_mAP_50: 0.6910  coco/bbox_mAP_75: 0.5150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2810  coco/bbox_mAP_l: 0.4640  data_time: 0.0015  time: 0.0367
2025/05/13 18:12:01 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 2.0000e-04  eta: 0:05:01  time: 0.3819  data_time: 0.0072  memory: 4361  loss: 0.6133  loss_rpn_cls: 0.0165  loss_rpn_bbox: 0.0850  loss_cls: 0.2242  acc: 91.6504  loss_bbox: 0.2876
2025/05/13 18:12:20 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 2.0000e-04  eta: 0:04:42  time: 0.3735  data_time: 0.0041  memory: 4361  loss: 0.5894  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0822  loss_cls: 0.2121  acc: 92.9199  loss_bbox: 0.2784
2025/05/13 18:12:35 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:12:37 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:12:38 - mmengine - INFO - bbox_mAP_copypaste: 0.434 0.686 0.512 -1.000 0.280 0.462
2025/05/13 18:12:38 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.4340  coco/bbox_mAP_50: 0.6860  coco/bbox_mAP_75: 0.5120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2800  coco/bbox_mAP_l: 0.4620  data_time: 0.0016  time: 0.0371
2025/05/13 18:12:57 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 2.0000e-04  eta: 0:04:07  time: 0.3770  data_time: 0.0070  memory: 4361  loss: 0.5943  loss_rpn_cls: 0.0158  loss_rpn_bbox: 0.0822  loss_cls: 0.2153  acc: 87.2559  loss_bbox: 0.2811
2025/05/13 18:13:16 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 2.0000e-04  eta: 0:03:49  time: 0.3805  data_time: 0.0043  memory: 4361  loss: 0.6067  loss_rpn_cls: 0.0158  loss_rpn_bbox: 0.0846  loss_cls: 0.2200  acc: 91.7969  loss_bbox: 0.2865
2025/05/13 18:13:32 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:13:33 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:13:35 - mmengine - INFO - bbox_mAP_copypaste: 0.442 0.701 0.518 -1.000 0.286 0.470
2025/05/13 18:13:35 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.4420  coco/bbox_mAP_50: 0.7010  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.4700  data_time: 0.0015  time: 0.0366
2025/05/13 18:13:54 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 2.0000e-04  eta: 0:03:14  time: 0.3813  data_time: 0.0072  memory: 4361  loss: 0.6209  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0850  loss_cls: 0.2301  acc: 92.9688  loss_bbox: 0.2873
2025/05/13 18:14:13 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 2.0000e-04  eta: 0:02:55  time: 0.3760  data_time: 0.0041  memory: 4361  loss: 0.6076  loss_rpn_cls: 0.0176  loss_rpn_bbox: 0.0832  loss_cls: 0.2222  acc: 91.5039  loss_bbox: 0.2846
2025/05/13 18:14:28 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:14:30 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:14:31 - mmengine - INFO - bbox_mAP_copypaste: 0.435 0.691 0.514 -1.000 0.281 0.465
2025/05/13 18:14:31 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.4350  coco/bbox_mAP_50: 0.6910  coco/bbox_mAP_75: 0.5140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2810  coco/bbox_mAP_l: 0.4650  data_time: 0.0015  time: 0.0368
2025/05/13 18:14:50 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 2.0000e-04  eta: 0:02:21  time: 0.3831  data_time: 0.0071  memory: 4361  loss: 0.6081  loss_rpn_cls: 0.0162  loss_rpn_bbox: 0.0839  loss_cls: 0.2220  acc: 87.8906  loss_bbox: 0.2860
2025/05/13 18:15:09 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 2.0000e-04  eta: 0:02:02  time: 0.3745  data_time: 0.0041  memory: 4361  loss: 0.5941  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0817  loss_cls: 0.2159  acc: 92.3828  loss_bbox: 0.2799
2025/05/13 18:15:25 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:15:27 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:15:28 - mmengine - INFO - bbox_mAP_copypaste: 0.437 0.691 0.518 -1.000 0.288 0.464
2025/05/13 18:15:28 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.4370  coco/bbox_mAP_50: 0.6910  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.4640  data_time: 0.0015  time: 0.0369
2025/05/13 18:15:47 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 2.0000e-04  eta: 0:01:27  time: 0.3833  data_time: 0.0072  memory: 4361  loss: 0.6135  loss_rpn_cls: 0.0178  loss_rpn_bbox: 0.0855  loss_cls: 0.2231  acc: 91.3574  loss_bbox: 0.2872
2025/05/13 18:15:48 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:16:06 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 2.0000e-04  eta: 0:01:08  time: 0.3730  data_time: 0.0041  memory: 4361  loss: 0.5966  loss_rpn_cls: 0.0151  loss_rpn_bbox: 0.0810  loss_cls: 0.2184  acc: 93.2617  loss_bbox: 0.2821
2025/05/13 18:16:21 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:16:23 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:16:24 - mmengine - INFO - bbox_mAP_copypaste: 0.434 0.689 0.518 -1.000 0.282 0.462
2025/05/13 18:16:24 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.4340  coco/bbox_mAP_50: 0.6890  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2820  coco/bbox_mAP_l: 0.4620  data_time: 0.0016  time: 0.0370
2025/05/13 18:16:43 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 2.0000e-04  eta: 0:00:34  time: 0.3823  data_time: 0.0072  memory: 4361  loss: 0.6018  loss_rpn_cls: 0.0180  loss_rpn_bbox: 0.0832  loss_cls: 0.2182  acc: 90.5273  loss_bbox: 0.2824
2025/05/13 18:17:02 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 2.0000e-04  eta: 0:00:15  time: 0.3764  data_time: 0.0041  memory: 4361  loss: 0.6085  loss_rpn_cls: 0.0177  loss_rpn_bbox: 0.0837  loss_cls: 0.2226  acc: 92.6758  loss_bbox: 0.2844
2025/05/13 18:17:17 - mmengine - INFO - Exp name: fasterrcnn_pt_pmd_20250513_174842
2025/05/13 18:17:17 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 18:17:21 - mmengine - INFO - Evaluating bbox...
2025/05/13 18:17:22 - mmengine - INFO - bbox_mAP_copypaste: 0.434 0.687 0.511 -1.000 0.281 0.463
2025/05/13 18:17:22 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.4340  coco/bbox_mAP_50: 0.6870  coco/bbox_mAP_75: 0.5110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2810  coco/bbox_mAP_l: 0.4630  data_time: 0.0016  time: 0.0373
