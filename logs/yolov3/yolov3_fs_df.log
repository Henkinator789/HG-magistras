2025/05/11 12:04:06 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1333164517
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1333164517
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 12:04:06 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                mean=[
                    0,
                    0,
                    0,
                ],
                ratio_range=(
                    1,
                    2,
                ),
                to_rgb=True,
                type='Expand'),
            dict(
                min_crop_size=0.3,
                min_ious=(
                    0.4,
                    0.5,
                    0.6,
                    0.7,
                    0.8,
                    0.9,
                ),
                type='MinIoURandomCrop'),
            dict(
                keep_ratio=True,
                scale=[
                    (
                        320,
                        320,
                    ),
                    (
                        416,
                        416,
                    ),
                ],
                type='RandomResize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(mean=[
        0,
        0,
        0,
    ], ratio_range=(
        1,
        2,
    ), to_rgb=True, type='Expand'),
    dict(
        min_crop_size=0.3,
        min_ious=(
            0.4,
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
        ),
        type='MinIoURandomCrop'),
    dict(
        keep_ratio=True,
        scale=[
            (
                320,
                320,
            ),
            (
                416,
                416,
            ),
        ],
        type='RandomResize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 12:04:08 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 12:04:08 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 12:04:09 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 12:04:09 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 12:04:09 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 12:04:09 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 12:04:09 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 12:04:27 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:25:02  time: 0.3596  data_time: 0.1836  memory: 2031  grad_norm: 7054.1832  loss: 4191.9466  loss_cls: 1357.6772  loss_conf: 1896.8406  loss_xy: 845.1507  loss_wh: 92.2782
2025/05/11 12:04:40 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:21:27  time: 0.2637  data_time: 0.1229  memory: 2031  grad_norm: 7391.2151  loss: 3173.2042  loss_cls: 956.7634  loss_conf: 1343.5216  loss_xy: 802.7979  loss_wh: 70.1213
2025/05/11 12:04:51 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:05:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:05:02 - mmengine - INFO - bbox_mAP_copypaste: 0.046 0.141 0.013 -1.000 0.027 0.047
2025/05/11 12:05:02 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0460  coco/bbox_mAP_50: 0.1410  coco/bbox_mAP_75: 0.0130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0270  coco/bbox_mAP_l: 0.0470  data_time: 0.1696  time: 0.1891
2025/05/11 12:05:04 - mmengine - INFO - The best checkpoint with 0.0460 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 12:05:18 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:19:56  time: 0.2839  data_time: 0.1338  memory: 2031  grad_norm: 5143.2080  loss: 2437.7285  loss_cls: 667.1518  loss_conf: 963.4634  loss_xy: 755.1726  loss_wh: 51.9408
2025/05/11 12:05:32 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:19:26  time: 0.2781  data_time: 0.1379  memory: 2031  grad_norm: 5031.0864  loss: 2177.3943  loss_cls: 565.1239  loss_conf: 870.9255  loss_xy: 698.2317  loss_wh: 43.1133
2025/05/11 12:05:43 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:05:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:05:45 - mmengine - INFO - bbox_mAP_copypaste: 0.064 0.168 0.024 -1.000 0.038 0.068
2025/05/11 12:05:45 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.0640  coco/bbox_mAP_50: 0.1680  coco/bbox_mAP_75: 0.0240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0380  coco/bbox_mAP_l: 0.0680  data_time: 0.0044  time: 0.0196
2025/05/11 12:05:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 12:05:47 - mmengine - INFO - The best checkpoint with 0.0640 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 12:06:01 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:18:44  time: 0.2834  data_time: 0.1292  memory: 2031  grad_norm: 5140.4452  loss: 2253.9204  loss_cls: 602.8299  loss_conf: 863.2377  loss_xy: 744.7278  loss_wh: 43.1250
2025/05/11 12:06:14 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:18:22  time: 0.2730  data_time: 0.1296  memory: 2031  grad_norm: 4927.8370  loss: 2090.6207  loss_cls: 555.5058  loss_conf: 800.0744  loss_xy: 698.5708  loss_wh: 36.4697
2025/05/11 12:06:25 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:06:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:06:27 - mmengine - INFO - bbox_mAP_copypaste: 0.080 0.193 0.043 -1.000 0.055 0.085
2025/05/11 12:06:27 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.0800  coco/bbox_mAP_50: 0.1930  coco/bbox_mAP_75: 0.0430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0550  coco/bbox_mAP_l: 0.0850  data_time: 0.0054  time: 0.0203
2025/05/11 12:06:27 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 12:06:29 - mmengine - INFO - The best checkpoint with 0.0800 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 12:06:43 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:17:50  time: 0.2931  data_time: 0.1461  memory: 2031  grad_norm: 4727.0928  loss: 1951.1496  loss_cls: 515.0682  loss_conf: 739.6966  loss_xy: 660.9964  loss_wh: 35.3885
2025/05/11 12:06:57 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:17:32  time: 0.2730  data_time: 0.1287  memory: 2031  grad_norm: 4642.6635  loss: 2034.9926  loss_cls: 513.7331  loss_conf: 758.0759  loss_xy: 730.0006  loss_wh: 33.1829
2025/05/11 12:07:08 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:07:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:07:11 - mmengine - INFO - bbox_mAP_copypaste: 0.086 0.194 0.052 -1.000 0.043 0.092
2025/05/11 12:07:11 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.0860  coco/bbox_mAP_50: 0.1940  coco/bbox_mAP_75: 0.0520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0430  coco/bbox_mAP_l: 0.0920  data_time: 0.0051  time: 0.0199
2025/05/11 12:07:11 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 12:07:12 - mmengine - INFO - The best checkpoint with 0.0860 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 12:07:26 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:17:03  time: 0.2805  data_time: 0.1284  memory: 2031  grad_norm: 5008.5637  loss: 2000.6414  loss_cls: 483.8560  loss_conf: 747.5717  loss_xy: 727.3223  loss_wh: 41.8914
2025/05/11 12:07:40 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:16:48  time: 0.2813  data_time: 0.1381  memory: 2031  grad_norm: 5077.1920  loss: 1904.6587  loss_cls: 480.4451  loss_conf: 709.1152  loss_xy: 682.9298  loss_wh: 32.1685
2025/05/11 12:07:51 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:07:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:07:54 - mmengine - INFO - bbox_mAP_copypaste: 0.142 0.293 0.113 -1.000 0.108 0.147
2025/05/11 12:07:54 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.1420  coco/bbox_mAP_50: 0.2930  coco/bbox_mAP_75: 0.1130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1080  coco/bbox_mAP_l: 0.1470  data_time: 0.0049  time: 0.0194
2025/05/11 12:07:54 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 12:07:55 - mmengine - INFO - The best checkpoint with 0.1420 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 12:08:09 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:16:19  time: 0.2771  data_time: 0.1295  memory: 2031  grad_norm: 4839.7294  loss: 1794.5582  loss_cls: 420.6640  loss_conf: 670.6102  loss_xy: 674.8108  loss_wh: 28.4732
2025/05/11 12:08:23 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:16:03  time: 0.2740  data_time: 0.1292  memory: 2031  grad_norm: 4994.7045  loss: 1962.6702  loss_cls: 464.2297  loss_conf: 721.6526  loss_xy: 737.0395  loss_wh: 39.7484
2025/05/11 12:08:34 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:08:35 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:08:36 - mmengine - INFO - bbox_mAP_copypaste: 0.131 0.306 0.084 -1.000 0.099 0.134
2025/05/11 12:08:36 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.1310  coco/bbox_mAP_50: 0.3060  coco/bbox_mAP_75: 0.0840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0990  coco/bbox_mAP_l: 0.1340  data_time: 0.0054  time: 0.0202
2025/05/11 12:08:50 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:15:36  time: 0.2803  data_time: 0.1323  memory: 2031  grad_norm: 4620.1455  loss: 1781.9770  loss_cls: 399.4600  loss_conf: 668.4058  loss_xy: 682.5947  loss_wh: 31.5165
2025/05/11 12:09:04 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:15:22  time: 0.2778  data_time: 0.1299  memory: 2031  grad_norm: 5051.6282  loss: 1991.2955  loss_cls: 482.4288  loss_conf: 705.1281  loss_xy: 766.4805  loss_wh: 37.2581
2025/05/11 12:09:16 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:09:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:09:18 - mmengine - INFO - bbox_mAP_copypaste: 0.138 0.348 0.063 -1.000 0.125 0.142
2025/05/11 12:09:18 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.1380  coco/bbox_mAP_50: 0.3480  coco/bbox_mAP_75: 0.0630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1250  coco/bbox_mAP_l: 0.1420  data_time: 0.0043  time: 0.0192
2025/05/11 12:09:22 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:09:31 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:14:53  time: 0.2619  data_time: 0.1190  memory: 2031  grad_norm: 4521.7895  loss: 1755.5316  loss_cls: 392.9247  loss_conf: 656.3135  loss_xy: 676.5912  loss_wh: 29.7022
2025/05/11 12:09:45 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:14:38  time: 0.2686  data_time: 0.1264  memory: 2031  grad_norm: 4578.9124  loss: 1761.0083  loss_cls: 395.1816  loss_conf: 635.9845  loss_xy: 689.6541  loss_wh: 40.1881
2025/05/11 12:09:56 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:09:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:09:59 - mmengine - INFO - bbox_mAP_copypaste: 0.193 0.392 0.153 -1.000 0.151 0.202
2025/05/11 12:09:59 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.1930  coco/bbox_mAP_50: 0.3920  coco/bbox_mAP_75: 0.1530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1510  coco/bbox_mAP_l: 0.2020  data_time: 0.0051  time: 0.0190
2025/05/11 12:09:59 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 12:10:00 - mmengine - INFO - The best checkpoint with 0.1930 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/11 12:10:13 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:14:11  time: 0.2670  data_time: 0.1190  memory: 2031  grad_norm: 4417.6242  loss: 1789.6414  loss_cls: 401.4608  loss_conf: 651.7596  loss_xy: 707.8301  loss_wh: 28.5909
2025/05/11 12:10:26 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:13:55  time: 0.2635  data_time: 0.1224  memory: 2031  grad_norm: 4273.3339  loss: 1720.8411  loss_cls: 381.2905  loss_conf: 643.3249  loss_xy: 665.8833  loss_wh: 30.3424
2025/05/11 12:10:38 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:10:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:10:40 - mmengine - INFO - bbox_mAP_copypaste: 0.184 0.380 0.154 -1.000 0.115 0.202
2025/05/11 12:10:40 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.1840  coco/bbox_mAP_50: 0.3800  coco/bbox_mAP_75: 0.1540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1150  coco/bbox_mAP_l: 0.2020  data_time: 0.0049  time: 0.0195
2025/05/11 12:10:54 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:13:28  time: 0.2661  data_time: 0.1216  memory: 2031  grad_norm: 4216.3351  loss: 1705.6479  loss_cls: 372.3535  loss_conf: 625.8283  loss_xy: 678.5731  loss_wh: 28.8931
2025/05/11 12:11:07 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:13:14  time: 0.2758  data_time: 0.1339  memory: 2031  grad_norm: 4074.7330  loss: 1614.6896  loss_cls: 330.3322  loss_conf: 601.0086  loss_xy: 652.9214  loss_wh: 30.4273
2025/05/11 12:11:19 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:11:20 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:11:22 - mmengine - INFO - bbox_mAP_copypaste: 0.152 0.296 0.129 -1.000 0.105 0.164
2025/05/11 12:11:22 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.1520  coco/bbox_mAP_50: 0.2960  coco/bbox_mAP_75: 0.1290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1050  coco/bbox_mAP_l: 0.1640  data_time: 0.0047  time: 0.0204
2025/05/11 12:11:36 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:12:49  time: 0.2774  data_time: 0.1322  memory: 2031  grad_norm: 4263.3564  loss: 1654.1583  loss_cls: 373.2068  loss_conf: 599.9595  loss_xy: 652.9535  loss_wh: 28.0385
2025/05/11 12:11:50 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:12:36  time: 0.2800  data_time: 0.1404  memory: 2031  grad_norm: 4025.6432  loss: 1616.5855  loss_cls: 333.4046  loss_conf: 600.0953  loss_xy: 651.7826  loss_wh: 31.3031
2025/05/11 12:12:01 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:12:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:12:04 - mmengine - INFO - bbox_mAP_copypaste: 0.185 0.406 0.131 -1.000 0.111 0.203
2025/05/11 12:12:04 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.1850  coco/bbox_mAP_50: 0.4060  coco/bbox_mAP_75: 0.1310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1110  coco/bbox_mAP_l: 0.2030  data_time: 0.0048  time: 0.0190
2025/05/11 12:12:17 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:12:10  time: 0.2706  data_time: 0.1236  memory: 2031  grad_norm: 3886.6608  loss: 1686.3110  loss_cls: 359.1072  loss_conf: 605.7546  loss_xy: 684.7949  loss_wh: 36.6543
2025/05/11 12:12:32 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:11:57  time: 0.2844  data_time: 0.1425  memory: 2031  grad_norm: 4287.8610  loss: 1632.3170  loss_cls: 333.0386  loss_conf: 604.5339  loss_xy: 659.7615  loss_wh: 34.9830
2025/05/11 12:12:42 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:12:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:12:45 - mmengine - INFO - bbox_mAP_copypaste: 0.182 0.368 0.153 -1.000 0.139 0.192
2025/05/11 12:12:45 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.1820  coco/bbox_mAP_50: 0.3680  coco/bbox_mAP_75: 0.1530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1390  coco/bbox_mAP_l: 0.1920  data_time: 0.0045  time: 0.0211
2025/05/11 12:12:59 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:11:31  time: 0.2793  data_time: 0.1035  memory: 2031  grad_norm: 3948.0650  loss: 1762.8071  loss_cls: 368.7836  loss_conf: 643.6692  loss_xy: 718.3938  loss_wh: 31.9605
2025/05/11 12:13:13 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:11:17  time: 0.2869  data_time: 0.1357  memory: 2031  grad_norm: 3766.3460  loss: 1673.2015  loss_cls: 350.3276  loss_conf: 606.7507  loss_xy: 685.7730  loss_wh: 30.3502
2025/05/11 12:13:25 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:13:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:13:28 - mmengine - INFO - bbox_mAP_copypaste: 0.111 0.295 0.075 -1.000 0.194 0.111
2025/05/11 12:13:28 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.1110  coco/bbox_mAP_50: 0.2950  coco/bbox_mAP_75: 0.0750  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.1110  data_time: 0.0036  time: 0.0207
2025/05/11 12:13:43 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:10:54  time: 0.2940  data_time: 0.1352  memory: 2031  grad_norm: 3885.5610  loss: 1674.2753  loss_cls: 362.6050  loss_conf: 601.0992  loss_xy: 672.0363  loss_wh: 38.5348
2025/05/11 12:13:57 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:10:40  time: 0.2886  data_time: 0.1107  memory: 2031  grad_norm: 3781.8990  loss: 1664.1675  loss_cls: 330.3017  loss_conf: 618.1117  loss_xy: 684.2096  loss_wh: 31.5446
2025/05/11 12:14:08 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:14:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:14:11 - mmengine - INFO - bbox_mAP_copypaste: 0.133 0.284 0.098 -1.000 0.117 0.142
2025/05/11 12:14:11 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.1330  coco/bbox_mAP_50: 0.2840  coco/bbox_mAP_75: 0.0980  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1170  coco/bbox_mAP_l: 0.1420  data_time: 0.0033  time: 0.0193
2025/05/11 12:14:18 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:14:24 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:10:14  time: 0.2674  data_time: 0.1212  memory: 2031  grad_norm: 3669.8129  loss: 1653.5396  loss_cls: 339.9495  loss_conf: 610.7761  loss_xy: 674.3645  loss_wh: 28.4495
2025/05/11 12:14:38 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:10:00  time: 0.2779  data_time: 0.1273  memory: 2031  grad_norm: 3467.1782  loss: 1666.9017  loss_cls: 325.2327  loss_conf: 623.3844  loss_xy: 688.3199  loss_wh: 29.9646
2025/05/11 12:14:50 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:14:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:14:52 - mmengine - INFO - bbox_mAP_copypaste: 0.145 0.326 0.096 -1.000 0.127 0.156
2025/05/11 12:14:52 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.1450  coco/bbox_mAP_50: 0.3260  coco/bbox_mAP_75: 0.0960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1270  coco/bbox_mAP_l: 0.1560  data_time: 0.0038  time: 0.0196
2025/05/11 12:15:06 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:09:35  time: 0.2749  data_time: 0.1278  memory: 2031  grad_norm: 3510.6847  loss: 1697.2155  loss_cls: 352.7983  loss_conf: 615.3011  loss_xy: 692.8654  loss_wh: 36.2507
2025/05/11 12:15:19 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:09:20  time: 0.2647  data_time: 0.1149  memory: 2031  grad_norm: 3374.7986  loss: 1508.9077  loss_cls: 297.0871  loss_conf: 568.6918  loss_xy: 612.3827  loss_wh: 30.7461
2025/05/11 12:15:31 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:15:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:15:33 - mmengine - INFO - bbox_mAP_copypaste: 0.235 0.524 0.178 -1.000 0.116 0.250
2025/05/11 12:15:33 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2350  coco/bbox_mAP_50: 0.5240  coco/bbox_mAP_75: 0.1780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1160  coco/bbox_mAP_l: 0.2500  data_time: 0.0033  time: 0.0199
2025/05/11 12:15:33 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/11 12:15:35 - mmengine - INFO - The best checkpoint with 0.2350 coco/bbox_mAP at 16 epoch is saved to best_coco_bbox_mAP_epoch_16.pth.
2025/05/11 12:15:49 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:08:56  time: 0.2838  data_time: 0.1139  memory: 2031  grad_norm: 3496.5615  loss: 1704.5780  loss_cls: 337.7058  loss_conf: 625.0951  loss_xy: 703.3163  loss_wh: 38.4608
2025/05/11 12:16:03 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:08:42  time: 0.2858  data_time: 0.1257  memory: 2031  grad_norm: 3457.7425  loss: 1593.4046  loss_cls: 340.6395  loss_conf: 567.4761  loss_xy: 656.8392  loss_wh: 28.4497
2025/05/11 12:16:15 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:16:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:16:17 - mmengine - INFO - bbox_mAP_copypaste: 0.212 0.435 0.185 -1.000 0.190 0.222
2025/05/11 12:16:17 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2120  coco/bbox_mAP_50: 0.4350  coco/bbox_mAP_75: 0.1850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.2220  data_time: 0.0039  time: 0.0200
2025/05/11 12:16:31 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:08:17  time: 0.2833  data_time: 0.1189  memory: 2031  grad_norm: 2988.6855  loss: 1521.8638  loss_cls: 295.6129  loss_conf: 559.2265  loss_xy: 642.0978  loss_wh: 24.9266
2025/05/11 12:16:45 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:08:03  time: 0.2827  data_time: 0.1181  memory: 2031  grad_norm: 3314.3610  loss: 1740.6199  loss_cls: 375.5965  loss_conf: 613.7836  loss_xy: 719.5493  loss_wh: 31.6905
2025/05/11 12:16:57 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:16:58 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:17:00 - mmengine - INFO - bbox_mAP_copypaste: 0.315 0.592 0.291 -1.000 0.195 0.339
2025/05/11 12:17:00 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3150  coco/bbox_mAP_50: 0.5920  coco/bbox_mAP_75: 0.2910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1950  coco/bbox_mAP_l: 0.3390  data_time: 0.0045  time: 0.0202
2025/05/11 12:17:00 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_16.pth is removed
2025/05/11 12:17:01 - mmengine - INFO - The best checkpoint with 0.3150 coco/bbox_mAP at 18 epoch is saved to best_coco_bbox_mAP_epoch_18.pth.
2025/05/11 12:17:15 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:07:38  time: 0.2759  data_time: 0.1132  memory: 2031  grad_norm: 3261.8158  loss: 1590.9957  loss_cls: 310.4558  loss_conf: 582.9364  loss_xy: 667.8326  loss_wh: 29.7709
2025/05/11 12:17:29 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:07:24  time: 0.2906  data_time: 0.1270  memory: 2031  grad_norm: 3237.0931  loss: 1644.2905  loss_cls: 329.5591  loss_conf: 587.6850  loss_xy: 696.4739  loss_wh: 30.5726
2025/05/11 12:17:41 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:17:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:17:43 - mmengine - INFO - bbox_mAP_copypaste: 0.275 0.520 0.251 -1.000 0.237 0.291
2025/05/11 12:17:43 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2750  coco/bbox_mAP_50: 0.5200  coco/bbox_mAP_75: 0.2510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2370  coco/bbox_mAP_l: 0.2910  data_time: 0.0041  time: 0.0201
2025/05/11 12:17:58 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:06:59  time: 0.2871  data_time: 0.1227  memory: 2031  grad_norm: 2871.3721  loss: 1556.5152  loss_cls: 291.4762  loss_conf: 563.0191  loss_xy: 676.7925  loss_wh: 25.2274
2025/05/11 12:18:11 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:06:45  time: 0.2692  data_time: 0.1092  memory: 2031  grad_norm: 3284.6219  loss: 1584.7496  loss_cls: 318.2081  loss_conf: 565.7501  loss_xy: 674.1284  loss_wh: 26.6630
2025/05/11 12:18:22 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:18:23 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:18:25 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.586 0.162 -1.000 0.206 0.277
2025/05/11 12:18:25 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.1620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.2770  data_time: 0.0040  time: 0.0200
2025/05/11 12:18:39 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:06:19  time: 0.2940  data_time: 0.1317  memory: 2031  grad_norm: 2965.1384  loss: 1524.9629  loss_cls: 297.5015  loss_conf: 554.8685  loss_xy: 644.8253  loss_wh: 27.7676
2025/05/11 12:18:53 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:06:05  time: 0.2756  data_time: 0.1134  memory: 2031  grad_norm: 3230.9056  loss: 1615.8392  loss_cls: 311.9282  loss_conf: 592.2671  loss_xy: 683.6635  loss_wh: 27.9804
2025/05/11 12:19:05 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:19:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:19:08 - mmengine - INFO - bbox_mAP_copypaste: 0.249 0.546 0.170 -1.000 0.150 0.267
2025/05/11 12:19:08 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2490  coco/bbox_mAP_50: 0.5460  coco/bbox_mAP_75: 0.1700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2670  data_time: 0.0050  time: 0.0217
2025/05/11 12:19:19 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:19:23 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:05:40  time: 0.2902  data_time: 0.1382  memory: 2031  grad_norm: 3082.1635  loss: 1577.6023  loss_cls: 295.7105  loss_conf: 578.0978  loss_xy: 678.1709  loss_wh: 25.6232
2025/05/11 12:19:36 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:05:26  time: 0.2793  data_time: 0.1271  memory: 2031  grad_norm: 3016.8063  loss: 1654.1033  loss_cls: 323.6516  loss_conf: 598.9019  loss_xy: 705.1776  loss_wh: 26.3721
2025/05/11 12:19:49 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:19:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:19:51 - mmengine - INFO - bbox_mAP_copypaste: 0.121 0.334 0.053 -1.000 0.152 0.129
2025/05/11 12:19:51 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.1210  coco/bbox_mAP_50: 0.3340  coco/bbox_mAP_75: 0.0530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1520  coco/bbox_mAP_l: 0.1290  data_time: 0.0059  time: 0.0207
2025/05/11 12:20:06 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:05:01  time: 0.2954  data_time: 0.1424  memory: 2031  grad_norm: 2830.4533  loss: 1596.0793  loss_cls: 311.2485  loss_conf: 573.5825  loss_xy: 684.5685  loss_wh: 26.6797
2025/05/11 12:20:21 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:04:48  time: 0.2977  data_time: 0.1394  memory: 2031  grad_norm: 2911.0964  loss: 1548.2362  loss_cls: 287.4636  loss_conf: 564.2014  loss_xy: 672.8471  loss_wh: 23.7242
2025/05/11 12:20:32 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:20:33 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:20:35 - mmengine - INFO - bbox_mAP_copypaste: 0.303 0.612 0.236 -1.000 0.191 0.323
2025/05/11 12:20:35 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3030  coco/bbox_mAP_50: 0.6120  coco/bbox_mAP_75: 0.2360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1910  coco/bbox_mAP_l: 0.3230  data_time: 0.0055  time: 0.0207
2025/05/11 12:20:49 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:04:22  time: 0.2930  data_time: 0.1423  memory: 2031  grad_norm: 2775.1726  loss: 1481.1568  loss_cls: 287.7708  loss_conf: 532.4704  loss_xy: 637.9091  loss_wh: 23.0065
2025/05/11 12:21:04 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:04:08  time: 0.2894  data_time: 0.1475  memory: 2031  grad_norm: 2882.5725  loss: 1608.5455  loss_cls: 310.4697  loss_conf: 575.8822  loss_xy: 697.7210  loss_wh: 24.4726
2025/05/11 12:21:15 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:21:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:21:18 - mmengine - INFO - bbox_mAP_copypaste: 0.233 0.494 0.181 -1.000 0.187 0.243
2025/05/11 12:21:18 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2330  coco/bbox_mAP_50: 0.4940  coco/bbox_mAP_75: 0.1810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1870  coco/bbox_mAP_l: 0.2430  data_time: 0.0049  time: 0.0203
2025/05/11 12:21:32 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:03:43  time: 0.2875  data_time: 0.1363  memory: 2031  grad_norm: 2887.8484  loss: 1511.6093  loss_cls: 291.0028  loss_conf: 537.1268  loss_xy: 654.9598  loss_wh: 28.5199
2025/05/11 12:21:47 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.2868  data_time: 0.1427  memory: 2031  grad_norm: 2948.9784  loss: 1465.0410  loss_cls: 274.0333  loss_conf: 530.6648  loss_xy: 637.9590  loss_wh: 22.3838
2025/05/11 12:21:58 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:21:59 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:22:00 - mmengine - INFO - bbox_mAP_copypaste: 0.272 0.545 0.226 -1.000 0.207 0.293
2025/05/11 12:22:00 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2720  coco/bbox_mAP_50: 0.5450  coco/bbox_mAP_75: 0.2260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.2930  data_time: 0.0053  time: 0.0200
2025/05/11 12:22:15 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:03:03  time: 0.2917  data_time: 0.1367  memory: 2031  grad_norm: 2670.9876  loss: 1501.1354  loss_cls: 268.0147  loss_conf: 526.7366  loss_xy: 671.6329  loss_wh: 34.7511
2025/05/11 12:22:29 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:02:49  time: 0.2807  data_time: 0.1344  memory: 2031  grad_norm: 3080.5167  loss: 1609.2625  loss_cls: 313.2304  loss_conf: 574.3353  loss_xy: 693.7045  loss_wh: 27.9922
2025/05/11 12:22:40 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:22:41 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:22:42 - mmengine - INFO - bbox_mAP_copypaste: 0.303 0.576 0.279 -1.000 0.215 0.320
2025/05/11 12:22:42 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3030  coco/bbox_mAP_50: 0.5760  coco/bbox_mAP_75: 0.2790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3200  data_time: 0.0054  time: 0.0199
2025/05/11 12:22:57 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:02:24  time: 0.2897  data_time: 0.1397  memory: 2031  grad_norm: 2635.9872  loss: 1538.3467  loss_cls: 280.0511  loss_conf: 549.9313  loss_xy: 686.1186  loss_wh: 22.2456
2025/05/11 12:23:11 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:02:10  time: 0.2910  data_time: 0.1325  memory: 2031  grad_norm: 2683.3887  loss: 1528.8507  loss_cls: 278.4600  loss_conf: 547.9164  loss_xy: 678.6197  loss_wh: 23.8545
2025/05/11 12:23:23 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:23:24 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:23:25 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.627 0.332 -1.000 0.231 0.364
2025/05/11 12:23:25 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6270  coco/bbox_mAP_75: 0.3320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2310  coco/bbox_mAP_l: 0.3640  data_time: 0.0048  time: 0.0201
2025/05/11 12:23:25 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_18.pth is removed
2025/05/11 12:23:26 - mmengine - INFO - The best checkpoint with 0.3410 coco/bbox_mAP at 27 epoch is saved to best_coco_bbox_mAP_epoch_27.pth.
2025/05/11 12:23:40 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:44  time: 0.2761  data_time: 0.1264  memory: 2031  grad_norm: 2663.7743  loss: 1448.0492  loss_cls: 274.6006  loss_conf: 515.9973  loss_xy: 636.5410  loss_wh: 20.9103
2025/05/11 12:23:54 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:01:30  time: 0.2774  data_time: 0.1335  memory: 2031  grad_norm: 2673.9503  loss: 1545.6959  loss_cls: 268.5489  loss_conf: 557.0528  loss_xy: 696.8621  loss_wh: 23.2321
2025/05/11 12:24:06 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:24:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:24:09 - mmengine - INFO - bbox_mAP_copypaste: 0.346 0.645 0.317 -1.000 0.214 0.370
2025/05/11 12:24:09 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3460  coco/bbox_mAP_50: 0.6450  coco/bbox_mAP_75: 0.3170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3700  data_time: 0.0056  time: 0.0216
2025/05/11 12:24:09 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_27.pth is removed
2025/05/11 12:24:10 - mmengine - INFO - The best checkpoint with 0.3460 coco/bbox_mAP at 28 epoch is saved to best_coco_bbox_mAP_epoch_28.pth.
2025/05/11 12:24:24 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:01:05  time: 0.2837  data_time: 0.1367  memory: 2031  grad_norm: 2577.9132  loss: 1487.5384  loss_cls: 269.9228  loss_conf: 526.0034  loss_xy: 668.5513  loss_wh: 23.0608
2025/05/11 12:24:25 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:24:38 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.2840  data_time: 0.1309  memory: 2031  grad_norm: 2631.0026  loss: 1471.9952  loss_cls: 260.1079  loss_conf: 531.8800  loss_xy: 656.7917  loss_wh: 23.2157
2025/05/11 12:24:50 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:24:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:24:52 - mmengine - INFO - bbox_mAP_copypaste: 0.294 0.540 0.282 -1.000 0.198 0.307
2025/05/11 12:24:52 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2940  coco/bbox_mAP_50: 0.5400  coco/bbox_mAP_75: 0.2820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1980  coco/bbox_mAP_l: 0.3070  data_time: 0.0043  time: 0.0208
2025/05/11 12:25:07 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:25  time: 0.2912  data_time: 0.1227  memory: 2031  grad_norm: 2583.7639  loss: 1413.6572  loss_cls: 269.7820  loss_conf: 497.4717  loss_xy: 624.1838  loss_wh: 22.2197
2025/05/11 12:25:21 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:11  time: 0.2868  data_time: 0.1251  memory: 2031  grad_norm: 2693.8150  loss: 1505.9868  loss_cls: 261.7695  loss_conf: 548.8194  loss_xy: 669.5499  loss_wh: 25.8480
2025/05/11 12:25:34 - mmengine - INFO - Exp name: yolov3_fs_df_20250511_120402
2025/05/11 12:25:34 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 12:25:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 12:25:39 - mmengine - INFO - bbox_mAP_copypaste: 0.323 0.599 0.312 -1.000 0.201 0.343
2025/05/11 12:25:39 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3230  coco/bbox_mAP_50: 0.5990  coco/bbox_mAP_75: 0.3120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2010  coco/bbox_mAP_l: 0.3430  data_time: 0.0037  time: 0.0219
