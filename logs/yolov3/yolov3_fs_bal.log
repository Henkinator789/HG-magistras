2025/05/11 21:04:45 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 104130093
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 104130093
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 21:04:45 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    416,
                    416,
                ), type='Resize'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 21:04:46 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 21:04:46 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 21:04:47 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 21:04:47 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 21:04:47 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 21:04:47 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 21:04:47 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 21:05:00 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:53  time: 0.2568  data_time: 0.0958  memory: 2033  grad_norm: 7264.1826  loss: 5276.0499  loss_cls: 1743.2869  loss_conf: 2300.9794  loss_xy: 1125.6129  loss_wh: 106.1707
2025/05/11 21:05:08 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:10  time: 0.1549  data_time: 0.0024  memory: 2033  grad_norm: 5938.3095  loss: 3805.6432  loss_cls: 1168.8700  loss_conf: 1497.6371  loss_xy: 1068.5877  loss_wh: 70.5484
2025/05/11 21:05:14 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:05:23 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:05:25 - mmengine - INFO - bbox_mAP_copypaste: 0.072 0.173 0.037 -1.000 0.056 0.075
2025/05/11 21:05:25 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0720  coco/bbox_mAP_50: 0.1730  coco/bbox_mAP_75: 0.0370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0560  coco/bbox_mAP_l: 0.0750  data_time: 0.1656  time: 0.1874
2025/05/11 21:05:26 - mmengine - INFO - The best checkpoint with 0.0720 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 21:05:34 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:24  time: 0.1655  data_time: 0.0047  memory: 2033  grad_norm: 5500.1748  loss: 2957.9721  loss_cls: 808.9860  loss_conf: 1134.5386  loss_xy: 965.9240  loss_wh: 48.5235
2025/05/11 21:05:42 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:53  time: 0.1574  data_time: 0.0021  memory: 2033  grad_norm: 5559.0710  loss: 2979.0923  loss_cls: 839.0005  loss_conf: 1089.2679  loss_xy: 1007.7629  loss_wh: 43.0611
2025/05/11 21:05:48 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:05:49 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:05:51 - mmengine - INFO - bbox_mAP_copypaste: 0.109 0.217 0.094 -1.000 0.070 0.118
2025/05/11 21:05:51 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1090  coco/bbox_mAP_50: 0.2170  coco/bbox_mAP_75: 0.0940  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0700  coco/bbox_mAP_l: 0.1180  data_time: 0.0053  time: 0.0198
2025/05/11 21:05:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 21:05:52 - mmengine - INFO - The best checkpoint with 0.1090 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 21:06:00 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:15  time: 0.1650  data_time: 0.0047  memory: 2033  grad_norm: 5912.1909  loss: 2650.5963  loss_cls: 689.2646  loss_conf: 966.3783  loss_xy: 955.3109  loss_wh: 39.6424
2025/05/11 21:06:08 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:00  time: 0.1603  data_time: 0.0024  memory: 2033  grad_norm: 6042.0646  loss: 2606.1137  loss_cls: 661.6793  loss_conf: 939.8417  loss_xy: 964.9184  loss_wh: 39.6743
2025/05/11 21:06:15 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:06:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:06:17 - mmengine - INFO - bbox_mAP_copypaste: 0.163 0.336 0.129 -1.000 0.124 0.170
2025/05/11 21:06:17 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1630  coco/bbox_mAP_50: 0.3360  coco/bbox_mAP_75: 0.1290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1240  coco/bbox_mAP_l: 0.1700  data_time: 0.0033  time: 0.0192
2025/05/11 21:06:17 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 21:06:18 - mmengine - INFO - The best checkpoint with 0.1630 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 21:06:27 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:36  time: 0.1654  data_time: 0.0045  memory: 2033  grad_norm: 5988.3037  loss: 2383.7077  loss_cls: 549.9308  loss_conf: 860.7340  loss_xy: 937.8531  loss_wh: 35.1898
2025/05/11 21:06:34 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:23  time: 0.1582  data_time: 0.0022  memory: 2033  grad_norm: 6312.4719  loss: 2384.3971  loss_cls: 520.5616  loss_conf: 858.5133  loss_xy: 967.4651  loss_wh: 37.8571
2025/05/11 21:06:41 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:06:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:06:43 - mmengine - INFO - bbox_mAP_copypaste: 0.154 0.349 0.107 -1.000 0.118 0.160
2025/05/11 21:06:43 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1540  coco/bbox_mAP_50: 0.3490  coco/bbox_mAP_75: 0.1070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1180  coco/bbox_mAP_l: 0.1600  data_time: 0.0036  time: 0.0195
2025/05/11 21:06:51 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:02  time: 0.1589  data_time: 0.0047  memory: 2033  grad_norm: 6179.9653  loss: 2161.7404  loss_cls: 434.4869  loss_conf: 782.8553  loss_xy: 910.6801  loss_wh: 33.7181
2025/05/11 21:06:59 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:50  time: 0.1557  data_time: 0.0022  memory: 2033  grad_norm: 6584.4472  loss: 2178.0788  loss_cls: 441.9835  loss_conf: 773.9711  loss_xy: 930.2222  loss_wh: 31.9021
2025/05/11 21:07:05 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:07:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:07:08 - mmengine - INFO - bbox_mAP_copypaste: 0.134 0.307 0.084 -1.000 0.100 0.142
2025/05/11 21:07:08 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.1340  coco/bbox_mAP_50: 0.3070  coco/bbox_mAP_75: 0.0840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1000  coco/bbox_mAP_l: 0.1420  data_time: 0.0048  time: 0.0192
2025/05/11 21:07:16 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:33  time: 0.1627  data_time: 0.0046  memory: 2033  grad_norm: 7156.7311  loss: 2193.2257  loss_cls: 430.5228  loss_conf: 767.9566  loss_xy: 959.3543  loss_wh: 35.3920
2025/05/11 21:07:24 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:22  time: 0.1527  data_time: 0.0022  memory: 2033  grad_norm: 6237.5119  loss: 1930.5274  loss_cls: 340.5197  loss_conf: 691.6609  loss_xy: 870.3868  loss_wh: 27.9599
2025/05/11 21:07:30 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:07:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:07:32 - mmengine - INFO - bbox_mAP_copypaste: 0.228 0.519 0.138 -1.000 0.164 0.244
2025/05/11 21:07:32 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2280  coco/bbox_mAP_50: 0.5190  coco/bbox_mAP_75: 0.1380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1640  coco/bbox_mAP_l: 0.2440  data_time: 0.0049  time: 0.0199
2025/05/11 21:07:33 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 21:07:34 - mmengine - INFO - The best checkpoint with 0.2280 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 21:07:42 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:06  time: 0.1628  data_time: 0.0048  memory: 2033  grad_norm: 6701.0904  loss: 1884.5877  loss_cls: 321.7596  loss_conf: 655.0992  loss_xy: 880.4563  loss_wh: 27.2726
2025/05/11 21:07:50 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:56  time: 0.1572  data_time: 0.0023  memory: 2033  grad_norm: 6795.9755  loss: 2065.1572  loss_cls: 370.9729  loss_conf: 713.9422  loss_xy: 951.6250  loss_wh: 28.6171
2025/05/11 21:07:56 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:07:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:07:59 - mmengine - INFO - bbox_mAP_copypaste: 0.226 0.444 0.200 -1.000 0.217 0.233
2025/05/11 21:07:59 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2260  coco/bbox_mAP_50: 0.4440  coco/bbox_mAP_75: 0.2000  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.2330  data_time: 0.0049  time: 0.0202
2025/05/11 21:08:01 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:08:07 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:40  time: 0.1629  data_time: 0.0047  memory: 2033  grad_norm: 6099.2883  loss: 1917.3995  loss_cls: 314.2075  loss_conf: 648.4662  loss_xy: 928.7737  loss_wh: 25.9521
2025/05/11 21:08:15 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:31  time: 0.1552  data_time: 0.0021  memory: 2033  grad_norm: 6331.4609  loss: 1841.3999  loss_cls: 300.9204  loss_conf: 624.1462  loss_xy: 888.6984  loss_wh: 27.6350
2025/05/11 21:08:21 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:08:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:08:23 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.532 0.213 -1.000 0.245 0.282
2025/05/11 21:08:23 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5320  coco/bbox_mAP_75: 0.2130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2450  coco/bbox_mAP_l: 0.2820  data_time: 0.0043  time: 0.0194
2025/05/11 21:08:23 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 21:08:25 - mmengine - INFO - The best checkpoint with 0.2640 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/11 21:08:33 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:16  time: 0.1675  data_time: 0.0047  memory: 2033  grad_norm: 5940.3498  loss: 1730.1205  loss_cls: 260.7294  loss_conf: 559.8013  loss_xy: 880.7712  loss_wh: 28.8186
2025/05/11 21:08:41 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:07  time: 0.1597  data_time: 0.0022  memory: 2033  grad_norm: 6572.8055  loss: 1795.5872  loss_cls: 277.5222  loss_conf: 591.2670  loss_xy: 898.7370  loss_wh: 28.0610
2025/05/11 21:08:48 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:08:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:08:50 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.633 0.322 -1.000 0.243 0.362
2025/05/11 21:08:50 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6330  coco/bbox_mAP_75: 0.3220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.3620  data_time: 0.0046  time: 0.0189
2025/05/11 21:08:50 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/11 21:08:51 - mmengine - INFO - The best checkpoint with 0.3410 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/11 21:08:59 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:53  time: 0.1661  data_time: 0.0046  memory: 2033  grad_norm: 6439.4201  loss: 1761.3787  loss_cls: 276.5857  loss_conf: 530.8028  loss_xy: 927.4589  loss_wh: 26.5314
2025/05/11 21:09:07 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:44  time: 0.1547  data_time: 0.0021  memory: 2033  grad_norm: 6438.0909  loss: 1693.6173  loss_cls: 229.0949  loss_conf: 537.4982  loss_xy: 899.7683  loss_wh: 27.2559
2025/05/11 21:09:13 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:09:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:09:16 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.605 0.230 -1.000 0.243 0.307
2025/05/11 21:09:16 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.2300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.3070  data_time: 0.0037  time: 0.0193
2025/05/11 21:09:24 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:28  time: 0.1601  data_time: 0.0046  memory: 2033  grad_norm: 6443.2839  loss: 1635.5715  loss_cls: 230.8916  loss_conf: 465.6585  loss_xy: 913.1214  loss_wh: 25.9000
2025/05/11 21:09:32 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:19  time: 0.1573  data_time: 0.0023  memory: 2033  grad_norm: 6670.5842  loss: 1669.8799  loss_cls: 223.3794  loss_conf: 500.2170  loss_xy: 919.6877  loss_wh: 26.5958
2025/05/11 21:09:38 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:09:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:09:41 - mmengine - INFO - bbox_mAP_copypaste: 0.298 0.579 0.257 -1.000 0.205 0.321
2025/05/11 21:09:41 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2980  coco/bbox_mAP_50: 0.5790  coco/bbox_mAP_75: 0.2570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3210  data_time: 0.0042  time: 0.0195
2025/05/11 21:09:49 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:04  time: 0.1592  data_time: 0.0046  memory: 2033  grad_norm: 6553.0279  loss: 1522.7692  loss_cls: 189.8411  loss_conf: 398.4960  loss_xy: 909.8576  loss_wh: 24.5745
2025/05/11 21:09:56 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:55  time: 0.1535  data_time: 0.0021  memory: 2033  grad_norm: 7170.7181  loss: 1513.6093  loss_cls: 178.8288  loss_conf: 423.9108  loss_xy: 884.8352  loss_wh: 26.0346
2025/05/11 21:10:03 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:10:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:10:05 - mmengine - INFO - bbox_mAP_copypaste: 0.268 0.537 0.221 -1.000 0.177 0.289
2025/05/11 21:10:05 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.2680  coco/bbox_mAP_50: 0.5370  coco/bbox_mAP_75: 0.2210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.2890  data_time: 0.0047  time: 0.0210
2025/05/11 21:10:13 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:40  time: 0.1558  data_time: 0.0046  memory: 2033  grad_norm: 6557.2811  loss: 1369.0843  loss_cls: 155.8557  loss_conf: 329.2111  loss_xy: 859.4088  loss_wh: 24.6088
2025/05/11 21:10:21 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:31  time: 0.1526  data_time: 0.0021  memory: 2033  grad_norm: 6790.9918  loss: 1403.7779  loss_cls: 158.1796  loss_conf: 347.9165  loss_xy: 870.3391  loss_wh: 27.3427
2025/05/11 21:10:27 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:10:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:10:30 - mmengine - INFO - bbox_mAP_copypaste: 0.270 0.537 0.234 -1.000 0.154 0.286
2025/05/11 21:10:30 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2700  coco/bbox_mAP_50: 0.5370  coco/bbox_mAP_75: 0.2340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1540  coco/bbox_mAP_l: 0.2860  data_time: 0.0051  time: 0.0198
2025/05/11 21:10:38 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:17  time: 0.1610  data_time: 0.0045  memory: 2033  grad_norm: 6844.3951  loss: 1346.1512  loss_cls: 136.5799  loss_conf: 296.7574  loss_xy: 883.4375  loss_wh: 29.3764
2025/05/11 21:10:46 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:09  time: 0.1595  data_time: 0.0024  memory: 2033  grad_norm: 7460.0007  loss: 1421.8327  loss_cls: 163.0035  loss_conf: 319.6510  loss_xy: 912.9127  loss_wh: 26.2655
2025/05/11 21:10:52 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:10:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:10:55 - mmengine - INFO - bbox_mAP_copypaste: 0.281 0.558 0.246 -1.000 0.206 0.300
2025/05/11 21:10:55 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2810  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.2460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3000  data_time: 0.0053  time: 0.0202
2025/05/11 21:10:59 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:11:03 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:54  time: 0.1616  data_time: 0.0046  memory: 2033  grad_norm: 6425.3873  loss: 1276.5711  loss_cls: 105.6552  loss_conf: 248.7742  loss_xy: 892.4760  loss_wh: 29.6657
2025/05/11 21:11:11 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:46  time: 0.1568  data_time: 0.0023  memory: 2033  grad_norm: 6896.4977  loss: 1318.6610  loss_cls: 108.0281  loss_conf: 269.2213  loss_xy: 913.4906  loss_wh: 27.9210
2025/05/11 21:11:17 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:11:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:11:19 - mmengine - INFO - bbox_mAP_copypaste: 0.261 0.558 0.176 -1.000 0.222 0.275
2025/05/11 21:11:19 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2610  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.1760  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.2750  data_time: 0.0049  time: 0.0192
2025/05/11 21:11:27 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:31  time: 0.1634  data_time: 0.0046  memory: 2033  grad_norm: 6572.6696  loss: 1278.4497  loss_cls: 106.2389  loss_conf: 217.3808  loss_xy: 927.0552  loss_wh: 27.7748
2025/05/11 21:11:35 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:23  time: 0.1572  data_time: 0.0021  memory: 2033  grad_norm: 6452.1736  loss: 1192.3549  loss_cls: 76.0979  loss_conf: 226.5716  loss_xy: 861.3382  loss_wh: 28.3472
2025/05/11 21:11:42 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:11:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:11:44 - mmengine - INFO - bbox_mAP_copypaste: 0.223 0.537 0.132 -1.000 0.184 0.237
2025/05/11 21:11:44 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2230  coco/bbox_mAP_50: 0.5370  coco/bbox_mAP_75: 0.1320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.2370  data_time: 0.0023  time: 0.0188
2025/05/11 21:11:52 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:08  time: 0.1574  data_time: 0.0046  memory: 2033  grad_norm: 6063.1682  loss: 1109.7495  loss_cls: 69.5678  loss_conf: 170.2758  loss_xy: 841.5379  loss_wh: 28.3680
2025/05/11 21:12:00 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:00  time: 0.1561  data_time: 0.0023  memory: 2033  grad_norm: 6998.7941  loss: 1209.4226  loss_cls: 92.9829  loss_conf: 189.1083  loss_xy: 897.2666  loss_wh: 30.0647
2025/05/11 21:12:06 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:12:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:12:09 - mmengine - INFO - bbox_mAP_copypaste: 0.286 0.581 0.229 -1.000 0.225 0.307
2025/05/11 21:12:09 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2860  coco/bbox_mAP_50: 0.5810  coco/bbox_mAP_75: 0.2290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2250  coco/bbox_mAP_l: 0.3070  data_time: 0.0041  time: 0.0189
2025/05/11 21:12:17 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:45  time: 0.1616  data_time: 0.0045  memory: 2033  grad_norm: 6272.2483  loss: 1140.8063  loss_cls: 66.8408  loss_conf: 153.9419  loss_xy: 890.1525  loss_wh: 29.8711
2025/05/11 21:12:25 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:37  time: 0.1567  data_time: 0.0021  memory: 2033  grad_norm: 6803.1561  loss: 1167.1636  loss_cls: 68.9565  loss_conf: 166.2808  loss_xy: 897.3418  loss_wh: 34.5846
2025/05/11 21:12:31 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:12:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:12:34 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.562 0.232 -1.000 0.216 0.294
2025/05/11 21:12:34 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5620  coco/bbox_mAP_75: 0.2320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.2940  data_time: 0.0039  time: 0.0200
2025/05/11 21:12:42 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:22  time: 0.1631  data_time: 0.0046  memory: 2033  grad_norm: 5662.3935  loss: 1113.3774  loss_cls: 50.6059  loss_conf: 125.8709  loss_xy: 900.8572  loss_wh: 36.0434
2025/05/11 21:12:50 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:14  time: 0.1587  data_time: 0.0024  memory: 2033  grad_norm: 5848.3269  loss: 1086.3420  loss_cls: 58.1962  loss_conf: 128.6522  loss_xy: 871.4443  loss_wh: 28.0493
2025/05/11 21:12:56 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:12:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:12:59 - mmengine - INFO - bbox_mAP_copypaste: 0.245 0.554 0.158 -1.000 0.220 0.255
2025/05/11 21:12:59 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2450  coco/bbox_mAP_50: 0.5540  coco/bbox_mAP_75: 0.1580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2200  coco/bbox_mAP_l: 0.2550  data_time: 0.0047  time: 0.0197
2025/05/11 21:13:07 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:00  time: 0.1582  data_time: 0.0047  memory: 2033  grad_norm: 5258.6166  loss: 1042.3762  loss_cls: 36.0623  loss_conf: 100.0724  loss_xy: 867.0520  loss_wh: 39.1895
2025/05/11 21:13:14 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:51  time: 0.1544  data_time: 0.0021  memory: 2033  grad_norm: 6163.3691  loss: 1066.9318  loss_cls: 55.5806  loss_conf: 118.3760  loss_xy: 867.3235  loss_wh: 25.6516
2025/05/11 21:13:21 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:13:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:13:23 - mmengine - INFO - bbox_mAP_copypaste: 0.319 0.623 0.284 -1.000 0.189 0.346
2025/05/11 21:13:23 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3190  coco/bbox_mAP_50: 0.6230  coco/bbox_mAP_75: 0.2840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1890  coco/bbox_mAP_l: 0.3460  data_time: 0.0049  time: 0.0192
2025/05/11 21:13:31 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:37  time: 0.1576  data_time: 0.0046  memory: 2033  grad_norm: 5581.2568  loss: 1022.7309  loss_cls: 50.0298  loss_conf: 100.3746  loss_xy: 850.5911  loss_wh: 21.7354
2025/05/11 21:13:39 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.1580  data_time: 0.0024  memory: 2033  grad_norm: 5676.3382  loss: 1093.0721  loss_cls: 41.1868  loss_conf: 118.4594  loss_xy: 903.1108  loss_wh: 30.3151
2025/05/11 21:13:45 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:13:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:13:48 - mmengine - INFO - bbox_mAP_copypaste: 0.248 0.531 0.173 -1.000 0.169 0.275
2025/05/11 21:13:48 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2480  coco/bbox_mAP_50: 0.5310  coco/bbox_mAP_75: 0.1730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1690  coco/bbox_mAP_l: 0.2750  data_time: 0.0048  time: 0.0187
2025/05/11 21:13:54 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:13:56 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:14  time: 0.1619  data_time: 0.0046  memory: 2033  grad_norm: 4973.5980  loss: 1009.4764  loss_cls: 29.0530  loss_conf: 85.2130  loss_xy: 865.1775  loss_wh: 30.0329
2025/05/11 21:14:04 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:06  time: 0.1562  data_time: 0.0022  memory: 2033  grad_norm: 5382.7557  loss: 1058.8300  loss_cls: 32.5429  loss_conf: 98.6841  loss_xy: 892.4678  loss_wh: 35.1351
2025/05/11 21:14:10 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:14:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:14:13 - mmengine - INFO - bbox_mAP_copypaste: 0.276 0.602 0.209 -1.000 0.179 0.296
2025/05/11 21:14:13 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2760  coco/bbox_mAP_50: 0.6020  coco/bbox_mAP_75: 0.2090  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.2960  data_time: 0.0051  time: 0.0201
2025/05/11 21:14:21 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:52  time: 0.1594  data_time: 0.0045  memory: 2033  grad_norm: 4884.8670  loss: 1006.3968  loss_cls: 29.9589  loss_conf: 74.8394  loss_xy: 866.5548  loss_wh: 35.0437
2025/05/11 21:14:28 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:43  time: 0.1550  data_time: 0.0022  memory: 2033  grad_norm: 5098.6026  loss: 1014.5772  loss_cls: 30.5439  loss_conf: 79.4350  loss_xy: 874.9917  loss_wh: 29.6066
2025/05/11 21:14:35 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:14:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:14:37 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.576 0.251 -1.000 0.190 0.311
2025/05/11 21:14:37 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.5760  coco/bbox_mAP_75: 0.2510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.3110  data_time: 0.0044  time: 0.0203
2025/05/11 21:14:45 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:29  time: 0.1604  data_time: 0.0045  memory: 2033  grad_norm: 4671.7285  loss: 944.0206  loss_cls: 25.0012  loss_conf: 70.3590  loss_xy: 822.8043  loss_wh: 25.8560
2025/05/11 21:14:53 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:21  time: 0.1591  data_time: 0.0020  memory: 2033  grad_norm: 4994.0964  loss: 1039.6741  loss_cls: 28.0030  loss_conf: 81.1286  loss_xy: 901.4703  loss_wh: 29.0722
2025/05/11 21:15:00 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:15:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:15:02 - mmengine - INFO - bbox_mAP_copypaste: 0.267 0.542 0.222 -1.000 0.144 0.297
2025/05/11 21:15:02 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2670  coco/bbox_mAP_50: 0.5420  coco/bbox_mAP_75: 0.2220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1440  coco/bbox_mAP_l: 0.2970  data_time: 0.0045  time: 0.0194
2025/05/11 21:15:10 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:06  time: 0.1590  data_time: 0.0046  memory: 2033  grad_norm: 4861.0095  loss: 953.6780  loss_cls: 29.9636  loss_conf: 66.3403  loss_xy: 832.6387  loss_wh: 24.7353
2025/05/11 21:15:18 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:58  time: 0.1558  data_time: 0.0021  memory: 2033  grad_norm: 4948.1363  loss: 1000.0259  loss_cls: 25.1285  loss_conf: 73.1245  loss_xy: 874.1751  loss_wh: 27.5978
2025/05/11 21:15:24 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:15:25 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:15:27 - mmengine - INFO - bbox_mAP_copypaste: 0.274 0.580 0.213 -1.000 0.181 0.295
2025/05/11 21:15:27 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2740  coco/bbox_mAP_50: 0.5800  coco/bbox_mAP_75: 0.2130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1810  coco/bbox_mAP_l: 0.2950  data_time: 0.0038  time: 0.0194
2025/05/11 21:15:35 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:44  time: 0.1569  data_time: 0.0047  memory: 2033  grad_norm: 4283.6932  loss: 927.4247  loss_cls: 20.4261  loss_conf: 55.4503  loss_xy: 823.8645  loss_wh: 27.6838
2025/05/11 21:15:43 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:36  time: 0.1571  data_time: 0.0022  memory: 2033  grad_norm: 5011.7667  loss: 1033.1953  loss_cls: 29.8061  loss_conf: 66.5655  loss_xy: 906.5166  loss_wh: 30.3070
2025/05/11 21:15:49 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:15:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:15:51 - mmengine - INFO - bbox_mAP_copypaste: 0.306 0.587 0.273 -1.000 0.207 0.328
2025/05/11 21:15:51 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3060  coco/bbox_mAP_50: 0.5870  coco/bbox_mAP_75: 0.2730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3280  data_time: 0.0031  time: 0.0192
2025/05/11 21:16:00 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:21  time: 0.1648  data_time: 0.0045  memory: 2033  grad_norm: 4310.2582  loss: 1003.7768  loss_cls: 17.6714  loss_conf: 59.6219  loss_xy: 899.8571  loss_wh: 26.6263
2025/05/11 21:16:08 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:13  time: 0.1579  data_time: 0.0025  memory: 2033  grad_norm: 5219.1398  loss: 978.1883  loss_cls: 28.9046  loss_conf: 66.4326  loss_xy: 856.2531  loss_wh: 26.5980
2025/05/11 21:16:14 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:16:15 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:16:16 - mmengine - INFO - bbox_mAP_copypaste: 0.311 0.586 0.291 -1.000 0.203 0.336
2025/05/11 21:16:16 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3110  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.2910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3360  data_time: 0.0050  time: 0.0201
2025/05/11 21:16:25 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:59  time: 0.1657  data_time: 0.0044  memory: 2033  grad_norm: 4559.2420  loss: 1005.9523  loss_cls: 20.8071  loss_conf: 60.5497  loss_xy: 897.8572  loss_wh: 26.7383
2025/05/11 21:16:32 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.1548  data_time: 0.0022  memory: 2033  grad_norm: 4569.0798  loss: 965.0355  loss_cls: 18.5727  loss_conf: 59.7478  loss_xy: 861.0757  loss_wh: 25.6393
2025/05/11 21:16:39 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:16:40 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:16:41 - mmengine - INFO - bbox_mAP_copypaste: 0.307 0.611 0.257 -1.000 0.212 0.329
2025/05/11 21:16:41 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3070  coco/bbox_mAP_50: 0.6110  coco/bbox_mAP_75: 0.2570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3290  data_time: 0.0046  time: 0.0195
2025/05/11 21:16:49 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:36  time: 0.1580  data_time: 0.0046  memory: 2033  grad_norm: 4363.1054  loss: 949.5542  loss_cls: 22.7777  loss_conf: 51.7701  loss_xy: 848.6862  loss_wh: 26.3201
2025/05/11 21:16:49 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:16:57 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:28  time: 0.1575  data_time: 0.0023  memory: 2033  grad_norm: 4300.3460  loss: 982.0214  loss_cls: 17.3315  loss_conf: 55.5011  loss_xy: 883.6652  loss_wh: 25.5236
2025/05/11 21:17:03 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:17:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:17:06 - mmengine - INFO - bbox_mAP_copypaste: 0.280 0.568 0.227 -1.000 0.181 0.307
2025/05/11 21:17:06 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2800  coco/bbox_mAP_50: 0.5680  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1810  coco/bbox_mAP_l: 0.3070  data_time: 0.0046  time: 0.0198
2025/05/11 21:17:14 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1580  data_time: 0.0045  memory: 2033  grad_norm: 4553.9136  loss: 941.5905  loss_cls: 22.3406  loss_conf: 50.8193  loss_xy: 840.0726  loss_wh: 28.3581
2025/05/11 21:17:22 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1553  data_time: 0.0021  memory: 2033  grad_norm: 5199.8017  loss: 970.6548  loss_cls: 32.2341  loss_conf: 57.5401  loss_xy: 854.6937  loss_wh: 26.1868
2025/05/11 21:17:28 - mmengine - INFO - Exp name: yolov3_fs_bal_20250511_210441
2025/05/11 21:17:28 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 21:17:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:17:33 - mmengine - INFO - bbox_mAP_copypaste: 0.314 0.622 0.270 -1.000 0.192 0.336
2025/05/11 21:17:33 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3140  coco/bbox_mAP_50: 0.6220  coco/bbox_mAP_75: 0.2700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1920  coco/bbox_mAP_l: 0.3360  data_time: 0.0034  time: 0.0217
