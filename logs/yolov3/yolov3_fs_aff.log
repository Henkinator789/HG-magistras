2025/05/11 22:18:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 966345005
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 966345005
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 22:18:48 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 22:18:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 22:18:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 22:18:51 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 22:18:51 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 22:18:51 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 22:18:51 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 22:18:51 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 22:19:03 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:09  time: 0.2462  data_time: 0.0914  memory: 2033  grad_norm: 7228.1990  loss: 4473.5864  loss_cls: 1451.5837  loss_conf: 1958.2625  loss_xy: 914.6414  loss_wh: 149.0988
2025/05/11 22:19:10 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:13:35  time: 0.1488  data_time: 0.0023  memory: 2033  grad_norm: 6899.3372  loss: 3610.2199  loss_cls: 1089.0414  loss_conf: 1507.9847  loss_xy: 888.4711  loss_wh: 124.7227
2025/05/11 22:19:17 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:19:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:19:27 - mmengine - INFO - bbox_mAP_copypaste: 0.033 0.116 0.007 -1.000 0.025 0.035
2025/05/11 22:19:27 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0330  coco/bbox_mAP_50: 0.1160  coco/bbox_mAP_75: 0.0070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0250  coco/bbox_mAP_l: 0.0350  data_time: 0.1663  time: 0.1872
2025/05/11 22:19:29 - mmengine - INFO - The best checkpoint with 0.0330 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 22:19:37 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:11:58  time: 0.1584  data_time: 0.0047  memory: 2033  grad_norm: 5730.3130  loss: 2654.9404  loss_cls: 709.7239  loss_conf: 1046.8748  loss_xy: 805.3726  loss_wh: 92.9692
2025/05/11 22:19:44 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:27  time: 0.1516  data_time: 0.0021  memory: 2033  grad_norm: 6460.4357  loss: 2706.5542  loss_cls: 730.4762  loss_conf: 1034.6057  loss_xy: 858.1235  loss_wh: 83.3488
2025/05/11 22:19:50 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:19:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:19:53 - mmengine - INFO - bbox_mAP_copypaste: 0.048 0.121 0.021 -1.000 0.010 0.059
2025/05/11 22:19:53 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.0480  coco/bbox_mAP_50: 0.1210  coco/bbox_mAP_75: 0.0210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0100  coco/bbox_mAP_l: 0.0590  data_time: 0.0050  time: 0.0198
2025/05/11 22:19:53 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 22:19:54 - mmengine - INFO - The best checkpoint with 0.0480 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 22:20:02 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:10:51  time: 0.1571  data_time: 0.0047  memory: 2033  grad_norm: 5885.6736  loss: 2472.7065  loss_cls: 636.7985  loss_conf: 932.8487  loss_xy: 825.6784  loss_wh: 77.3809
2025/05/11 22:20:10 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:10:36  time: 0.1533  data_time: 0.0024  memory: 2033  grad_norm: 5840.5596  loss: 2348.1249  loss_cls: 609.1689  loss_conf: 879.2732  loss_xy: 792.4742  loss_wh: 67.2086
2025/05/11 22:20:16 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:20:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:20:18 - mmengine - INFO - bbox_mAP_copypaste: 0.089 0.226 0.042 -1.000 0.078 0.092
2025/05/11 22:20:18 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.0890  coco/bbox_mAP_50: 0.2260  coco/bbox_mAP_75: 0.0420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0780  coco/bbox_mAP_l: 0.0920  data_time: 0.0043  time: 0.0202
2025/05/11 22:20:18 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 22:20:20 - mmengine - INFO - The best checkpoint with 0.0890 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 22:20:27 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:11  time: 0.1565  data_time: 0.0047  memory: 2033  grad_norm: 5822.4765  loss: 2218.4517  loss_cls: 525.9476  loss_conf: 839.9004  loss_xy: 790.4413  loss_wh: 62.1623
2025/05/11 22:20:35 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:09:59  time: 0.1497  data_time: 0.0023  memory: 2033  grad_norm: 5578.5481  loss: 2111.6465  loss_cls: 490.8463  loss_conf: 800.7294  loss_xy: 765.1426  loss_wh: 54.9282
2025/05/11 22:20:41 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:20:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:20:44 - mmengine - INFO - bbox_mAP_copypaste: 0.079 0.220 0.026 -1.000 0.052 0.084
2025/05/11 22:20:44 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.0790  coco/bbox_mAP_50: 0.2200  coco/bbox_mAP_75: 0.0260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0520  coco/bbox_mAP_l: 0.0840  data_time: 0.0046  time: 0.0191
2025/05/11 22:20:52 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:09:41  time: 0.1615  data_time: 0.0048  memory: 2033  grad_norm: 6146.4894  loss: 2239.8301  loss_cls: 511.6136  loss_conf: 837.4638  loss_xy: 835.5747  loss_wh: 55.1780
2025/05/11 22:20:59 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:30  time: 0.1488  data_time: 0.0023  memory: 2033  grad_norm: 5573.4099  loss: 2081.6182  loss_cls: 443.2746  loss_conf: 798.4703  loss_xy: 780.8470  loss_wh: 59.0263
2025/05/11 22:21:05 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:21:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:21:08 - mmengine - INFO - bbox_mAP_copypaste: 0.075 0.225 0.027 -1.000 0.106 0.071
2025/05/11 22:21:08 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.0750  coco/bbox_mAP_50: 0.2250  coco/bbox_mAP_75: 0.0270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1060  coco/bbox_mAP_l: 0.0710  data_time: 0.0035  time: 0.0192
2025/05/11 22:21:15 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:12  time: 0.1560  data_time: 0.0048  memory: 2033  grad_norm: 5892.0362  loss: 2017.6118  loss_cls: 412.9425  loss_conf: 767.0406  loss_xy: 782.7515  loss_wh: 54.8773
2025/05/11 22:21:23 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:03  time: 0.1515  data_time: 0.0023  memory: 2033  grad_norm: 5821.8735  loss: 2061.0632  loss_cls: 416.3052  loss_conf: 766.7832  loss_xy: 818.9462  loss_wh: 59.0287
2025/05/11 22:21:29 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:21:30 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:21:32 - mmengine - INFO - bbox_mAP_copypaste: 0.099 0.264 0.049 -1.000 0.136 0.102
2025/05/11 22:21:32 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.0990  coco/bbox_mAP_50: 0.2640  coco/bbox_mAP_75: 0.0490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1360  coco/bbox_mAP_l: 0.1020  data_time: 0.0045  time: 0.0197
2025/05/11 22:21:32 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 22:21:33 - mmengine - INFO - The best checkpoint with 0.0990 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 22:21:41 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:08:46  time: 0.1583  data_time: 0.0049  memory: 2033  grad_norm: 5317.3763  loss: 1947.9330  loss_cls: 362.5121  loss_conf: 746.7422  loss_xy: 785.0538  loss_wh: 53.6249
2025/05/11 22:21:48 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:37  time: 0.1516  data_time: 0.0025  memory: 2033  grad_norm: 5570.1044  loss: 1897.3984  loss_cls: 346.8504  loss_conf: 724.3669  loss_xy: 772.6894  loss_wh: 53.4917
2025/05/11 22:21:54 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:21:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:21:57 - mmengine - INFO - bbox_mAP_copypaste: 0.236 0.505 0.180 -1.000 0.130 0.257
2025/05/11 22:21:57 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2360  coco/bbox_mAP_50: 0.5050  coco/bbox_mAP_75: 0.1800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1300  coco/bbox_mAP_l: 0.2570  data_time: 0.0039  time: 0.0195
2025/05/11 22:21:57 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 22:21:58 - mmengine - INFO - The best checkpoint with 0.2360 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 22:22:00 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:22:06 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:22  time: 0.1598  data_time: 0.0050  memory: 2033  grad_norm: 5486.3542  loss: 1869.5694  loss_cls: 326.3355  loss_conf: 720.6758  loss_xy: 765.9971  loss_wh: 56.5610
2025/05/11 22:22:14 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:13  time: 0.1487  data_time: 0.0023  memory: 2033  grad_norm: 5319.1712  loss: 1884.6568  loss_cls: 341.4334  loss_conf: 728.7145  loss_xy: 767.6783  loss_wh: 46.8306
2025/05/11 22:22:20 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:22:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:22:22 - mmengine - INFO - bbox_mAP_copypaste: 0.132 0.280 0.106 -1.000 0.049 0.146
2025/05/11 22:22:22 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.1320  coco/bbox_mAP_50: 0.2800  coco/bbox_mAP_75: 0.1060  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0490  coco/bbox_mAP_l: 0.1460  data_time: 0.0048  time: 0.0199
2025/05/11 22:22:30 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:07:58  time: 0.1554  data_time: 0.0047  memory: 2033  grad_norm: 5244.8170  loss: 1905.3718  loss_cls: 325.9880  loss_conf: 728.8803  loss_xy: 783.5347  loss_wh: 66.9688
2025/05/11 22:22:38 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:07:49  time: 0.1496  data_time: 0.0022  memory: 2033  grad_norm: 4897.8449  loss: 1862.8509  loss_cls: 318.2326  loss_conf: 712.8052  loss_xy: 779.1815  loss_wh: 52.6316
2025/05/11 22:22:44 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:22:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:22:46 - mmengine - INFO - bbox_mAP_copypaste: 0.191 0.388 0.155 -1.000 0.108 0.206
2025/05/11 22:22:46 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.1910  coco/bbox_mAP_50: 0.3880  coco/bbox_mAP_75: 0.1550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1080  coco/bbox_mAP_l: 0.2060  data_time: 0.0048  time: 0.0195
2025/05/11 22:22:54 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:34  time: 0.1533  data_time: 0.0048  memory: 2033  grad_norm: 4611.6023  loss: 1781.5652  loss_cls: 307.3049  loss_conf: 680.1753  loss_xy: 741.3287  loss_wh: 52.7564
2025/05/11 22:23:01 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:26  time: 0.1524  data_time: 0.0022  memory: 2033  grad_norm: 4540.8829  loss: 1773.5093  loss_cls: 287.1509  loss_conf: 674.3102  loss_xy: 760.6573  loss_wh: 51.3909
2025/05/11 22:23:08 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:23:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:23:10 - mmengine - INFO - bbox_mAP_copypaste: 0.116 0.252 0.079 -1.000 0.081 0.130
2025/05/11 22:23:10 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.1160  coco/bbox_mAP_50: 0.2520  coco/bbox_mAP_75: 0.0790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0810  coco/bbox_mAP_l: 0.1300  data_time: 0.0042  time: 0.0192
2025/05/11 22:23:17 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:11  time: 0.1535  data_time: 0.0047  memory: 2033  grad_norm: 4778.6867  loss: 1823.7503  loss_cls: 299.2094  loss_conf: 697.9517  loss_xy: 766.9257  loss_wh: 59.6635
2025/05/11 22:23:25 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:03  time: 0.1524  data_time: 0.0022  memory: 2033  grad_norm: 4984.1811  loss: 1902.5442  loss_cls: 332.8777  loss_conf: 714.7921  loss_xy: 803.2994  loss_wh: 51.5750
2025/05/11 22:23:31 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:23:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:23:34 - mmengine - INFO - bbox_mAP_copypaste: 0.243 0.500 0.198 -1.000 0.153 0.263
2025/05/11 22:23:34 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2430  coco/bbox_mAP_50: 0.5000  coco/bbox_mAP_75: 0.1980  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1530  coco/bbox_mAP_l: 0.2630  data_time: 0.0043  time: 0.0192
2025/05/11 22:23:34 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/11 22:23:35 - mmengine - INFO - The best checkpoint with 0.2430 coco/bbox_mAP at 11 epoch is saved to best_coco_bbox_mAP_epoch_11.pth.
2025/05/11 22:23:43 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:06:48  time: 0.1606  data_time: 0.0050  memory: 2033  grad_norm: 4331.4237  loss: 1818.9725  loss_cls: 306.3850  loss_conf: 689.4861  loss_xy: 769.3464  loss_wh: 53.7550
2025/05/11 22:23:50 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:40  time: 0.1497  data_time: 0.0022  memory: 2033  grad_norm: 4167.4469  loss: 1814.9004  loss_cls: 297.9317  loss_conf: 688.2761  loss_xy: 778.9594  loss_wh: 49.7332
2025/05/11 22:23:56 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:23:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:23:59 - mmengine - INFO - bbox_mAP_copypaste: 0.242 0.515 0.186 -1.000 0.119 0.261
2025/05/11 22:23:59 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.2420  coco/bbox_mAP_50: 0.5150  coco/bbox_mAP_75: 0.1860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1190  coco/bbox_mAP_l: 0.2610  data_time: 0.0034  time: 0.0195
2025/05/11 22:24:06 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:25  time: 0.1532  data_time: 0.0052  memory: 2033  grad_norm: 4396.8576  loss: 1717.7189  loss_cls: 276.5971  loss_conf: 653.3020  loss_xy: 728.7320  loss_wh: 59.0877
2025/05/11 22:24:14 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:17  time: 0.1504  data_time: 0.0022  memory: 2033  grad_norm: 3953.4264  loss: 1838.3423  loss_cls: 284.7511  loss_conf: 705.4391  loss_xy: 792.9311  loss_wh: 55.2211
2025/05/11 22:24:20 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:24:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:24:23 - mmengine - INFO - bbox_mAP_copypaste: 0.183 0.404 0.123 -1.000 0.150 0.189
2025/05/11 22:24:23 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.1830  coco/bbox_mAP_50: 0.4040  coco/bbox_mAP_75: 0.1230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.1890  data_time: 0.0038  time: 0.0195
2025/05/11 22:24:30 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:03  time: 0.1546  data_time: 0.0048  memory: 2033  grad_norm: 4029.7257  loss: 1755.4393  loss_cls: 270.0828  loss_conf: 658.2681  loss_xy: 763.9526  loss_wh: 63.1359
2025/05/11 22:24:38 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:05:55  time: 0.1476  data_time: 0.0024  memory: 2033  grad_norm: 4184.4407  loss: 1745.3623  loss_cls: 277.2994  loss_conf: 671.5801  loss_xy: 749.9081  loss_wh: 46.5747
2025/05/11 22:24:44 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:24:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:24:46 - mmengine - INFO - bbox_mAP_copypaste: 0.204 0.445 0.151 -1.000 0.082 0.232
2025/05/11 22:24:46 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2040  coco/bbox_mAP_50: 0.4450  coco/bbox_mAP_75: 0.1510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0820  coco/bbox_mAP_l: 0.2320  data_time: 0.0041  time: 0.0188
2025/05/11 22:24:51 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:24:54 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:41  time: 0.1573  data_time: 0.0048  memory: 2033  grad_norm: 3986.1290  loss: 1822.7940  loss_cls: 278.3842  loss_conf: 696.4824  loss_xy: 787.3143  loss_wh: 60.6132
2025/05/11 22:25:02 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:33  time: 0.1478  data_time: 0.0022  memory: 2033  grad_norm: 3949.9115  loss: 1708.8388  loss_cls: 262.4270  loss_conf: 654.1896  loss_xy: 740.1159  loss_wh: 52.1063
2025/05/11 22:25:08 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:25:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:25:10 - mmengine - INFO - bbox_mAP_copypaste: 0.228 0.484 0.182 -1.000 0.151 0.249
2025/05/11 22:25:10 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2280  coco/bbox_mAP_50: 0.4840  coco/bbox_mAP_75: 0.1820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1510  coco/bbox_mAP_l: 0.2490  data_time: 0.0039  time: 0.0193
2025/05/11 22:25:18 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:18  time: 0.1530  data_time: 0.0048  memory: 2033  grad_norm: 3728.0447  loss: 1772.2592  loss_cls: 256.7779  loss_conf: 682.6140  loss_xy: 779.6859  loss_wh: 53.1813
2025/05/11 22:25:25 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:10  time: 0.1527  data_time: 0.0023  memory: 2033  grad_norm: 4112.3412  loss: 1864.3651  loss_cls: 296.3812  loss_conf: 703.4532  loss_xy: 805.6243  loss_wh: 58.9063
2025/05/11 22:25:31 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:25:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:25:34 - mmengine - INFO - bbox_mAP_copypaste: 0.255 0.527 0.197 -1.000 0.149 0.276
2025/05/11 22:25:34 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2550  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.1970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1490  coco/bbox_mAP_l: 0.2760  data_time: 0.0047  time: 0.0198
2025/05/11 22:25:34 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_11.pth is removed
2025/05/11 22:25:35 - mmengine - INFO - The best checkpoint with 0.2550 coco/bbox_mAP at 16 epoch is saved to best_coco_bbox_mAP_epoch_16.pth.
2025/05/11 22:25:43 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:04:56  time: 0.1574  data_time: 0.0049  memory: 2033  grad_norm: 3236.4056  loss: 1669.6655  loss_cls: 222.3502  loss_conf: 643.9242  loss_xy: 757.2932  loss_wh: 46.0978
2025/05/11 22:25:51 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:04:48  time: 0.1498  data_time: 0.0023  memory: 2033  grad_norm: 3661.2679  loss: 1730.5297  loss_cls: 270.1588  loss_conf: 644.6249  loss_xy: 765.7945  loss_wh: 49.9515
2025/05/11 22:25:56 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:25:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:25:59 - mmengine - INFO - bbox_mAP_copypaste: 0.146 0.367 0.091 -1.000 0.149 0.149
2025/05/11 22:25:59 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.1460  coco/bbox_mAP_50: 0.3670  coco/bbox_mAP_75: 0.0910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1490  coco/bbox_mAP_l: 0.1490  data_time: 0.0043  time: 0.0198
2025/05/11 22:26:07 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:34  time: 0.1598  data_time: 0.0048  memory: 2033  grad_norm: 3419.5313  loss: 1737.1201  loss_cls: 264.2674  loss_conf: 646.8314  loss_xy: 783.4019  loss_wh: 42.6194
2025/05/11 22:26:15 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:26  time: 0.1512  data_time: 0.0024  memory: 2033  grad_norm: 3353.6966  loss: 1663.3357  loss_cls: 238.5101  loss_conf: 626.9112  loss_xy: 754.5767  loss_wh: 43.3377
2025/05/11 22:26:21 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:26:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:26:23 - mmengine - INFO - bbox_mAP_copypaste: 0.133 0.367 0.039 -1.000 0.107 0.137
2025/05/11 22:26:23 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.1330  coco/bbox_mAP_50: 0.3670  coco/bbox_mAP_75: 0.0390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1070  coco/bbox_mAP_l: 0.1370  data_time: 0.0034  time: 0.0192
2025/05/11 22:26:31 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:13  time: 0.1594  data_time: 0.0048  memory: 2033  grad_norm: 3505.6667  loss: 1764.9180  loss_cls: 260.5136  loss_conf: 662.0610  loss_xy: 793.5288  loss_wh: 48.8146
2025/05/11 22:26:39 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:05  time: 0.1498  data_time: 0.0022  memory: 2033  grad_norm: 3362.9819  loss: 1697.9858  loss_cls: 262.8506  loss_conf: 628.5760  loss_xy: 758.6095  loss_wh: 47.9497
2025/05/11 22:26:45 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:26:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:26:47 - mmengine - INFO - bbox_mAP_copypaste: 0.152 0.392 0.066 -1.000 0.137 0.157
2025/05/11 22:26:47 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.1520  coco/bbox_mAP_50: 0.3920  coco/bbox_mAP_75: 0.0660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1370  coco/bbox_mAP_l: 0.1570  data_time: 0.0039  time: 0.0182
2025/05/11 22:26:55 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:03:51  time: 0.1533  data_time: 0.0047  memory: 2033  grad_norm: 3401.0857  loss: 1675.3102  loss_cls: 248.7291  loss_conf: 620.5130  loss_xy: 760.1155  loss_wh: 45.9526
2025/05/11 22:27:03 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:43  time: 0.1511  data_time: 0.0023  memory: 2033  grad_norm: 3131.1211  loss: 1695.6820  loss_cls: 228.0650  loss_conf: 646.5884  loss_xy: 779.2293  loss_wh: 41.7993
2025/05/11 22:27:09 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:27:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:27:11 - mmengine - INFO - bbox_mAP_copypaste: 0.189 0.444 0.115 -1.000 0.168 0.196
2025/05/11 22:27:11 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.1890  coco/bbox_mAP_50: 0.4440  coco/bbox_mAP_75: 0.1150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.1960  data_time: 0.0043  time: 0.0201
2025/05/11 22:27:19 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.1543  data_time: 0.0047  memory: 2033  grad_norm: 3301.6320  loss: 1674.2806  loss_cls: 243.0747  loss_conf: 618.1562  loss_xy: 762.0138  loss_wh: 51.0358
2025/05/11 22:27:27 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:21  time: 0.1504  data_time: 0.0022  memory: 2033  grad_norm: 3504.0321  loss: 1759.2782  loss_cls: 273.8039  loss_conf: 649.4486  loss_xy: 787.7641  loss_wh: 48.2616
2025/05/11 22:27:33 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:27:34 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:27:35 - mmengine - INFO - bbox_mAP_copypaste: 0.285 0.619 0.204 -1.000 0.208 0.300
2025/05/11 22:27:35 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2850  coco/bbox_mAP_50: 0.6190  coco/bbox_mAP_75: 0.2040  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3000  data_time: 0.0043  time: 0.0192
2025/05/11 22:27:35 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_16.pth is removed
2025/05/11 22:27:36 - mmengine - INFO - The best checkpoint with 0.2850 coco/bbox_mAP at 21 epoch is saved to best_coco_bbox_mAP_epoch_21.pth.
2025/05/11 22:27:43 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:27:44 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:07  time: 0.1575  data_time: 0.0048  memory: 2033  grad_norm: 3195.7791  loss: 1636.2600  loss_cls: 227.3169  loss_conf: 609.2694  loss_xy: 753.8477  loss_wh: 45.8260
2025/05/11 22:27:52 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:02:59  time: 0.1478  data_time: 0.0022  memory: 2033  grad_norm: 3039.8312  loss: 1620.3254  loss_cls: 229.7085  loss_conf: 603.7484  loss_xy: 742.3753  loss_wh: 44.4931
2025/05/11 22:27:58 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:27:59 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:28:00 - mmengine - INFO - bbox_mAP_copypaste: 0.260 0.500 0.242 -1.000 0.171 0.283
2025/05/11 22:28:00 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2600  coco/bbox_mAP_50: 0.5000  coco/bbox_mAP_75: 0.2420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1710  coco/bbox_mAP_l: 0.2830  data_time: 0.0038  time: 0.0193
2025/05/11 22:28:08 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:45  time: 0.1534  data_time: 0.0049  memory: 2033  grad_norm: 3164.0633  loss: 1642.6067  loss_cls: 232.5239  loss_conf: 611.3531  loss_xy: 757.1679  loss_wh: 41.5618
2025/05/11 22:28:15 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:37  time: 0.1483  data_time: 0.0022  memory: 2033  grad_norm: 3095.9418  loss: 1686.3103  loss_cls: 243.1013  loss_conf: 624.0324  loss_xy: 775.0462  loss_wh: 44.1304
2025/05/11 22:28:21 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:28:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:28:24 - mmengine - INFO - bbox_mAP_copypaste: 0.246 0.544 0.164 -1.000 0.134 0.272
2025/05/11 22:28:24 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2460  coco/bbox_mAP_50: 0.5440  coco/bbox_mAP_75: 0.1640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1340  coco/bbox_mAP_l: 0.2720  data_time: 0.0047  time: 0.0191
2025/05/11 22:28:32 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:23  time: 0.1566  data_time: 0.0047  memory: 2033  grad_norm: 3152.1259  loss: 1693.8498  loss_cls: 244.0271  loss_conf: 632.4952  loss_xy: 773.5213  loss_wh: 43.8062
2025/05/11 22:28:39 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:16  time: 0.1521  data_time: 0.0023  memory: 2033  grad_norm: 3017.3379  loss: 1618.9079  loss_cls: 224.6261  loss_conf: 600.1289  loss_xy: 750.7379  loss_wh: 43.4151
2025/05/11 22:28:45 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:28:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:28:48 - mmengine - INFO - bbox_mAP_copypaste: 0.253 0.529 0.199 -1.000 0.169 0.269
2025/05/11 22:28:48 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2530  coco/bbox_mAP_50: 0.5290  coco/bbox_mAP_75: 0.1990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1690  coco/bbox_mAP_l: 0.2690  data_time: 0.0045  time: 0.0193
2025/05/11 22:28:56 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:02  time: 0.1593  data_time: 0.0048  memory: 2033  grad_norm: 3039.5208  loss: 1696.0025  loss_cls: 235.1483  loss_conf: 630.3127  loss_xy: 788.7376  loss_wh: 41.8039
2025/05/11 22:29:03 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:54  time: 0.1488  data_time: 0.0022  memory: 2033  grad_norm: 3013.2823  loss: 1622.9484  loss_cls: 229.5320  loss_conf: 596.2045  loss_xy: 753.1550  loss_wh: 44.0568
2025/05/11 22:29:09 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:29:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:29:12 - mmengine - INFO - bbox_mAP_copypaste: 0.183 0.409 0.109 -1.000 0.138 0.194
2025/05/11 22:29:12 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.1830  coco/bbox_mAP_50: 0.4090  coco/bbox_mAP_75: 0.1090  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1380  coco/bbox_mAP_l: 0.1940  data_time: 0.0047  time: 0.0197
2025/05/11 22:29:20 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:40  time: 0.1544  data_time: 0.0047  memory: 2033  grad_norm: 3038.0030  loss: 1654.6526  loss_cls: 207.0402  loss_conf: 628.5434  loss_xy: 772.2391  loss_wh: 46.8299
2025/05/11 22:29:27 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:32  time: 0.1494  data_time: 0.0024  memory: 2033  grad_norm: 3012.3581  loss: 1643.6486  loss_cls: 229.2452  loss_conf: 603.4511  loss_xy: 766.6388  loss_wh: 44.3135
2025/05/11 22:29:33 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:29:34 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:29:36 - mmengine - INFO - bbox_mAP_copypaste: 0.187 0.411 0.133 -1.000 0.120 0.195
2025/05/11 22:29:36 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.1870  coco/bbox_mAP_50: 0.4110  coco/bbox_mAP_75: 0.1330  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1200  coco/bbox_mAP_l: 0.1950  data_time: 0.0047  time: 0.0192
2025/05/11 22:29:44 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:18  time: 0.1579  data_time: 0.0048  memory: 2033  grad_norm: 2895.2089  loss: 1652.5129  loss_cls: 221.5145  loss_conf: 606.6169  loss_xy: 785.3659  loss_wh: 39.0155
2025/05/11 22:29:51 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:11  time: 0.1493  data_time: 0.0024  memory: 2033  grad_norm: 2920.2188  loss: 1619.3131  loss_cls: 232.0115  loss_conf: 586.9221  loss_xy: 762.3035  loss_wh: 38.0760
2025/05/11 22:29:57 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:29:58 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:30:00 - mmengine - INFO - bbox_mAP_copypaste: 0.245 0.586 0.125 -1.000 0.179 0.257
2025/05/11 22:30:00 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2450  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.1250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.2570  data_time: 0.0052  time: 0.0190
2025/05/11 22:30:07 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:57  time: 0.1577  data_time: 0.0050  memory: 2033  grad_norm: 2901.7844  loss: 1572.6384  loss_cls: 196.1882  loss_conf: 590.8720  loss_xy: 743.3870  loss_wh: 42.1912
2025/05/11 22:30:15 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:49  time: 0.1509  data_time: 0.0023  memory: 2033  grad_norm: 3110.6955  loss: 1700.7619  loss_cls: 238.1135  loss_conf: 627.1849  loss_xy: 792.7347  loss_wh: 42.7289
2025/05/11 22:30:21 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:30:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:30:24 - mmengine - INFO - bbox_mAP_copypaste: 0.176 0.487 0.067 -1.000 0.162 0.187
2025/05/11 22:30:24 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.1760  coco/bbox_mAP_50: 0.4870  coco/bbox_mAP_75: 0.0670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1620  coco/bbox_mAP_l: 0.1870  data_time: 0.0051  time: 0.0192
2025/05/11 22:30:31 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:35  time: 0.1537  data_time: 0.0047  memory: 2033  grad_norm: 2805.9535  loss: 1566.2076  loss_cls: 204.8600  loss_conf: 578.8688  loss_xy: 738.6909  loss_wh: 43.7879
2025/05/11 22:30:32 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:30:39 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:27  time: 0.1541  data_time: 0.0023  memory: 2033  grad_norm: 2840.6582  loss: 1636.0358  loss_cls: 215.1671  loss_conf: 602.0297  loss_xy: 782.6567  loss_wh: 36.1823
2025/05/11 22:30:45 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:30:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:30:48 - mmengine - INFO - bbox_mAP_copypaste: 0.227 0.486 0.166 -1.000 0.156 0.243
2025/05/11 22:30:48 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2270  coco/bbox_mAP_50: 0.4860  coco/bbox_mAP_75: 0.1660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1560  coco/bbox_mAP_l: 0.2430  data_time: 0.0048  time: 0.0197
2025/05/11 22:30:56 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:13  time: 0.1603  data_time: 0.0048  memory: 2033  grad_norm: 2870.3337  loss: 1638.7471  loss_cls: 225.7559  loss_conf: 601.8048  loss_xy: 769.1299  loss_wh: 42.0565
2025/05/11 22:31:03 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1478  data_time: 0.0022  memory: 2033  grad_norm: 2680.9039  loss: 1508.4555  loss_cls: 187.7025  loss_conf: 559.9209  loss_xy: 723.0486  loss_wh: 37.7834
2025/05/11 22:31:09 - mmengine - INFO - Exp name: yolov3_fs_aff_20250511_221844
2025/05/11 22:31:09 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 22:31:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:31:14 - mmengine - INFO - bbox_mAP_copypaste: 0.212 0.502 0.130 -1.000 0.125 0.231
2025/05/11 22:31:14 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2120  coco/bbox_mAP_50: 0.5020  coco/bbox_mAP_75: 0.1300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1250  coco/bbox_mAP_l: 0.2310  data_time: 0.0022  time: 0.0204
