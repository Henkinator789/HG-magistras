2025/05/11 23:38:56 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 283345090
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 283345090
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 23:38:56 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='PhotoMetricDistortion'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 23:38:57 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 23:38:57 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 23:38:58 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 23:38:58 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 23:38:59 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 23:38:59 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 23:38:59 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 23:38:59 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 23:39:12 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:18:31  time: 0.2659  data_time: 0.1017  memory: 2033  grad_norm: 2509.9757  loss: 4277.8868  loss_cls: 1369.3230  loss_conf: 1862.1871  loss_xy: 926.5256  loss_wh: 119.8511
2025/05/11 23:39:20 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:32  time: 0.1565  data_time: 0.0077  memory: 2033  grad_norm: 3835.8969  loss: 3085.7562  loss_cls: 841.3947  loss_conf: 1275.6875  loss_xy: 873.4923  loss_wh: 95.1817
2025/05/11 23:39:26 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:39:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:39:37 - mmengine - INFO - bbox_mAP_copypaste: 0.082 0.191 0.044 -1.000 0.053 0.083
2025/05/11 23:39:37 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0820  coco/bbox_mAP_50: 0.1910  coco/bbox_mAP_75: 0.0440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0530  coco/bbox_mAP_l: 0.0830  data_time: 0.1681  time: 0.1874
2025/05/11 23:39:38 - mmengine - INFO - The best checkpoint with 0.0820 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 23:39:47 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:41  time: 0.1668  data_time: 0.0070  memory: 2033  grad_norm: 3127.6052  loss: 2609.2349  loss_cls: 670.6857  loss_conf: 980.1280  loss_xy: 896.1964  loss_wh: 62.2247
2025/05/11 23:39:54 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:12:04  time: 0.1552  data_time: 0.0058  memory: 2033  grad_norm: 3165.2270  loss: 2295.1290  loss_cls: 572.0866  loss_conf: 861.7406  loss_xy: 806.7142  loss_wh: 54.5877
2025/05/11 23:40:01 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:40:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:40:03 - mmengine - INFO - bbox_mAP_copypaste: 0.138 0.286 0.107 -1.000 0.081 0.146
2025/05/11 23:40:03 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1380  coco/bbox_mAP_50: 0.2860  coco/bbox_mAP_75: 0.1070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0810  coco/bbox_mAP_l: 0.1460  data_time: 0.0046  time: 0.0201
2025/05/11 23:40:04 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 23:40:05 - mmengine - INFO - The best checkpoint with 0.1380 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 23:40:13 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:28  time: 0.1661  data_time: 0.0099  memory: 2033  grad_norm: 3232.1087  loss: 2147.7012  loss_cls: 499.8755  loss_conf: 809.2285  loss_xy: 787.7816  loss_wh: 50.8157
2025/05/11 23:40:21 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:10  time: 0.1582  data_time: 0.0081  memory: 2033  grad_norm: 3239.2382  loss: 2109.9744  loss_cls: 464.5165  loss_conf: 794.6592  loss_xy: 799.8799  loss_wh: 50.9187
2025/05/11 23:40:28 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:40:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:40:30 - mmengine - INFO - bbox_mAP_copypaste: 0.144 0.327 0.092 -1.000 0.104 0.150
2025/05/11 23:40:30 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1440  coco/bbox_mAP_50: 0.3270  coco/bbox_mAP_75: 0.0920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1040  coco/bbox_mAP_l: 0.1500  data_time: 0.0043  time: 0.0200
2025/05/11 23:40:30 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 23:40:31 - mmengine - INFO - The best checkpoint with 0.1440 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 23:40:40 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:45  time: 0.1654  data_time: 0.0065  memory: 2033  grad_norm: 3076.5834  loss: 1863.4853  loss_cls: 404.4290  loss_conf: 680.1833  loss_xy: 732.1531  loss_wh: 46.7199
2025/05/11 23:40:48 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:32  time: 0.1585  data_time: 0.0072  memory: 2033  grad_norm: 3502.3526  loss: 1956.7129  loss_cls: 422.6264  loss_conf: 717.9052  loss_xy: 769.6360  loss_wh: 46.5453
2025/05/11 23:40:54 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:40:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:40:57 - mmengine - INFO - bbox_mAP_copypaste: 0.152 0.327 0.113 -1.000 0.096 0.158
2025/05/11 23:40:57 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1520  coco/bbox_mAP_50: 0.3270  coco/bbox_mAP_75: 0.1130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0960  coco/bbox_mAP_l: 0.1580  data_time: 0.0040  time: 0.0199
2025/05/11 23:40:57 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 23:40:58 - mmengine - INFO - The best checkpoint with 0.1520 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 23:41:07 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:14  time: 0.1693  data_time: 0.0077  memory: 2033  grad_norm: 3339.0564  loss: 1998.4093  loss_cls: 410.4701  loss_conf: 733.2828  loss_xy: 807.6037  loss_wh: 47.0528
2025/05/11 23:41:14 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:10:02  time: 0.1587  data_time: 0.0098  memory: 2033  grad_norm: 3697.4890  loss: 1881.8677  loss_cls: 384.1656  loss_conf: 681.1710  loss_xy: 773.3636  loss_wh: 43.1675
2025/05/11 23:41:21 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:41:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:41:23 - mmengine - INFO - bbox_mAP_copypaste: 0.184 0.450 0.094 -1.000 0.135 0.198
2025/05/11 23:41:23 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.1840  coco/bbox_mAP_50: 0.4500  coco/bbox_mAP_75: 0.0940  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.1980  data_time: 0.0046  time: 0.0191
2025/05/11 23:41:23 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 23:41:25 - mmengine - INFO - The best checkpoint with 0.1840 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 23:41:33 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:44  time: 0.1690  data_time: 0.0111  memory: 2033  grad_norm: 3209.2889  loss: 1905.2801  loss_cls: 364.1344  loss_conf: 696.8572  loss_xy: 796.9557  loss_wh: 47.3328
2025/05/11 23:41:41 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:34  time: 0.1570  data_time: 0.0084  memory: 2033  grad_norm: 3866.7665  loss: 1828.9500  loss_cls: 372.9033  loss_conf: 666.6443  loss_xy: 747.1597  loss_wh: 42.2427
2025/05/11 23:41:47 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:41:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:41:50 - mmengine - INFO - bbox_mAP_copypaste: 0.176 0.371 0.138 -1.000 0.124 0.184
2025/05/11 23:41:50 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.1760  coco/bbox_mAP_50: 0.3710  coco/bbox_mAP_75: 0.1380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1240  coco/bbox_mAP_l: 0.1840  data_time: 0.0037  time: 0.0187
2025/05/11 23:41:58 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:15  time: 0.1612  data_time: 0.0085  memory: 2033  grad_norm: 3033.5780  loss: 1736.0740  loss_cls: 309.6623  loss_conf: 639.5107  loss_xy: 741.9048  loss_wh: 44.9962
2025/05/11 23:42:06 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:09:06  time: 0.1616  data_time: 0.0114  memory: 2033  grad_norm: 3533.6945  loss: 1779.0188  loss_cls: 340.3784  loss_conf: 644.7488  loss_xy: 748.1545  loss_wh: 45.7371
2025/05/11 23:42:13 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:42:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:42:15 - mmengine - INFO - bbox_mAP_copypaste: 0.237 0.493 0.185 -1.000 0.135 0.261
2025/05/11 23:42:15 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2370  coco/bbox_mAP_50: 0.4930  coco/bbox_mAP_75: 0.1850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2610  data_time: 0.0052  time: 0.0193
2025/05/11 23:42:15 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 23:42:16 - mmengine - INFO - The best checkpoint with 0.2370 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 23:42:19 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:42:25 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:50  time: 0.1683  data_time: 0.0121  memory: 2033  grad_norm: 3061.3211  loss: 1809.2982  loss_cls: 330.8118  loss_conf: 663.8884  loss_xy: 773.1361  loss_wh: 41.4618
2025/05/11 23:42:32 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:41  time: 0.1566  data_time: 0.0090  memory: 2033  grad_norm: 3416.3628  loss: 1675.4599  loss_cls: 297.0133  loss_conf: 613.6566  loss_xy: 724.8562  loss_wh: 39.9339
2025/05/11 23:42:39 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:42:40 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:42:42 - mmengine - INFO - bbox_mAP_copypaste: 0.173 0.400 0.097 -1.000 0.099 0.191
2025/05/11 23:42:42 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.1730  coco/bbox_mAP_50: 0.4000  coco/bbox_mAP_75: 0.0970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0990  coco/bbox_mAP_l: 0.1910  data_time: 0.0041  time: 0.0198
2025/05/11 23:42:50 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:24  time: 0.1598  data_time: 0.0058  memory: 2033  grad_norm: 3024.7268  loss: 1745.2354  loss_cls: 324.8943  loss_conf: 632.5861  loss_xy: 748.9168  loss_wh: 38.8382
2025/05/11 23:42:57 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:15  time: 0.1586  data_time: 0.0080  memory: 2033  grad_norm: 3256.6000  loss: 1791.1049  loss_cls: 309.8665  loss_conf: 654.1569  loss_xy: 782.7408  loss_wh: 44.3407
2025/05/11 23:43:04 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:43:05 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:43:06 - mmengine - INFO - bbox_mAP_copypaste: 0.193 0.428 0.111 -1.000 0.128 0.208
2025/05/11 23:43:06 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.1930  coco/bbox_mAP_50: 0.4280  coco/bbox_mAP_75: 0.1110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1280  coco/bbox_mAP_l: 0.2080  data_time: 0.0041  time: 0.0190
2025/05/11 23:43:15 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:59  time: 0.1631  data_time: 0.0118  memory: 2033  grad_norm: 2816.8638  loss: 1724.8035  loss_cls: 293.9515  loss_conf: 627.7211  loss_xy: 755.0469  loss_wh: 48.0839
2025/05/11 23:43:22 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:50  time: 0.1574  data_time: 0.0066  memory: 2033  grad_norm: 2970.2329  loss: 1771.4116  loss_cls: 317.9531  loss_conf: 636.8797  loss_xy: 773.0705  loss_wh: 43.5083
2025/05/11 23:43:29 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:43:30 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:43:31 - mmengine - INFO - bbox_mAP_copypaste: 0.190 0.446 0.111 -1.000 0.139 0.202
2025/05/11 23:43:31 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.1900  coco/bbox_mAP_50: 0.4460  coco/bbox_mAP_75: 0.1110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1390  coco/bbox_mAP_l: 0.2020  data_time: 0.0051  time: 0.0195
2025/05/11 23:43:40 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:34  time: 0.1640  data_time: 0.0082  memory: 2033  grad_norm: 3301.1745  loss: 1857.4248  loss_cls: 335.0692  loss_conf: 668.4798  loss_xy: 810.0138  loss_wh: 43.8620
2025/05/11 23:43:47 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:25  time: 0.1557  data_time: 0.0054  memory: 2033  grad_norm: 3040.5371  loss: 1705.9562  loss_cls: 311.6554  loss_conf: 607.5540  loss_xy: 745.2052  loss_wh: 41.5416
2025/05/11 23:43:54 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:43:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:43:56 - mmengine - INFO - bbox_mAP_copypaste: 0.259 0.519 0.219 -1.000 0.171 0.279
2025/05/11 23:43:56 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2590  coco/bbox_mAP_50: 0.5190  coco/bbox_mAP_75: 0.2190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1710  coco/bbox_mAP_l: 0.2790  data_time: 0.0034  time: 0.0189
2025/05/11 23:43:56 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/11 23:43:57 - mmengine - INFO - The best checkpoint with 0.2590 coco/bbox_mAP at 11 epoch is saved to best_coco_bbox_mAP_epoch_11.pth.
2025/05/11 23:44:06 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:10  time: 0.1678  data_time: 0.0071  memory: 2033  grad_norm: 2987.8478  loss: 1718.5804  loss_cls: 304.2145  loss_conf: 617.7957  loss_xy: 758.4359  loss_wh: 38.1343
2025/05/11 23:44:14 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:07:01  time: 0.1587  data_time: 0.0089  memory: 2033  grad_norm: 3006.0121  loss: 1743.2811  loss_cls: 305.1235  loss_conf: 624.1830  loss_xy: 768.1667  loss_wh: 45.8079
2025/05/11 23:44:20 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:44:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:44:23 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.539 0.205 -1.000 0.166 0.285
2025/05/11 23:44:23 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5390  coco/bbox_mAP_75: 0.2050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1660  coco/bbox_mAP_l: 0.2850  data_time: 0.0044  time: 0.0199
2025/05/11 23:44:23 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_11.pth is removed
2025/05/11 23:44:24 - mmengine - INFO - The best checkpoint with 0.2640 coco/bbox_mAP at 12 epoch is saved to best_coco_bbox_mAP_epoch_12.pth.
2025/05/11 23:44:33 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:47  time: 0.1691  data_time: 0.0085  memory: 2033  grad_norm: 3058.2092  loss: 1766.7437  loss_cls: 305.0434  loss_conf: 637.6428  loss_xy: 779.9727  loss_wh: 44.0848
2025/05/11 23:44:41 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:38  time: 0.1588  data_time: 0.0096  memory: 2033  grad_norm: 3050.9299  loss: 1640.2650  loss_cls: 264.5610  loss_conf: 609.4753  loss_xy: 730.5420  loss_wh: 35.6867
2025/05/11 23:44:47 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:44:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:44:50 - mmengine - INFO - bbox_mAP_copypaste: 0.214 0.454 0.170 -1.000 0.120 0.236
2025/05/11 23:44:50 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2140  coco/bbox_mAP_50: 0.4540  coco/bbox_mAP_75: 0.1700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1200  coco/bbox_mAP_l: 0.2360  data_time: 0.0040  time: 0.0197
2025/05/11 23:44:58 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:23  time: 0.1630  data_time: 0.0103  memory: 2033  grad_norm: 3089.4940  loss: 1692.6481  loss_cls: 295.3449  loss_conf: 606.8300  loss_xy: 751.3598  loss_wh: 39.1134
2025/05/11 23:45:06 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:15  time: 0.1622  data_time: 0.0082  memory: 2033  grad_norm: 2834.0515  loss: 1752.8916  loss_cls: 287.5930  loss_conf: 637.3467  loss_xy: 785.3688  loss_wh: 42.5831
2025/05/11 23:45:12 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:45:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:45:15 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.508 0.237 -1.000 0.176 0.284
2025/05/11 23:45:15 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5080  coco/bbox_mAP_75: 0.2370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1760  coco/bbox_mAP_l: 0.2840  data_time: 0.0042  time: 0.0189
2025/05/11 23:45:19 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:45:23 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:06:00  time: 0.1605  data_time: 0.0105  memory: 2033  grad_norm: 2658.1714  loss: 1613.7452  loss_cls: 269.5815  loss_conf: 577.2751  loss_xy: 727.3778  loss_wh: 39.5108
2025/05/11 23:45:31 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:51  time: 0.1580  data_time: 0.0058  memory: 2033  grad_norm: 3002.0382  loss: 1819.4336  loss_cls: 306.7289  loss_conf: 664.1485  loss_xy: 795.0558  loss_wh: 53.5003
2025/05/11 23:45:37 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:45:38 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:45:40 - mmengine - INFO - bbox_mAP_copypaste: 0.244 0.479 0.197 -1.000 0.157 0.264
2025/05/11 23:45:40 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2440  coco/bbox_mAP_50: 0.4790  coco/bbox_mAP_75: 0.1970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1570  coco/bbox_mAP_l: 0.2640  data_time: 0.0045  time: 0.0191
2025/05/11 23:45:48 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:36  time: 0.1606  data_time: 0.0136  memory: 2033  grad_norm: 2884.7929  loss: 1657.2852  loss_cls: 291.3985  loss_conf: 587.4470  loss_xy: 729.1661  loss_wh: 49.2735
2025/05/11 23:45:56 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:28  time: 0.1596  data_time: 0.0081  memory: 2033  grad_norm: 2464.6015  loss: 1682.4128  loss_cls: 274.2669  loss_conf: 603.7986  loss_xy: 760.0457  loss_wh: 44.3015
2025/05/11 23:46:02 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:46:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:46:05 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.582 0.175 -1.000 0.167 0.284
2025/05/11 23:46:05 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5820  coco/bbox_mAP_75: 0.1750  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.2840  data_time: 0.0048  time: 0.0213
2025/05/11 23:46:13 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:13  time: 0.1596  data_time: 0.0066  memory: 2033  grad_norm: 2721.4777  loss: 1683.2461  loss_cls: 272.8339  loss_conf: 614.8374  loss_xy: 755.1745  loss_wh: 40.4003
2025/05/11 23:46:21 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:04  time: 0.1549  data_time: 0.0064  memory: 2033  grad_norm: 3256.6435  loss: 1643.8395  loss_cls: 287.0480  loss_conf: 575.5603  loss_xy: 740.3179  loss_wh: 40.9133
2025/05/11 23:46:27 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:46:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:46:30 - mmengine - INFO - bbox_mAP_copypaste: 0.117 0.350 0.052 -1.000 0.108 0.123
2025/05/11 23:46:30 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.1170  coco/bbox_mAP_50: 0.3500  coco/bbox_mAP_75: 0.0520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1080  coco/bbox_mAP_l: 0.1230  data_time: 0.0053  time: 0.0196
2025/05/11 23:46:38 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:49  time: 0.1676  data_time: 0.0102  memory: 2033  grad_norm: 3086.8168  loss: 1756.4441  loss_cls: 301.7847  loss_conf: 625.9318  loss_xy: 788.5072  loss_wh: 40.2203
2025/05/11 23:46:46 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:41  time: 0.1566  data_time: 0.0087  memory: 2033  grad_norm: 2601.5550  loss: 1643.2420  loss_cls: 269.9967  loss_conf: 589.7643  loss_xy: 741.3471  loss_wh: 42.1340
2025/05/11 23:46:52 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:46:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:46:55 - mmengine - INFO - bbox_mAP_copypaste: 0.289 0.571 0.250 -1.000 0.193 0.309
2025/05/11 23:46:55 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2890  coco/bbox_mAP_50: 0.5710  coco/bbox_mAP_75: 0.2500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.3090  data_time: 0.0047  time: 0.0192
2025/05/11 23:46:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_12.pth is removed
2025/05/11 23:46:56 - mmengine - INFO - The best checkpoint with 0.2890 coco/bbox_mAP at 18 epoch is saved to best_coco_bbox_mAP_epoch_18.pth.
2025/05/11 23:47:04 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:26  time: 0.1662  data_time: 0.0085  memory: 2033  grad_norm: 2658.3096  loss: 1581.2396  loss_cls: 252.2810  loss_conf: 561.9832  loss_xy: 729.2057  loss_wh: 37.7697
2025/05/11 23:47:12 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:18  time: 0.1592  data_time: 0.0071  memory: 2033  grad_norm: 3915.6745  loss: 1762.8045  loss_cls: 307.6550  loss_conf: 626.6876  loss_xy: 786.3217  loss_wh: 42.1401
2025/05/11 23:47:19 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:47:20 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:47:21 - mmengine - INFO - bbox_mAP_copypaste: 0.186 0.414 0.135 -1.000 0.096 0.201
2025/05/11 23:47:21 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.1860  coco/bbox_mAP_50: 0.4140  coco/bbox_mAP_75: 0.1350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0960  coco/bbox_mAP_l: 0.2010  data_time: 0.0033  time: 0.0191
2025/05/11 23:47:30 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:03  time: 0.1636  data_time: 0.0124  memory: 2033  grad_norm: 2745.0135  loss: 1603.3022  loss_cls: 249.8771  loss_conf: 584.4758  loss_xy: 729.8661  loss_wh: 39.0832
2025/05/11 23:47:37 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:55  time: 0.1572  data_time: 0.0038  memory: 2033  grad_norm: 3158.2495  loss: 1734.1507  loss_cls: 285.9430  loss_conf: 608.7285  loss_xy: 800.7435  loss_wh: 38.7357
2025/05/11 23:47:44 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:47:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:47:46 - mmengine - INFO - bbox_mAP_copypaste: 0.304 0.575 0.282 -1.000 0.233 0.323
2025/05/11 23:47:46 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3040  coco/bbox_mAP_50: 0.5750  coco/bbox_mAP_75: 0.2820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2330  coco/bbox_mAP_l: 0.3230  data_time: 0.0046  time: 0.0192
2025/05/11 23:47:46 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_18.pth is removed
2025/05/11 23:47:48 - mmengine - INFO - The best checkpoint with 0.3040 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2025/05/11 23:47:56 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:40  time: 0.1667  data_time: 0.0081  memory: 2033  grad_norm: 2597.1960  loss: 1685.1230  loss_cls: 266.5760  loss_conf: 600.3782  loss_xy: 772.6832  loss_wh: 45.4856
2025/05/11 23:48:04 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:32  time: 0.1589  data_time: 0.0095  memory: 2033  grad_norm: 2439.0936  loss: 1512.1689  loss_cls: 230.5515  loss_conf: 551.9625  loss_xy: 695.4713  loss_wh: 34.1836
2025/05/11 23:48:10 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:48:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:48:13 - mmengine - INFO - bbox_mAP_copypaste: 0.183 0.466 0.115 -1.000 0.083 0.199
2025/05/11 23:48:13 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.1830  coco/bbox_mAP_50: 0.4660  coco/bbox_mAP_75: 0.1150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0830  coco/bbox_mAP_l: 0.1990  data_time: 0.0038  time: 0.0195
2025/05/11 23:48:19 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:48:21 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:17  time: 0.1633  data_time: 0.0087  memory: 2033  grad_norm: 2349.9570  loss: 1598.3256  loss_cls: 241.8595  loss_conf: 566.0604  loss_xy: 750.2019  loss_wh: 40.2038
2025/05/11 23:48:29 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:09  time: 0.1616  data_time: 0.0140  memory: 2033  grad_norm: 2279.3129  loss: 1537.7120  loss_cls: 231.3155  loss_conf: 553.1632  loss_xy: 709.2205  loss_wh: 44.0128
2025/05/11 23:48:36 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:48:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:48:38 - mmengine - INFO - bbox_mAP_copypaste: 0.148 0.466 0.063 -1.000 0.204 0.147
2025/05/11 23:48:38 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.1480  coco/bbox_mAP_50: 0.4660  coco/bbox_mAP_75: 0.0630  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.1470  data_time: 0.0051  time: 0.0198
2025/05/11 23:48:47 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:54  time: 0.1626  data_time: 0.0097  memory: 2033  grad_norm: 2328.5606  loss: 1636.0913  loss_cls: 238.5985  loss_conf: 589.3045  loss_xy: 770.9717  loss_wh: 37.2166
2025/05/11 23:48:55 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:46  time: 0.1610  data_time: 0.0102  memory: 2033  grad_norm: 2764.2138  loss: 1678.6550  loss_cls: 255.1688  loss_conf: 593.5149  loss_xy: 778.2630  loss_wh: 51.7083
2025/05/11 23:49:01 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:49:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:49:04 - mmengine - INFO - bbox_mAP_copypaste: 0.320 0.590 0.319 -1.000 0.175 0.352
2025/05/11 23:49:04 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3200  coco/bbox_mAP_50: 0.5900  coco/bbox_mAP_75: 0.3190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1750  coco/bbox_mAP_l: 0.3520  data_time: 0.0052  time: 0.0208
2025/05/11 23:49:04 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_20.pth is removed
2025/05/11 23:49:05 - mmengine - INFO - The best checkpoint with 0.3200 coco/bbox_mAP at 23 epoch is saved to best_coco_bbox_mAP_epoch_23.pth.
2025/05/11 23:49:13 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:31  time: 0.1647  data_time: 0.0071  memory: 2033  grad_norm: 2886.4103  loss: 1646.4574  loss_cls: 268.4704  loss_conf: 579.6137  loss_xy: 763.0034  loss_wh: 35.3699
2025/05/11 23:49:21 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:23  time: 0.1565  data_time: 0.0077  memory: 2033  grad_norm: 2401.1112  loss: 1593.2354  loss_cls: 242.3256  loss_conf: 568.4047  loss_xy: 743.2860  loss_wh: 39.2191
2025/05/11 23:49:28 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:49:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:49:30 - mmengine - INFO - bbox_mAP_copypaste: 0.245 0.466 0.230 -1.000 0.157 0.263
2025/05/11 23:49:30 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2450  coco/bbox_mAP_50: 0.4660  coco/bbox_mAP_75: 0.2300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1570  coco/bbox_mAP_l: 0.2630  data_time: 0.0041  time: 0.0194
2025/05/11 23:49:38 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:08  time: 0.1620  data_time: 0.0091  memory: 2033  grad_norm: 3074.4522  loss: 1597.3826  loss_cls: 250.9157  loss_conf: 553.7011  loss_xy: 757.7704  loss_wh: 34.9955
2025/05/11 23:49:46 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:02:00  time: 0.1579  data_time: 0.0075  memory: 2033  grad_norm: 2532.3054  loss: 1610.5401  loss_cls: 247.2888  loss_conf: 571.4663  loss_xy: 755.3409  loss_wh: 36.4440
2025/05/11 23:49:53 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:49:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:49:55 - mmengine - INFO - bbox_mAP_copypaste: 0.269 0.527 0.241 -1.000 0.165 0.296
2025/05/11 23:49:55 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2690  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.2410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1650  coco/bbox_mAP_l: 0.2960  data_time: 0.0043  time: 0.0191
2025/05/11 23:50:03 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:46  time: 0.1667  data_time: 0.0080  memory: 2033  grad_norm: 2390.9607  loss: 1596.4193  loss_cls: 239.6772  loss_conf: 562.1698  loss_xy: 760.4152  loss_wh: 34.1571
2025/05/11 23:50:11 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:37  time: 0.1587  data_time: 0.0082  memory: 2033  grad_norm: 2361.2314  loss: 1576.5247  loss_cls: 234.6606  loss_conf: 558.2813  loss_xy: 746.8360  loss_wh: 36.7466
2025/05/11 23:50:18 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:50:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:50:20 - mmengine - INFO - bbox_mAP_copypaste: 0.256 0.506 0.222 -1.000 0.200 0.265
2025/05/11 23:50:20 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2560  coco/bbox_mAP_50: 0.5060  coco/bbox_mAP_75: 0.2220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.2650  data_time: 0.0039  time: 0.0190
2025/05/11 23:50:28 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:23  time: 0.1619  data_time: 0.0125  memory: 2033  grad_norm: 2491.4447  loss: 1586.7407  loss_cls: 232.5016  loss_conf: 564.1233  loss_xy: 747.5469  loss_wh: 42.5689
2025/05/11 23:50:36 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:15  time: 0.1594  data_time: 0.0089  memory: 2033  grad_norm: 2387.2025  loss: 1611.0247  loss_cls: 252.9058  loss_conf: 564.6104  loss_xy: 755.8766  loss_wh: 37.6319
2025/05/11 23:50:43 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:50:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:50:46 - mmengine - INFO - bbox_mAP_copypaste: 0.224 0.530 0.124 -1.000 0.144 0.245
2025/05/11 23:50:46 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2240  coco/bbox_mAP_50: 0.5300  coco/bbox_mAP_75: 0.1240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1440  coco/bbox_mAP_l: 0.2450  data_time: 0.0046  time: 0.0188
2025/05/11 23:50:54 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:00  time: 0.1614  data_time: 0.0117  memory: 2033  grad_norm: 2398.7028  loss: 1473.4157  loss_cls: 220.7383  loss_conf: 522.4178  loss_xy: 698.8804  loss_wh: 31.3793
2025/05/11 23:51:01 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:52  time: 0.1584  data_time: 0.0065  memory: 2033  grad_norm: 2593.9112  loss: 1672.0597  loss_cls: 256.3811  loss_conf: 589.7474  loss_xy: 785.1774  loss_wh: 40.7538
2025/05/11 23:51:08 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:51:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:51:11 - mmengine - INFO - bbox_mAP_copypaste: 0.163 0.401 0.089 -1.000 0.155 0.171
2025/05/11 23:51:11 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.1630  coco/bbox_mAP_50: 0.4010  coco/bbox_mAP_75: 0.0890  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1550  coco/bbox_mAP_l: 0.1710  data_time: 0.0045  time: 0.0196
2025/05/11 23:51:19 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:37  time: 0.1607  data_time: 0.0062  memory: 2033  grad_norm: 3245.8493  loss: 1619.7429  loss_cls: 243.6510  loss_conf: 574.2155  loss_xy: 767.4505  loss_wh: 34.4258
2025/05/11 23:51:19 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:51:27 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:29  time: 0.1609  data_time: 0.0048  memory: 2033  grad_norm: 3298.5840  loss: 1575.3949  loss_cls: 230.7964  loss_conf: 558.0124  loss_xy: 751.0223  loss_wh: 35.5638
2025/05/11 23:51:33 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:51:34 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:51:36 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.546 0.272 -1.000 0.172 0.314
2025/05/11 23:51:36 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.5460  coco/bbox_mAP_75: 0.2720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1720  coco/bbox_mAP_l: 0.3140  data_time: 0.0040  time: 0.0193
2025/05/11 23:51:44 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1607  data_time: 0.0104  memory: 2033  grad_norm: 2463.1928  loss: 1574.2593  loss_cls: 235.9218  loss_conf: 551.0181  loss_xy: 752.6166  loss_wh: 34.7028
2025/05/11 23:51:52 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1584  data_time: 0.0071  memory: 2033  grad_norm: 2180.6601  loss: 1578.8378  loss_cls: 231.3322  loss_conf: 552.9388  loss_xy: 756.3303  loss_wh: 38.2364
2025/05/11 23:51:58 - mmengine - INFO - Exp name: yolov3_pt_pdm_aff_20250511_233852
2025/05/11 23:51:58 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 23:52:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:52:03 - mmengine - INFO - bbox_mAP_copypaste: 0.268 0.548 0.220 -1.000 0.147 0.291
2025/05/11 23:52:03 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2680  coco/bbox_mAP_50: 0.5480  coco/bbox_mAP_75: 0.2200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2910  data_time: 0.0030  time: 0.0205
