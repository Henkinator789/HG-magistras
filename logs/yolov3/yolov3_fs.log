2025/05/10 18:54:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1796423010
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1796423010
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/10 18:54:41 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/10 18:54:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/10 18:54:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/10 18:54:43 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/10 18:54:43 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/10 18:54:44 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/10 18:54:44 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/10 18:54:44 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/10 18:54:57 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:18:23  time: 0.2640  data_time: 0.0931  memory: 2033  grad_norm: 7260.9842  loss: 5390.0931  loss_cls: 1796.2180  loss_conf: 2348.3585  loss_xy: 1134.2584  loss_wh: 111.2582
2025/05/10 18:55:04 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:19  time: 0.1523  data_time: 0.0022  memory: 2033  grad_norm: 6265.9592  loss: 3827.7789  loss_cls: 1157.3245  loss_conf: 1556.0947  loss_xy: 1042.1013  loss_wh: 72.2584
2025/05/10 18:55:11 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:55:20 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:55:21 - mmengine - INFO - bbox_mAP_copypaste: 0.075 0.183 0.037 -1.000 0.046 0.081
2025/05/10 18:55:21 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0750  coco/bbox_mAP_50: 0.1830  coco/bbox_mAP_75: 0.0370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0460  coco/bbox_mAP_l: 0.0810  data_time: 0.1676  time: 0.1893
2025/05/10 18:55:23 - mmengine - INFO - The best checkpoint with 0.0750 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/10 18:55:31 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:33  time: 0.1669  data_time: 0.0051  memory: 2033  grad_norm: 5870.8458  loss: 3167.0919  loss_cls: 890.0857  loss_conf: 1191.9986  loss_xy: 1033.6424  loss_wh: 51.3652
2025/05/10 18:55:39 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:55  time: 0.1516  data_time: 0.0022  memory: 2033  grad_norm: 5786.4703  loss: 2788.1424  loss_cls: 770.4832  loss_conf: 1033.5303  loss_xy: 941.0909  loss_wh: 43.0380
2025/05/10 18:55:45 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:55:46 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:55:47 - mmengine - INFO - bbox_mAP_copypaste: 0.107 0.223 0.080 -1.000 0.036 0.117
2025/05/10 18:55:47 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1070  coco/bbox_mAP_50: 0.2230  coco/bbox_mAP_75: 0.0800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0360  coco/bbox_mAP_l: 0.1170  data_time: 0.0038  time: 0.0200
2025/05/10 18:55:47 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/10 18:55:49 - mmengine - INFO - The best checkpoint with 0.1070 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/10 18:55:57 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:17  time: 0.1650  data_time: 0.0048  memory: 2033  grad_norm: 5988.8431  loss: 2693.3414  loss_cls: 712.3846  loss_conf: 970.2894  loss_xy: 970.2946  loss_wh: 40.3729
2025/05/10 18:56:05 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:10:59  time: 0.1554  data_time: 0.0021  memory: 2033  grad_norm: 6163.0566  loss: 2630.2118  loss_cls: 664.4714  loss_conf: 970.8378  loss_xy: 956.9037  loss_wh: 37.9990
2025/05/10 18:56:11 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:56:12 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:56:13 - mmengine - INFO - bbox_mAP_copypaste: 0.162 0.347 0.112 -1.000 0.107 0.173
2025/05/10 18:56:13 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1620  coco/bbox_mAP_50: 0.3470  coco/bbox_mAP_75: 0.1120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1070  coco/bbox_mAP_l: 0.1730  data_time: 0.0047  time: 0.0197
2025/05/10 18:56:13 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/10 18:56:15 - mmengine - INFO - The best checkpoint with 0.1620 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/10 18:56:23 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:36  time: 0.1653  data_time: 0.0051  memory: 2033  grad_norm: 6408.2936  loss: 2360.8536  loss_cls: 545.7371  loss_conf: 853.0705  loss_xy: 928.9570  loss_wh: 33.0890
2025/05/10 18:56:31 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:22  time: 0.1543  data_time: 0.0022  memory: 2033  grad_norm: 6441.5799  loss: 2309.4883  loss_cls: 501.9314  loss_conf: 839.2275  loss_xy: 934.6464  loss_wh: 33.6830
2025/05/10 18:56:37 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:56:38 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:56:39 - mmengine - INFO - bbox_mAP_copypaste: 0.198 0.412 0.144 -1.000 0.158 0.207
2025/05/10 18:56:39 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1980  coco/bbox_mAP_50: 0.4120  coco/bbox_mAP_75: 0.1440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.2070  data_time: 0.0035  time: 0.0192
2025/05/10 18:56:39 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/10 18:56:41 - mmengine - INFO - The best checkpoint with 0.1980 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/10 18:56:49 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:03  time: 0.1637  data_time: 0.0050  memory: 2033  grad_norm: 6204.1321  loss: 2125.8059  loss_cls: 407.0249  loss_conf: 788.5571  loss_xy: 899.7954  loss_wh: 30.4285
2025/05/10 18:56:57 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:52  time: 0.1585  data_time: 0.0023  memory: 2033  grad_norm: 6335.2560  loss: 2271.1630  loss_cls: 430.3927  loss_conf: 828.0619  loss_xy: 979.9568  loss_wh: 32.7516
2025/05/10 18:57:03 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:57:04 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:57:06 - mmengine - INFO - bbox_mAP_copypaste: 0.169 0.409 0.093 -1.000 0.177 0.167
2025/05/10 18:57:06 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.1690  coco/bbox_mAP_50: 0.4090  coco/bbox_mAP_75: 0.0930  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.1670  data_time: 0.0037  time: 0.0192
2025/05/10 18:57:14 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:33  time: 0.1622  data_time: 0.0047  memory: 2033  grad_norm: 6795.7374  loss: 2131.2138  loss_cls: 385.1698  loss_conf: 753.0533  loss_xy: 962.1777  loss_wh: 30.8130
2025/05/10 18:57:22 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:24  time: 0.1619  data_time: 0.0026  memory: 2033  grad_norm: 7089.4044  loss: 2101.4662  loss_cls: 393.1217  loss_conf: 757.7590  loss_xy: 921.9341  loss_wh: 28.6515
2025/05/10 18:57:28 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:57:29 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:57:31 - mmengine - INFO - bbox_mAP_copypaste: 0.163 0.359 0.107 -1.000 0.122 0.177
2025/05/10 18:57:31 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.1630  coco/bbox_mAP_50: 0.3590  coco/bbox_mAP_75: 0.1070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1220  coco/bbox_mAP_l: 0.1770  data_time: 0.0050  time: 0.0204
2025/05/10 18:57:39 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:07  time: 0.1656  data_time: 0.0047  memory: 2033  grad_norm: 6582.4083  loss: 1955.3247  loss_cls: 335.9214  loss_conf: 682.2365  loss_xy: 907.2112  loss_wh: 29.9555
2025/05/10 18:57:47 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:58  time: 0.1579  data_time: 0.0022  memory: 2033  grad_norm: 6319.4921  loss: 1913.2488  loss_cls: 310.6238  loss_conf: 672.8717  loss_xy: 901.8843  loss_wh: 27.8689
2025/05/10 18:57:53 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:57:54 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:57:56 - mmengine - INFO - bbox_mAP_copypaste: 0.252 0.493 0.225 -1.000 0.159 0.262
2025/05/10 18:57:56 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2520  coco/bbox_mAP_50: 0.4930  coco/bbox_mAP_75: 0.2250  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1590  coco/bbox_mAP_l: 0.2620  data_time: 0.0044  time: 0.0188
2025/05/10 18:57:56 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/10 18:57:57 - mmengine - INFO - The best checkpoint with 0.2520 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/10 18:57:59 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:58:05 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:42  time: 0.1635  data_time: 0.0046  memory: 2033  grad_norm: 6162.4308  loss: 1804.2416  loss_cls: 298.0571  loss_conf: 599.6312  loss_xy: 877.9833  loss_wh: 28.5700
2025/05/10 18:58:13 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:33  time: 0.1583  data_time: 0.0023  memory: 2033  grad_norm: 6620.6261  loss: 1956.4447  loss_cls: 302.9769  loss_conf: 668.1820  loss_xy: 952.7320  loss_wh: 32.5538
2025/05/10 18:58:19 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:58:20 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:58:22 - mmengine - INFO - bbox_mAP_copypaste: 0.315 0.620 0.271 -1.000 0.219 0.334
2025/05/10 18:58:22 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3150  coco/bbox_mAP_50: 0.6200  coco/bbox_mAP_75: 0.2710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3340  data_time: 0.0037  time: 0.0191
2025/05/10 18:58:22 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/10 18:58:23 - mmengine - INFO - The best checkpoint with 0.3150 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/10 18:58:31 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:18  time: 0.1628  data_time: 0.0047  memory: 2033  grad_norm: 6304.7705  loss: 1750.8064  loss_cls: 271.5240  loss_conf: 562.8972  loss_xy: 888.4387  loss_wh: 27.9465
2025/05/10 18:58:39 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:09  time: 0.1568  data_time: 0.0022  memory: 2033  grad_norm: 6394.6763  loss: 1811.8400  loss_cls: 266.0845  loss_conf: 593.8874  loss_xy: 924.7145  loss_wh: 27.1535
2025/05/10 18:58:45 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:58:46 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:58:48 - mmengine - INFO - bbox_mAP_copypaste: 0.337 0.635 0.315 -1.000 0.198 0.357
2025/05/10 18:58:48 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3370  coco/bbox_mAP_50: 0.6350  coco/bbox_mAP_75: 0.3150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1980  coco/bbox_mAP_l: 0.3570  data_time: 0.0045  time: 0.0196
2025/05/10 18:58:48 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/10 18:58:49 - mmengine - INFO - The best checkpoint with 0.3370 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/10 18:58:57 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:53  time: 0.1628  data_time: 0.0046  memory: 2033  grad_norm: 6441.3946  loss: 1698.2089  loss_cls: 240.2374  loss_conf: 521.2593  loss_xy: 911.3288  loss_wh: 25.3833
2025/05/10 18:59:05 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:44  time: 0.1540  data_time: 0.0022  memory: 2033  grad_norm: 6585.5381  loss: 1703.4521  loss_cls: 236.3068  loss_conf: 537.7834  loss_xy: 903.3989  loss_wh: 25.9631
2025/05/10 18:59:11 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:59:12 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:59:13 - mmengine - INFO - bbox_mAP_copypaste: 0.235 0.513 0.157 -1.000 0.158 0.254
2025/05/10 18:59:13 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2350  coco/bbox_mAP_50: 0.5130  coco/bbox_mAP_75: 0.1570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.2540  data_time: 0.0034  time: 0.0193
2025/05/10 18:59:21 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:28  time: 0.1573  data_time: 0.0047  memory: 2033  grad_norm: 6818.0747  loss: 1633.0648  loss_cls: 213.6080  loss_conf: 464.8458  loss_xy: 927.5137  loss_wh: 27.0972
2025/05/10 18:59:29 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:19  time: 0.1541  data_time: 0.0023  memory: 2033  grad_norm: 6912.8286  loss: 1647.6153  loss_cls: 227.6623  loss_conf: 477.3214  loss_xy: 917.6304  loss_wh: 25.0012
2025/05/10 18:59:35 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 18:59:36 - mmengine - INFO - Evaluating bbox...
2025/05/10 18:59:38 - mmengine - INFO - bbox_mAP_copypaste: 0.258 0.547 0.189 -1.000 0.165 0.284
2025/05/10 18:59:38 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2580  coco/bbox_mAP_50: 0.5470  coco/bbox_mAP_75: 0.1890  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1650  coco/bbox_mAP_l: 0.2840  data_time: 0.0053  time: 0.0192
2025/05/10 18:59:46 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:04  time: 0.1584  data_time: 0.0046  memory: 2033  grad_norm: 6828.6806  loss: 1501.6492  loss_cls: 180.3684  loss_conf: 389.3214  loss_xy: 905.1539  loss_wh: 26.8053
2025/05/10 18:59:53 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:55  time: 0.1562  data_time: 0.0022  memory: 2033  grad_norm: 7211.5901  loss: 1565.4751  loss_cls: 199.8041  loss_conf: 422.8672  loss_xy: 916.0168  loss_wh: 26.7870
2025/05/10 19:00:00 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:00:01 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:00:02 - mmengine - INFO - bbox_mAP_copypaste: 0.282 0.632 0.203 -1.000 0.134 0.302
2025/05/10 19:00:02 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.2820  coco/bbox_mAP_50: 0.6320  coco/bbox_mAP_75: 0.2030  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1340  coco/bbox_mAP_l: 0.3020  data_time: 0.0042  time: 0.0209
2025/05/10 19:00:10 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:40  time: 0.1579  data_time: 0.0047  memory: 2033  grad_norm: 6133.9602  loss: 1306.4314  loss_cls: 132.7726  loss_conf: 298.4739  loss_xy: 852.2087  loss_wh: 22.9763
2025/05/10 19:00:18 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:31  time: 0.1572  data_time: 0.0022  memory: 2033  grad_norm: 7259.8712  loss: 1444.5560  loss_cls: 164.2219  loss_conf: 348.1720  loss_xy: 904.8975  loss_wh: 27.2646
2025/05/10 19:00:24 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:00:26 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:00:27 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.615 0.202 -1.000 0.199 0.311
2025/05/10 19:00:27 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.6150  coco/bbox_mAP_75: 0.2020  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.3110  data_time: 0.0051  time: 0.0196
2025/05/10 19:00:35 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:17  time: 0.1603  data_time: 0.0047  memory: 2033  grad_norm: 6456.1749  loss: 1274.8656  loss_cls: 109.4218  loss_conf: 269.9347  loss_xy: 868.4374  loss_wh: 27.0716
2025/05/10 19:00:43 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:08  time: 0.1561  data_time: 0.0022  memory: 2033  grad_norm: 7469.7779  loss: 1383.0683  loss_cls: 141.9013  loss_conf: 315.5955  loss_xy: 894.7357  loss_wh: 30.8357
2025/05/10 19:00:49 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:00:50 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:00:51 - mmengine - INFO - bbox_mAP_copypaste: 0.267 0.604 0.178 -1.000 0.214 0.283
2025/05/10 19:00:51 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2670  coco/bbox_mAP_50: 0.6040  coco/bbox_mAP_75: 0.1780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.2830  data_time: 0.0037  time: 0.0195
2025/05/10 19:00:56 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:00:59 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:53  time: 0.1563  data_time: 0.0048  memory: 2033  grad_norm: 6522.5634  loss: 1262.6553  loss_cls: 109.1785  loss_conf: 246.5582  loss_xy: 881.6654  loss_wh: 25.2532
2025/05/10 19:01:07 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:45  time: 0.1590  data_time: 0.0023  memory: 2033  grad_norm: 7943.3627  loss: 1365.2294  loss_cls: 135.0634  loss_conf: 284.1378  loss_xy: 916.5802  loss_wh: 29.4479
2025/05/10 19:01:14 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:01:15 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:01:16 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.658 0.250 -1.000 0.194 0.351
2025/05/10 19:01:16 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.6580  coco/bbox_mAP_75: 0.2500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.3510  data_time: 0.0047  time: 0.0191
2025/05/10 19:01:24 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:30  time: 0.1596  data_time: 0.0046  memory: 2033  grad_norm: 6469.9750  loss: 1211.8980  loss_cls: 77.7239  loss_conf: 225.1108  loss_xy: 884.0513  loss_wh: 25.0120
2025/05/10 19:01:32 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:22  time: 0.1549  data_time: 0.0022  memory: 2033  grad_norm: 6900.9123  loss: 1226.2859  loss_cls: 98.1306  loss_conf: 231.5528  loss_xy: 874.2895  loss_wh: 22.3130
2025/05/10 19:01:38 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:01:39 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:01:41 - mmengine - INFO - bbox_mAP_copypaste: 0.216 0.505 0.136 -1.000 0.109 0.245
2025/05/10 19:01:41 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2160  coco/bbox_mAP_50: 0.5050  coco/bbox_mAP_75: 0.1360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1090  coco/bbox_mAP_l: 0.2450  data_time: 0.0046  time: 0.0198
2025/05/10 19:01:49 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:07  time: 0.1579  data_time: 0.0046  memory: 2033  grad_norm: 5979.7192  loss: 1101.3931  loss_cls: 64.7282  loss_conf: 166.4020  loss_xy: 838.0213  loss_wh: 32.2416
2025/05/10 19:01:56 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:04:59  time: 0.1553  data_time: 0.0022  memory: 2033  grad_norm: 6600.4073  loss: 1186.8793  loss_cls: 78.2117  loss_conf: 186.4495  loss_xy: 894.5734  loss_wh: 27.6448
2025/05/10 19:02:03 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:02:04 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:02:05 - mmengine - INFO - bbox_mAP_copypaste: 0.244 0.496 0.196 -1.000 0.150 0.268
2025/05/10 19:02:05 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2440  coco/bbox_mAP_50: 0.4960  coco/bbox_mAP_75: 0.1960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2680  data_time: 0.0045  time: 0.0191
2025/05/10 19:02:13 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:44  time: 0.1592  data_time: 0.0045  memory: 2033  grad_norm: 5814.7545  loss: 1105.3685  loss_cls: 61.2396  loss_conf: 139.9292  loss_xy: 877.7850  loss_wh: 26.4147
2025/05/10 19:02:21 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:36  time: 0.1537  data_time: 0.0022  memory: 2033  grad_norm: 5822.9168  loss: 1115.7137  loss_cls: 54.6952  loss_conf: 151.0200  loss_xy: 882.4817  loss_wh: 27.5169
2025/05/10 19:02:27 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:02:28 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:02:30 - mmengine - INFO - bbox_mAP_copypaste: 0.232 0.532 0.134 -1.000 0.148 0.254
2025/05/10 19:02:30 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2320  coco/bbox_mAP_50: 0.5320  coco/bbox_mAP_75: 0.1340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1480  coco/bbox_mAP_l: 0.2540  data_time: 0.0048  time: 0.0198
2025/05/10 19:02:38 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:22  time: 0.1596  data_time: 0.0046  memory: 2033  grad_norm: 5614.8746  loss: 1067.7491  loss_cls: 49.7284  loss_conf: 121.6797  loss_xy: 871.2574  loss_wh: 25.0837
2025/05/10 19:02:46 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:14  time: 0.1578  data_time: 0.0024  memory: 2033  grad_norm: 5978.5958  loss: 1176.8877  loss_cls: 57.0134  loss_conf: 142.8175  loss_xy: 949.6670  loss_wh: 27.3897
2025/05/10 19:02:52 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:02:53 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:02:54 - mmengine - INFO - bbox_mAP_copypaste: 0.286 0.609 0.195 -1.000 0.207 0.306
2025/05/10 19:02:54 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2860  coco/bbox_mAP_50: 0.6090  coco/bbox_mAP_75: 0.1950  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3060  data_time: 0.0048  time: 0.0193
2025/05/10 19:03:02 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:03:59  time: 0.1594  data_time: 0.0046  memory: 2033  grad_norm: 5579.0380  loss: 1071.4795  loss_cls: 37.0442  loss_conf: 111.6421  loss_xy: 884.6913  loss_wh: 38.1019
2025/05/10 19:03:10 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:51  time: 0.1541  data_time: 0.0023  memory: 2033  grad_norm: 5581.3974  loss: 1063.7522  loss_cls: 37.5895  loss_conf: 105.2034  loss_xy: 878.3577  loss_wh: 42.6016
2025/05/10 19:03:16 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:03:17 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:03:19 - mmengine - INFO - bbox_mAP_copypaste: 0.194 0.498 0.108 -1.000 0.178 0.204
2025/05/10 19:03:19 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.1940  coco/bbox_mAP_50: 0.4980  coco/bbox_mAP_75: 0.1080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1780  coco/bbox_mAP_l: 0.2040  data_time: 0.0045  time: 0.0190
2025/05/10 19:03:27 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:36  time: 0.1563  data_time: 0.0045  memory: 2033  grad_norm: 4768.9181  loss: 987.2363  loss_cls: 31.9516  loss_conf: 83.3585  loss_xy: 846.1916  loss_wh: 25.7345
2025/05/10 19:03:34 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:28  time: 0.1554  data_time: 0.0022  memory: 2033  grad_norm: 5724.0067  loss: 1054.9391  loss_cls: 44.2955  loss_conf: 104.2332  loss_xy: 881.6972  loss_wh: 24.7132
2025/05/10 19:03:41 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:03:42 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:03:43 - mmengine - INFO - bbox_mAP_copypaste: 0.219 0.513 0.123 -1.000 0.147 0.245
2025/05/10 19:03:43 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2190  coco/bbox_mAP_50: 0.5130  coco/bbox_mAP_75: 0.1230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2450  data_time: 0.0038  time: 0.0200
2025/05/10 19:03:50 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:03:52 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:14  time: 0.1636  data_time: 0.0046  memory: 2033  grad_norm: 4772.0505  loss: 1020.8718  loss_cls: 28.1338  loss_conf: 76.3745  loss_xy: 887.3335  loss_wh: 29.0300
2025/05/10 19:03:59 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:06  time: 0.1531  data_time: 0.0023  memory: 2033  grad_norm: 5397.3773  loss: 1016.1167  loss_cls: 32.0142  loss_conf: 92.5260  loss_xy: 858.4183  loss_wh: 33.1582
2025/05/10 19:04:06 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:04:07 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:04:08 - mmengine - INFO - bbox_mAP_copypaste: 0.274 0.571 0.199 -1.000 0.190 0.294
2025/05/10 19:04:08 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2740  coco/bbox_mAP_50: 0.5710  coco/bbox_mAP_75: 0.1990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.2940  data_time: 0.0041  time: 0.0192
2025/05/10 19:04:16 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:51  time: 0.1580  data_time: 0.0047  memory: 2033  grad_norm: 4924.9271  loss: 1023.9343  loss_cls: 29.0899  loss_conf: 70.5718  loss_xy: 889.5140  loss_wh: 34.7586
2025/05/10 19:04:24 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:43  time: 0.1547  data_time: 0.0022  memory: 2033  grad_norm: 5209.9938  loss: 1022.0133  loss_cls: 32.0428  loss_conf: 84.7130  loss_xy: 877.0384  loss_wh: 28.2190
2025/05/10 19:04:30 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:04:31 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:04:32 - mmengine - INFO - bbox_mAP_copypaste: 0.277 0.550 0.231 -1.000 0.184 0.298
2025/05/10 19:04:32 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2770  coco/bbox_mAP_50: 0.5500  coco/bbox_mAP_75: 0.2310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.2980  data_time: 0.0046  time: 0.0197
2025/05/10 19:04:41 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:28  time: 0.1630  data_time: 0.0046  memory: 2033  grad_norm: 5122.0763  loss: 1022.5979  loss_cls: 34.5795  loss_conf: 75.3355  loss_xy: 885.9341  loss_wh: 26.7489
2025/05/10 19:04:48 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:20  time: 0.1581  data_time: 0.0022  memory: 2033  grad_norm: 4828.8440  loss: 1041.7538  loss_cls: 26.6303  loss_conf: 75.4186  loss_xy: 907.8280  loss_wh: 31.8770
2025/05/10 19:04:55 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:04:56 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:04:57 - mmengine - INFO - bbox_mAP_copypaste: 0.249 0.531 0.182 -1.000 0.150 0.270
2025/05/10 19:04:57 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2490  coco/bbox_mAP_50: 0.5310  coco/bbox_mAP_75: 0.1820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2700  data_time: 0.0032  time: 0.0188
2025/05/10 19:05:05 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:06  time: 0.1616  data_time: 0.0046  memory: 2033  grad_norm: 4596.1425  loss: 987.6253  loss_cls: 19.8816  loss_conf: 65.4506  loss_xy: 873.5531  loss_wh: 28.7401
2025/05/10 19:05:13 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:58  time: 0.1535  data_time: 0.0021  memory: 2033  grad_norm: 4616.0977  loss: 973.2894  loss_cls: 22.3611  loss_conf: 68.4496  loss_xy: 854.9574  loss_wh: 27.5213
2025/05/10 19:05:19 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:05:20 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:05:22 - mmengine - INFO - bbox_mAP_copypaste: 0.266 0.604 0.168 -1.000 0.167 0.286
2025/05/10 19:05:22 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2660  coco/bbox_mAP_50: 0.6040  coco/bbox_mAP_75: 0.1680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.2860  data_time: 0.0038  time: 0.0187
2025/05/10 19:05:29 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:43  time: 0.1560  data_time: 0.0046  memory: 2033  grad_norm: 4157.5068  loss: 979.5692  loss_cls: 19.2091  loss_conf: 57.4542  loss_xy: 878.2133  loss_wh: 24.6926
2025/05/10 19:05:37 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:36  time: 0.1599  data_time: 0.0022  memory: 2033  grad_norm: 5402.4862  loss: 1020.8961  loss_cls: 29.6869  loss_conf: 73.7422  loss_xy: 886.1862  loss_wh: 31.2809
2025/05/10 19:05:44 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:05:45 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:05:46 - mmengine - INFO - bbox_mAP_copypaste: 0.303 0.623 0.240 -1.000 0.202 0.321
2025/05/10 19:05:46 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3030  coco/bbox_mAP_50: 0.6230  coco/bbox_mAP_75: 0.2400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2020  coco/bbox_mAP_l: 0.3210  data_time: 0.0040  time: 0.0190
2025/05/10 19:05:54 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:21  time: 0.1552  data_time: 0.0047  memory: 2033  grad_norm: 4193.7455  loss: 949.7164  loss_cls: 18.9120  loss_conf: 53.1420  loss_xy: 852.8676  loss_wh: 24.7948
2025/05/10 19:06:02 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:13  time: 0.1558  data_time: 0.0021  memory: 2033  grad_norm: 4850.8974  loss: 1019.2426  loss_cls: 24.9640  loss_conf: 66.7953  loss_xy: 899.5491  loss_wh: 27.9341
2025/05/10 19:06:08 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:06:09 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:06:10 - mmengine - INFO - bbox_mAP_copypaste: 0.225 0.530 0.137 -1.000 0.140 0.246
2025/05/10 19:06:10 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2250  coco/bbox_mAP_50: 0.5300  coco/bbox_mAP_75: 0.1370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1400  coco/bbox_mAP_l: 0.2460  data_time: 0.0043  time: 0.0193
2025/05/10 19:06:19 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:59  time: 0.1612  data_time: 0.0048  memory: 2033  grad_norm: 4256.0901  loss: 976.8773  loss_cls: 17.6658  loss_conf: 48.3334  loss_xy: 872.3901  loss_wh: 38.4880
2025/05/10 19:06:26 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.1533  data_time: 0.0022  memory: 2033  grad_norm: 4494.6058  loss: 961.2651  loss_cls: 20.2722  loss_conf: 57.3174  loss_xy: 852.9732  loss_wh: 30.7024
2025/05/10 19:06:32 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:06:33 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:06:35 - mmengine - INFO - bbox_mAP_copypaste: 0.295 0.578 0.257 -1.000 0.206 0.316
2025/05/10 19:06:35 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2950  coco/bbox_mAP_50: 0.5780  coco/bbox_mAP_75: 0.2570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.3160  data_time: 0.0051  time: 0.0195
2025/05/10 19:06:43 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:36  time: 0.1575  data_time: 0.0047  memory: 2033  grad_norm: 4208.6494  loss: 969.4117  loss_cls: 18.8453  loss_conf: 46.3277  loss_xy: 874.7309  loss_wh: 29.5078
2025/05/10 19:06:43 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:06:50 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:28  time: 0.1534  data_time: 0.0022  memory: 2033  grad_norm: 4403.6850  loss: 953.9258  loss_cls: 18.0101  loss_conf: 55.1559  loss_xy: 852.0638  loss_wh: 28.6959
2025/05/10 19:06:57 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:06:58 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:06:59 - mmengine - INFO - bbox_mAP_copypaste: 0.263 0.589 0.184 -1.000 0.138 0.295
2025/05/10 19:06:59 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2630  coco/bbox_mAP_50: 0.5890  coco/bbox_mAP_75: 0.1840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1380  coco/bbox_mAP_l: 0.2950  data_time: 0.0048  time: 0.0192
2025/05/10 19:07:07 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1597  data_time: 0.0047  memory: 2033  grad_norm: 4384.0089  loss: 1018.7996  loss_cls: 19.7041  loss_conf: 52.0416  loss_xy: 920.1869  loss_wh: 26.8670
2025/05/10 19:07:15 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1563  data_time: 0.0021  memory: 2033  grad_norm: 4402.0147  loss: 986.7919  loss_cls: 19.2663  loss_conf: 51.5934  loss_xy: 890.4795  loss_wh: 25.4527
2025/05/10 19:07:21 - mmengine - INFO - Exp name: yolov3_fs_20250510_185437
2025/05/10 19:07:21 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/10 19:07:24 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:07:26 - mmengine - INFO - bbox_mAP_copypaste: 0.265 0.565 0.185 -1.000 0.190 0.284
2025/05/10 19:07:26 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2650  coco/bbox_mAP_50: 0.5650  coco/bbox_mAP_75: 0.1850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.2840  data_time: 0.0031  time: 0.0221
