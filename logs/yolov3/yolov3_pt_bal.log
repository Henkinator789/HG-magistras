2025/05/11 21:23:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 950728710
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 950728710
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 21:23:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    416,
                    416,
                ), type='Resize'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 21:23:35 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 21:23:35 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 21:23:37 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 21:23:37 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 21:23:37 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 21:23:37 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 21:23:37 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 21:23:37 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 21:23:50 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:18:05  time: 0.2597  data_time: 0.0920  memory: 2033  grad_norm: 3020.9017  loss: 5007.4221  loss_cls: 1637.3180  loss_conf: 2161.1843  loss_xy: 1126.3185  loss_wh: 82.6012
2025/05/11 21:23:57 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:10  time: 0.1522  data_time: 0.0022  memory: 2033  grad_norm: 3419.3388  loss: 3289.9902  loss_cls: 906.9035  loss_conf: 1309.0427  loss_xy: 1030.2355  loss_wh: 43.8085
2025/05/11 21:24:04 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:24:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:24:15 - mmengine - INFO - bbox_mAP_copypaste: 0.104 0.212 0.078 -1.000 0.065 0.112
2025/05/11 21:24:15 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1040  coco/bbox_mAP_50: 0.2120  coco/bbox_mAP_75: 0.0780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0650  coco/bbox_mAP_l: 0.1120  data_time: 0.1652  time: 0.1859
2025/05/11 21:24:16 - mmengine - INFO - The best checkpoint with 0.1040 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 21:24:24 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:34  time: 0.1684  data_time: 0.0049  memory: 2033  grad_norm: 3230.1987  loss: 2691.5251  loss_cls: 721.2839  loss_conf: 961.2110  loss_xy: 975.6891  loss_wh: 33.3410
2025/05/11 21:24:32 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:12:00  time: 0.1571  data_time: 0.0022  memory: 2033  grad_norm: 3307.6931  loss: 2590.4541  loss_cls: 643.9948  loss_conf: 928.7835  loss_xy: 985.6875  loss_wh: 31.9883
2025/05/11 21:24:38 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:24:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:24:41 - mmengine - INFO - bbox_mAP_copypaste: 0.196 0.405 0.152 -1.000 0.135 0.210
2025/05/11 21:24:41 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1960  coco/bbox_mAP_50: 0.4050  coco/bbox_mAP_75: 0.1520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2100  data_time: 0.0048  time: 0.0195
2025/05/11 21:24:41 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 21:24:42 - mmengine - INFO - The best checkpoint with 0.1960 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 21:24:51 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:24  time: 0.1687  data_time: 0.0046  memory: 2033  grad_norm: 3460.6452  loss: 2303.8469  loss_cls: 519.7314  loss_conf: 820.9393  loss_xy: 937.1924  loss_wh: 25.9838
2025/05/11 21:24:58 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:05  time: 0.1564  data_time: 0.0022  memory: 2033  grad_norm: 3468.0645  loss: 2317.0437  loss_cls: 503.8406  loss_conf: 825.0523  loss_xy: 960.7593  loss_wh: 27.3914
2025/05/11 21:25:05 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:25:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:25:07 - mmengine - INFO - bbox_mAP_copypaste: 0.253 0.503 0.214 -1.000 0.134 0.275
2025/05/11 21:25:07 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2530  coco/bbox_mAP_50: 0.5030  coco/bbox_mAP_75: 0.2140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1340  coco/bbox_mAP_l: 0.2750  data_time: 0.0038  time: 0.0188
2025/05/11 21:25:07 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 21:25:08 - mmengine - INFO - The best checkpoint with 0.2530 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 21:25:17 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:40  time: 0.1643  data_time: 0.0046  memory: 2033  grad_norm: 3632.6919  loss: 2154.8224  loss_cls: 418.5427  loss_conf: 762.2949  loss_xy: 948.2769  loss_wh: 25.7079
2025/05/11 21:25:24 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:26  time: 0.1561  data_time: 0.0022  memory: 2033  grad_norm: 3728.8300  loss: 2055.0420  loss_cls: 384.9195  loss_conf: 739.1730  loss_xy: 907.1188  loss_wh: 23.8307
2025/05/11 21:25:31 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:25:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:25:33 - mmengine - INFO - bbox_mAP_copypaste: 0.337 0.605 0.341 -1.000 0.210 0.361
2025/05/11 21:25:33 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3370  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.3410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3610  data_time: 0.0042  time: 0.0190
2025/05/11 21:25:33 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 21:25:35 - mmengine - INFO - The best checkpoint with 0.3370 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 21:25:43 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:06  time: 0.1623  data_time: 0.0048  memory: 2033  grad_norm: 3478.9200  loss: 1899.6687  loss_cls: 326.7423  loss_conf: 662.8869  loss_xy: 887.7404  loss_wh: 22.2992
2025/05/11 21:25:50 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:54  time: 0.1546  data_time: 0.0024  memory: 2033  grad_norm: 3735.5941  loss: 1923.3757  loss_cls: 337.1766  loss_conf: 656.8311  loss_xy: 907.2494  loss_wh: 22.1187
2025/05/11 21:25:57 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:25:58 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:25:59 - mmengine - INFO - bbox_mAP_copypaste: 0.301 0.570 0.275 -1.000 0.220 0.323
2025/05/11 21:25:59 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3010  coco/bbox_mAP_50: 0.5700  coco/bbox_mAP_75: 0.2750  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2200  coco/bbox_mAP_l: 0.3230  data_time: 0.0042  time: 0.0191
2025/05/11 21:26:07 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:35  time: 0.1611  data_time: 0.0048  memory: 2033  grad_norm: 3486.6615  loss: 1793.0461  loss_cls: 288.0402  loss_conf: 597.4344  loss_xy: 886.1374  loss_wh: 21.4341
2025/05/11 21:26:15 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:25  time: 0.1546  data_time: 0.0022  memory: 2033  grad_norm: 3984.1914  loss: 1912.5636  loss_cls: 307.6890  loss_conf: 663.3403  loss_xy: 917.0737  loss_wh: 24.4607
2025/05/11 21:26:21 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:26:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:26:24 - mmengine - INFO - bbox_mAP_copypaste: 0.296 0.585 0.258 -1.000 0.184 0.321
2025/05/11 21:26:24 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2960  coco/bbox_mAP_50: 0.5850  coco/bbox_mAP_75: 0.2580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.3210  data_time: 0.0047  time: 0.0194
2025/05/11 21:26:32 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:07  time: 0.1595  data_time: 0.0045  memory: 2033  grad_norm: 3838.9106  loss: 1738.0071  loss_cls: 256.2518  loss_conf: 577.3144  loss_xy: 883.0140  loss_wh: 21.4270
2025/05/11 21:26:40 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:58  time: 0.1565  data_time: 0.0023  memory: 2033  grad_norm: 3858.9018  loss: 1803.0940  loss_cls: 271.6472  loss_conf: 591.9539  loss_xy: 917.3915  loss_wh: 22.1014
2025/05/11 21:26:46 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:26:47 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:26:49 - mmengine - INFO - bbox_mAP_copypaste: 0.369 0.660 0.373 -1.000 0.218 0.395
2025/05/11 21:26:49 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3690  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3950  data_time: 0.0047  time: 0.0197
2025/05/11 21:26:49 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 21:26:50 - mmengine - INFO - The best checkpoint with 0.3690 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 21:26:52 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:26:58 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:42  time: 0.1667  data_time: 0.0047  memory: 2033  grad_norm: 4030.5427  loss: 1710.8629  loss_cls: 247.4223  loss_conf: 541.3122  loss_xy: 901.7139  loss_wh: 20.4146
2025/05/11 21:27:06 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:33  time: 0.1579  data_time: 0.0022  memory: 2033  grad_norm: 4442.5321  loss: 1797.0505  loss_cls: 274.4635  loss_conf: 565.7900  loss_xy: 935.4716  loss_wh: 21.3254
2025/05/11 21:27:12 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:27:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:27:15 - mmengine - INFO - bbox_mAP_copypaste: 0.302 0.671 0.196 -1.000 0.221 0.319
2025/05/11 21:27:15 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3020  coco/bbox_mAP_50: 0.6710  coco/bbox_mAP_75: 0.1960  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3190  data_time: 0.0040  time: 0.0191
2025/05/11 21:27:23 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:17  time: 0.1617  data_time: 0.0048  memory: 2033  grad_norm: 4214.8909  loss: 1679.4482  loss_cls: 227.7694  loss_conf: 503.1944  loss_xy: 925.2819  loss_wh: 23.2025
2025/05/11 21:27:31 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:08  time: 0.1555  data_time: 0.0024  memory: 2033  grad_norm: 4104.2543  loss: 1580.9802  loss_cls: 200.0196  loss_conf: 479.4409  loss_xy: 880.6449  loss_wh: 20.8748
2025/05/11 21:27:37 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:27:38 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:27:40 - mmengine - INFO - bbox_mAP_copypaste: 0.390 0.685 0.395 -1.000 0.257 0.414
2025/05/11 21:27:40 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3900  coco/bbox_mAP_50: 0.6850  coco/bbox_mAP_75: 0.3950  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2570  coco/bbox_mAP_l: 0.4140  data_time: 0.0046  time: 0.0189
2025/05/11 21:27:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/11 21:27:41 - mmengine - INFO - The best checkpoint with 0.3900 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/11 21:27:49 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:54  time: 0.1725  data_time: 0.0053  memory: 2033  grad_norm: 4408.1283  loss: 1604.3271  loss_cls: 193.7931  loss_conf: 457.2405  loss_xy: 930.4409  loss_wh: 22.8526
2025/05/11 21:27:57 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:45  time: 0.1534  data_time: 0.0023  memory: 2033  grad_norm: 4411.7430  loss: 1495.4078  loss_cls: 169.3410  loss_conf: 432.0778  loss_xy: 871.1030  loss_wh: 22.8860
2025/05/11 21:28:03 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:28:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:28:06 - mmengine - INFO - bbox_mAP_copypaste: 0.284 0.579 0.229 -1.000 0.229 0.302
2025/05/11 21:28:06 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2840  coco/bbox_mAP_50: 0.5790  coco/bbox_mAP_75: 0.2290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2290  coco/bbox_mAP_l: 0.3020  data_time: 0.0041  time: 0.0191
2025/05/11 21:28:14 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:29  time: 0.1631  data_time: 0.0045  memory: 2033  grad_norm: 4514.9832  loss: 1506.3464  loss_cls: 151.0253  loss_conf: 403.5319  loss_xy: 928.4523  loss_wh: 23.3369
2025/05/11 21:28:22 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:20  time: 0.1527  data_time: 0.0023  memory: 2033  grad_norm: 4631.3622  loss: 1379.5904  loss_cls: 162.5158  loss_conf: 356.7417  loss_xy: 841.2103  loss_wh: 19.1226
2025/05/11 21:28:28 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:28:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:28:31 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.631 0.350 -1.000 0.177 0.376
2025/05/11 21:28:31 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6310  coco/bbox_mAP_75: 0.3500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.3760  data_time: 0.0039  time: 0.0189
2025/05/11 21:28:39 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:05  time: 0.1616  data_time: 0.0045  memory: 2033  grad_norm: 4682.7606  loss: 1360.1633  loss_cls: 131.7513  loss_conf: 333.2714  loss_xy: 875.1566  loss_wh: 19.9841
2025/05/11 21:28:47 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:57  time: 0.1602  data_time: 0.0022  memory: 2033  grad_norm: 5254.2375  loss: 1462.3389  loss_cls: 145.8245  loss_conf: 368.9267  loss_xy: 927.0447  loss_wh: 20.5431
2025/05/11 21:28:53 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:28:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:28:56 - mmengine - INFO - bbox_mAP_copypaste: 0.333 0.597 0.329 -1.000 0.188 0.356
2025/05/11 21:28:56 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3330  coco/bbox_mAP_50: 0.5970  coco/bbox_mAP_75: 0.3290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1880  coco/bbox_mAP_l: 0.3560  data_time: 0.0039  time: 0.0193
2025/05/11 21:29:03 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:41  time: 0.1577  data_time: 0.0047  memory: 2033  grad_norm: 4303.7101  loss: 1248.3880  loss_cls: 94.8528  loss_conf: 265.0478  loss_xy: 868.7775  loss_wh: 19.7099
2025/05/11 21:29:11 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:33  time: 0.1555  data_time: 0.0022  memory: 2033  grad_norm: 5075.6697  loss: 1350.7823  loss_cls: 124.7860  loss_conf: 307.9478  loss_xy: 896.1057  loss_wh: 21.9429
2025/05/11 21:29:18 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:29:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:29:20 - mmengine - INFO - bbox_mAP_copypaste: 0.260 0.573 0.191 -1.000 0.136 0.292
2025/05/11 21:29:20 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2600  coco/bbox_mAP_50: 0.5730  coco/bbox_mAP_75: 0.1910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1360  coco/bbox_mAP_l: 0.2920  data_time: 0.0036  time: 0.0188
2025/05/11 21:29:28 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:18  time: 0.1581  data_time: 0.0046  memory: 2033  grad_norm: 4374.3188  loss: 1219.5312  loss_cls: 87.7635  loss_conf: 229.8697  loss_xy: 877.0948  loss_wh: 24.8033
2025/05/11 21:29:36 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:10  time: 0.1583  data_time: 0.0022  memory: 2033  grad_norm: 4934.5258  loss: 1289.9982  loss_cls: 106.8391  loss_conf: 257.9874  loss_xy: 905.1854  loss_wh: 19.9863
2025/05/11 21:29:42 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:29:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:29:45 - mmengine - INFO - bbox_mAP_copypaste: 0.330 0.591 0.327 -1.000 0.198 0.358
2025/05/11 21:29:45 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3300  coco/bbox_mAP_50: 0.5910  coco/bbox_mAP_75: 0.3270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1980  coco/bbox_mAP_l: 0.3580  data_time: 0.0033  time: 0.0188
2025/05/11 21:29:49 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:29:53 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:55  time: 0.1612  data_time: 0.0047  memory: 2033  grad_norm: 4429.6276  loss: 1217.0403  loss_cls: 74.0708  loss_conf: 215.7589  loss_xy: 907.1626  loss_wh: 20.0480
2025/05/11 21:30:01 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:46  time: 0.1542  data_time: 0.0022  memory: 2033  grad_norm: 4741.1566  loss: 1213.6081  loss_cls: 85.3571  loss_conf: 215.7474  loss_xy: 891.9627  loss_wh: 20.5408
2025/05/11 21:30:07 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:30:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:30:09 - mmengine - INFO - bbox_mAP_copypaste: 0.200 0.467 0.120 -1.000 0.123 0.217
2025/05/11 21:30:09 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2000  coco/bbox_mAP_50: 0.4670  coco/bbox_mAP_75: 0.1200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1230  coco/bbox_mAP_l: 0.2170  data_time: 0.0054  time: 0.0193
2025/05/11 21:30:17 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:31  time: 0.1589  data_time: 0.0046  memory: 2033  grad_norm: 4737.8816  loss: 1163.5306  loss_cls: 79.9911  loss_conf: 188.1862  loss_xy: 870.9849  loss_wh: 24.3684
2025/05/11 21:30:25 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:23  time: 0.1546  data_time: 0.0023  memory: 2033  grad_norm: 4161.7691  loss: 1107.3617  loss_cls: 54.6790  loss_conf: 168.2183  loss_xy: 864.0020  loss_wh: 20.4623
2025/05/11 21:30:31 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:30:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:30:34 - mmengine - INFO - bbox_mAP_copypaste: 0.304 0.582 0.268 -1.000 0.177 0.328
2025/05/11 21:30:34 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3040  coco/bbox_mAP_50: 0.5820  coco/bbox_mAP_75: 0.2680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.3280  data_time: 0.0046  time: 0.0208
2025/05/11 21:30:42 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:08  time: 0.1608  data_time: 0.0046  memory: 2033  grad_norm: 4280.9131  loss: 1087.6885  loss_cls: 56.6870  loss_conf: 134.5584  loss_xy: 873.2581  loss_wh: 23.1850
2025/05/11 21:30:50 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:00  time: 0.1566  data_time: 0.0024  memory: 2033  grad_norm: 4468.3366  loss: 1106.6551  loss_cls: 57.6851  loss_conf: 144.2731  loss_xy: 875.9421  loss_wh: 28.7548
2025/05/11 21:30:56 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:30:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:30:59 - mmengine - INFO - bbox_mAP_copypaste: 0.283 0.605 0.190 -1.000 0.179 0.307
2025/05/11 21:30:59 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2830  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.1900  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.3070  data_time: 0.0041  time: 0.0188
2025/05/11 21:31:07 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:45  time: 0.1586  data_time: 0.0046  memory: 2033  grad_norm: 3857.9007  loss: 1058.5104  loss_cls: 39.6694  loss_conf: 115.4150  loss_xy: 877.9239  loss_wh: 25.5020
2025/05/11 21:31:15 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:37  time: 0.1563  data_time: 0.0023  memory: 2033  grad_norm: 3788.7600  loss: 1079.9543  loss_cls: 35.2610  loss_conf: 120.0922  loss_xy: 898.7917  loss_wh: 25.8094
2025/05/11 21:31:21 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:31:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:31:23 - mmengine - INFO - bbox_mAP_copypaste: 0.262 0.541 0.199 -1.000 0.156 0.290
2025/05/11 21:31:23 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2620  coco/bbox_mAP_50: 0.5410  coco/bbox_mAP_75: 0.1990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1560  coco/bbox_mAP_l: 0.2900  data_time: 0.0043  time: 0.0190
2025/05/11 21:31:31 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:22  time: 0.1608  data_time: 0.0045  memory: 2033  grad_norm: 4387.0715  loss: 1089.5804  loss_cls: 51.9899  loss_conf: 112.1811  loss_xy: 904.9123  loss_wh: 20.4971
2025/05/11 21:31:39 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:14  time: 0.1565  data_time: 0.0022  memory: 2033  grad_norm: 3742.1524  loss: 1017.2751  loss_cls: 31.4156  loss_conf: 97.1065  loss_xy: 866.9069  loss_wh: 21.8461
2025/05/11 21:31:45 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:31:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:31:48 - mmengine - INFO - bbox_mAP_copypaste: 0.253 0.535 0.214 -1.000 0.114 0.276
2025/05/11 21:31:48 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2530  coco/bbox_mAP_50: 0.5350  coco/bbox_mAP_75: 0.2140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1140  coco/bbox_mAP_l: 0.2760  data_time: 0.0046  time: 0.0189
2025/05/11 21:31:56 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:00  time: 0.1596  data_time: 0.0046  memory: 2033  grad_norm: 3733.9888  loss: 1015.6867  loss_cls: 34.1892  loss_conf: 86.4143  loss_xy: 870.4378  loss_wh: 24.6454
2025/05/11 21:32:04 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:52  time: 0.1571  data_time: 0.0023  memory: 2033  grad_norm: 4005.8432  loss: 983.2453  loss_cls: 39.7455  loss_conf: 76.9386  loss_xy: 842.8548  loss_wh: 23.7063
2025/05/11 21:32:10 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:32:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:32:13 - mmengine - INFO - bbox_mAP_copypaste: 0.287 0.566 0.231 -1.000 0.181 0.310
2025/05/11 21:32:13 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2870  coco/bbox_mAP_50: 0.5660  coco/bbox_mAP_75: 0.2310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1810  coco/bbox_mAP_l: 0.3100  data_time: 0.0048  time: 0.0190
2025/05/11 21:32:21 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:37  time: 0.1601  data_time: 0.0045  memory: 2033  grad_norm: 3013.1296  loss: 962.9503  loss_cls: 20.2488  loss_conf: 59.9751  loss_xy: 859.1412  loss_wh: 23.5851
2025/05/11 21:32:28 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.1547  data_time: 0.0021  memory: 2033  grad_norm: 3358.6120  loss: 981.1094  loss_cls: 21.0405  loss_conf: 65.9879  loss_xy: 868.5489  loss_wh: 25.5321
2025/05/11 21:32:35 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:32:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:32:37 - mmengine - INFO - bbox_mAP_copypaste: 0.293 0.590 0.240 -1.000 0.179 0.322
2025/05/11 21:32:37 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2930  coco/bbox_mAP_50: 0.5900  coco/bbox_mAP_75: 0.2400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.3220  data_time: 0.0042  time: 0.0191
2025/05/11 21:32:44 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:32:45 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:14  time: 0.1618  data_time: 0.0047  memory: 2033  grad_norm: 3522.2293  loss: 990.0053  loss_cls: 27.7529  loss_conf: 55.5729  loss_xy: 879.8526  loss_wh: 26.8269
2025/05/11 21:32:53 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:06  time: 0.1614  data_time: 0.0023  memory: 2033  grad_norm: 3405.9197  loss: 997.1672  loss_cls: 22.6292  loss_conf: 63.1472  loss_xy: 885.0221  loss_wh: 26.3686
2025/05/11 21:33:00 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:33:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:33:02 - mmengine - INFO - bbox_mAP_copypaste: 0.257 0.496 0.234 -1.000 0.147 0.286
2025/05/11 21:33:02 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2570  coco/bbox_mAP_50: 0.4960  coco/bbox_mAP_75: 0.2340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2860  data_time: 0.0051  time: 0.0197
2025/05/11 21:33:10 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:52  time: 0.1574  data_time: 0.0044  memory: 2033  grad_norm: 3256.0892  loss: 920.9118  loss_cls: 19.3119  loss_conf: 52.4606  loss_xy: 824.0834  loss_wh: 25.0559
2025/05/11 21:33:18 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:44  time: 0.1573  data_time: 0.0023  memory: 2033  grad_norm: 3822.1208  loss: 1015.5847  loss_cls: 28.2933  loss_conf: 55.9207  loss_xy: 896.6702  loss_wh: 34.7006
2025/05/11 21:33:24 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:33:25 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:33:27 - mmengine - INFO - bbox_mAP_copypaste: 0.249 0.548 0.164 -1.000 0.177 0.266
2025/05/11 21:33:27 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2490  coco/bbox_mAP_50: 0.5480  coco/bbox_mAP_75: 0.1640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.2660  data_time: 0.0042  time: 0.0188
2025/05/11 21:33:35 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:29  time: 0.1601  data_time: 0.0045  memory: 2033  grad_norm: 2996.2801  loss: 941.5988  loss_cls: 20.9612  loss_conf: 39.8070  loss_xy: 856.5035  loss_wh: 24.3271
2025/05/11 21:33:42 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:21  time: 0.1537  data_time: 0.0023  memory: 2033  grad_norm: 2979.8888  loss: 905.0023  loss_cls: 15.9452  loss_conf: 43.3641  loss_xy: 817.2098  loss_wh: 28.4831
2025/05/11 21:33:49 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:33:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:33:51 - mmengine - INFO - bbox_mAP_copypaste: 0.276 0.558 0.228 -1.000 0.139 0.305
2025/05/11 21:33:51 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2760  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.2280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1390  coco/bbox_mAP_l: 0.3050  data_time: 0.0046  time: 0.0192
2025/05/11 21:33:59 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:06  time: 0.1588  data_time: 0.0047  memory: 2033  grad_norm: 3053.7967  loss: 956.6552  loss_cls: 14.1829  loss_conf: 40.2198  loss_xy: 870.3011  loss_wh: 31.9515
2025/05/11 21:34:07 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:58  time: 0.1571  data_time: 0.0023  memory: 2033  grad_norm: 3434.6621  loss: 962.4137  loss_cls: 22.1962  loss_conf: 45.3133  loss_xy: 867.2287  loss_wh: 27.6755
2025/05/11 21:34:13 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:34:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:34:16 - mmengine - INFO - bbox_mAP_copypaste: 0.319 0.610 0.286 -1.000 0.186 0.347
2025/05/11 21:34:16 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3190  coco/bbox_mAP_50: 0.6100  coco/bbox_mAP_75: 0.2860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1860  coco/bbox_mAP_l: 0.3470  data_time: 0.0045  time: 0.0190
2025/05/11 21:34:24 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:44  time: 0.1575  data_time: 0.0046  memory: 2033  grad_norm: 2615.8432  loss: 921.7695  loss_cls: 11.7651  loss_conf: 36.7369  loss_xy: 852.8405  loss_wh: 20.4270
2025/05/11 21:34:31 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:36  time: 0.1550  data_time: 0.0022  memory: 2033  grad_norm: 3179.9140  loss: 960.0203  loss_cls: 14.3062  loss_conf: 41.1670  loss_xy: 868.6841  loss_wh: 35.8630
2025/05/11 21:34:38 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:34:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:34:40 - mmengine - INFO - bbox_mAP_copypaste: 0.300 0.561 0.279 -1.000 0.186 0.328
2025/05/11 21:34:40 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3000  coco/bbox_mAP_50: 0.5610  coco/bbox_mAP_75: 0.2790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1860  coco/bbox_mAP_l: 0.3280  data_time: 0.0049  time: 0.0192
2025/05/11 21:34:48 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:21  time: 0.1609  data_time: 0.0046  memory: 2033  grad_norm: 2746.4582  loss: 909.5915  loss_cls: 13.6652  loss_conf: 32.5035  loss_xy: 841.6807  loss_wh: 21.7421
2025/05/11 21:34:56 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:13  time: 0.1585  data_time: 0.0023  memory: 2033  grad_norm: 2649.8572  loss: 902.0587  loss_cls: 10.7266  loss_conf: 31.8032  loss_xy: 829.6949  loss_wh: 29.8340
2025/05/11 21:35:03 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:35:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:35:05 - mmengine - INFO - bbox_mAP_copypaste: 0.277 0.568 0.220 -1.000 0.134 0.309
2025/05/11 21:35:05 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2770  coco/bbox_mAP_50: 0.5680  coco/bbox_mAP_75: 0.2200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1340  coco/bbox_mAP_l: 0.3090  data_time: 0.0047  time: 0.0193
2025/05/11 21:35:13 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:59  time: 0.1561  data_time: 0.0046  memory: 2033  grad_norm: 2773.0573  loss: 900.4097  loss_cls: 14.5921  loss_conf: 31.3733  loss_xy: 832.1796  loss_wh: 22.2646
2025/05/11 21:35:21 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.1559  data_time: 0.0023  memory: 2033  grad_norm: 3336.2658  loss: 948.7187  loss_cls: 18.8590  loss_conf: 41.2780  loss_xy: 864.5079  loss_wh: 24.0738
2025/05/11 21:35:27 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:35:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:35:29 - mmengine - INFO - bbox_mAP_copypaste: 0.281 0.586 0.222 -1.000 0.159 0.315
2025/05/11 21:35:29 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2810  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.2220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1590  coco/bbox_mAP_l: 0.3150  data_time: 0.0048  time: 0.0196
2025/05/11 21:35:37 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:36  time: 0.1564  data_time: 0.0045  memory: 2033  grad_norm: 2444.6492  loss: 904.1945  loss_cls: 10.7240  loss_conf: 27.0120  loss_xy: 840.3815  loss_wh: 26.0769
2025/05/11 21:35:38 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:35:45 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:28  time: 0.1553  data_time: 0.0021  memory: 2033  grad_norm: 2516.0784  loss: 914.0623  loss_cls: 10.2250  loss_conf: 30.7249  loss_xy: 848.5410  loss_wh: 24.5714
2025/05/11 21:35:51 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:35:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:35:54 - mmengine - INFO - bbox_mAP_copypaste: 0.302 0.614 0.235 -1.000 0.189 0.325
2025/05/11 21:35:54 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3020  coco/bbox_mAP_50: 0.6140  coco/bbox_mAP_75: 0.2350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1890  coco/bbox_mAP_l: 0.3250  data_time: 0.0032  time: 0.0193
2025/05/11 21:36:02 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1607  data_time: 0.0046  memory: 2033  grad_norm: 2434.5933  loss: 934.6478  loss_cls: 14.0442  loss_conf: 22.6061  loss_xy: 867.5305  loss_wh: 30.4670
2025/05/11 21:36:10 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1598  data_time: 0.0023  memory: 2033  grad_norm: 2444.3541  loss: 949.7841  loss_cls: 10.4359  loss_conf: 26.4957  loss_xy: 883.1558  loss_wh: 29.6967
2025/05/11 21:36:16 - mmengine - INFO - Exp name: yolov3_pt_bal_20250511_212330
2025/05/11 21:36:16 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 21:36:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:36:21 - mmengine - INFO - bbox_mAP_copypaste: 0.292 0.546 0.284 -1.000 0.194 0.316
2025/05/11 21:36:21 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2920  coco/bbox_mAP_50: 0.5460  coco/bbox_mAP_75: 0.2840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.3160  data_time: 0.0025  time: 0.0212
