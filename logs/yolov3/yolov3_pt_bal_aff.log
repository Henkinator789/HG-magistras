2025/05/11 23:06:19 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1302309873
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1302309873
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 23:06:19 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    416,
                    416,
                ), type='Resize'),
                dict(type='RandomAffine'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 23:06:20 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 23:06:20 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 23:06:22 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 23:06:22 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 23:06:22 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 23:06:22 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 23:06:22 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 23:06:22 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 23:06:34 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:25  time: 0.2501  data_time: 0.0917  memory: 2033  grad_norm: 2648.1698  loss: 4186.0409  loss_cls: 1338.9371  loss_conf: 1811.3513  loss_xy: 908.0793  loss_wh: 127.6732
2025/05/11 23:06:42 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:13:43  time: 0.1489  data_time: 0.0022  memory: 2033  grad_norm: 3359.7071  loss: 3074.3067  loss_cls: 832.2801  loss_conf: 1238.4380  loss_xy: 910.9189  loss_wh: 92.6697
2025/05/11 23:06:48 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:06:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:06:59 - mmengine - INFO - bbox_mAP_copypaste: 0.076 0.182 0.036 -1.000 0.057 0.077
2025/05/11 23:06:59 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0760  coco/bbox_mAP_50: 0.1820  coco/bbox_mAP_75: 0.0360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0570  coco/bbox_mAP_l: 0.0770  data_time: 0.1664  time: 0.1874
2025/05/11 23:07:00 - mmengine - INFO - The best checkpoint with 0.0760 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 23:07:08 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:04  time: 0.1610  data_time: 0.0047  memory: 2033  grad_norm: 2889.6728  loss: 2489.8156  loss_cls: 658.6864  loss_conf: 909.5769  loss_xy: 863.7794  loss_wh: 57.7728
2025/05/11 23:07:15 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:29  time: 0.1479  data_time: 0.0021  memory: 2033  grad_norm: 2956.0103  loss: 2258.7380  loss_cls: 562.2730  loss_conf: 827.7277  loss_xy: 812.5927  loss_wh: 56.1447
2025/05/11 23:07:21 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:07:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:07:24 - mmengine - INFO - bbox_mAP_copypaste: 0.131 0.285 0.095 -1.000 0.107 0.132
2025/05/11 23:07:24 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1310  coco/bbox_mAP_50: 0.2850  coco/bbox_mAP_75: 0.0950  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1070  coco/bbox_mAP_l: 0.1320  data_time: 0.0038  time: 0.0192
2025/05/11 23:07:24 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 23:07:25 - mmengine - INFO - The best checkpoint with 0.1310 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 23:07:33 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:10:53  time: 0.1590  data_time: 0.0058  memory: 2033  grad_norm: 2955.8153  loss: 2099.7163  loss_cls: 492.8651  loss_conf: 775.8757  loss_xy: 781.5110  loss_wh: 49.4645
2025/05/11 23:07:41 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:10:35  time: 0.1499  data_time: 0.0023  memory: 2033  grad_norm: 3047.0940  loss: 2076.9783  loss_cls: 466.6131  loss_conf: 763.4188  loss_xy: 800.6906  loss_wh: 46.2557
2025/05/11 23:07:47 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:07:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:07:49 - mmengine - INFO - bbox_mAP_copypaste: 0.184 0.358 0.166 -1.000 0.122 0.193
2025/05/11 23:07:49 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1840  coco/bbox_mAP_50: 0.3580  coco/bbox_mAP_75: 0.1660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1220  coco/bbox_mAP_l: 0.1930  data_time: 0.0043  time: 0.0194
2025/05/11 23:07:49 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 23:07:50 - mmengine - INFO - The best checkpoint with 0.1840 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 23:07:58 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:12  time: 0.1585  data_time: 0.0047  memory: 2033  grad_norm: 3133.4045  loss: 1929.5867  loss_cls: 409.3036  loss_conf: 711.3318  loss_xy: 763.1542  loss_wh: 45.7971
2025/05/11 23:08:06 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:00  time: 0.1544  data_time: 0.0023  memory: 2033  grad_norm: 3223.6742  loss: 1963.1836  loss_cls: 401.8139  loss_conf: 716.1846  loss_xy: 792.7627  loss_wh: 52.4223
2025/05/11 23:08:12 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:08:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:08:15 - mmengine - INFO - bbox_mAP_copypaste: 0.177 0.384 0.131 -1.000 0.139 0.185
2025/05/11 23:08:15 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1770  coco/bbox_mAP_50: 0.3840  coco/bbox_mAP_75: 0.1310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1390  coco/bbox_mAP_l: 0.1850  data_time: 0.0043  time: 0.0189
2025/05/11 23:08:22 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:09:41  time: 0.1572  data_time: 0.0047  memory: 2033  grad_norm: 3334.1615  loss: 1985.2000  loss_cls: 350.2833  loss_conf: 740.9944  loss_xy: 843.7623  loss_wh: 50.1601
2025/05/11 23:08:30 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:29  time: 0.1466  data_time: 0.0022  memory: 2033  grad_norm: 3196.7116  loss: 1662.6497  loss_cls: 274.1411  loss_conf: 633.4629  loss_xy: 713.5039  loss_wh: 41.5418
2025/05/11 23:08:36 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:08:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:08:38 - mmengine - INFO - bbox_mAP_copypaste: 0.135 0.439 0.027 -1.000 0.110 0.141
2025/05/11 23:08:38 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.1350  coco/bbox_mAP_50: 0.4390  coco/bbox_mAP_75: 0.0270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1100  coco/bbox_mAP_l: 0.1410  data_time: 0.0030  time: 0.0196
2025/05/11 23:08:46 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:11  time: 0.1534  data_time: 0.0047  memory: 2033  grad_norm: 3181.0222  loss: 1758.4918  loss_cls: 293.3759  loss_conf: 655.5547  loss_xy: 766.7589  loss_wh: 42.8023
2025/05/11 23:08:53 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:01  time: 0.1469  data_time: 0.0023  memory: 2033  grad_norm: 3159.4203  loss: 1716.2175  loss_cls: 298.0302  loss_conf: 633.4150  loss_xy: 745.6460  loss_wh: 39.1263
2025/05/11 23:09:00 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:09:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:09:02 - mmengine - INFO - bbox_mAP_copypaste: 0.188 0.423 0.114 -1.000 0.136 0.200
2025/05/11 23:09:02 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.1880  coco/bbox_mAP_50: 0.4230  coco/bbox_mAP_75: 0.1140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1360  coco/bbox_mAP_l: 0.2000  data_time: 0.0046  time: 0.0197
2025/05/11 23:09:02 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 23:09:03 - mmengine - INFO - The best checkpoint with 0.1880 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 23:09:12 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:08:45  time: 0.1612  data_time: 0.0047  memory: 2033  grad_norm: 3120.1770  loss: 1785.6251  loss_cls: 305.4903  loss_conf: 650.3121  loss_xy: 786.1022  loss_wh: 43.7205
2025/05/11 23:09:19 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:36  time: 0.1473  data_time: 0.0022  memory: 2033  grad_norm: 3209.6671  loss: 1699.5605  loss_cls: 274.1940  loss_conf: 645.3752  loss_xy: 739.5147  loss_wh: 40.4766
2025/05/11 23:09:25 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:09:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:09:27 - mmengine - INFO - bbox_mAP_copypaste: 0.245 0.486 0.206 -1.000 0.198 0.257
2025/05/11 23:09:27 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2450  coco/bbox_mAP_50: 0.4860  coco/bbox_mAP_75: 0.2060  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1980  coco/bbox_mAP_l: 0.2570  data_time: 0.0042  time: 0.0195
2025/05/11 23:09:27 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 23:09:29 - mmengine - INFO - The best checkpoint with 0.2450 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 23:09:31 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:09:37 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:21  time: 0.1603  data_time: 0.0048  memory: 2033  grad_norm: 3432.5505  loss: 1857.0924  loss_cls: 301.8715  loss_conf: 690.8550  loss_xy: 814.7092  loss_wh: 49.6567
2025/05/11 23:09:44 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:12  time: 0.1494  data_time: 0.0023  memory: 2033  grad_norm: 2931.9521  loss: 1715.6592  loss_cls: 271.1922  loss_conf: 638.6099  loss_xy: 764.0392  loss_wh: 41.8179
2025/05/11 23:09:50 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:09:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:09:53 - mmengine - INFO - bbox_mAP_copypaste: 0.260 0.539 0.220 -1.000 0.206 0.272
2025/05/11 23:09:53 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.2600  coco/bbox_mAP_50: 0.5390  coco/bbox_mAP_75: 0.2200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2060  coco/bbox_mAP_l: 0.2720  data_time: 0.0036  time: 0.0192
2025/05/11 23:09:53 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/11 23:09:54 - mmengine - INFO - The best checkpoint with 0.2600 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/11 23:10:02 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:07:57  time: 0.1622  data_time: 0.0049  memory: 2033  grad_norm: 2913.6736  loss: 1689.7995  loss_cls: 257.3903  loss_conf: 617.7916  loss_xy: 772.8126  loss_wh: 41.8049
2025/05/11 23:10:10 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:07:49  time: 0.1510  data_time: 0.0024  memory: 2033  grad_norm: 2977.6488  loss: 1616.4742  loss_cls: 247.7037  loss_conf: 612.9280  loss_xy: 712.8881  loss_wh: 42.9545
2025/05/11 23:10:16 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:10:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:10:18 - mmengine - INFO - bbox_mAP_copypaste: 0.201 0.484 0.101 -1.000 0.167 0.212
2025/05/11 23:10:18 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.2010  coco/bbox_mAP_50: 0.4840  coco/bbox_mAP_75: 0.1010  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.2120  data_time: 0.0049  time: 0.0197
2025/05/11 23:10:26 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:34  time: 0.1540  data_time: 0.0048  memory: 2033  grad_norm: 3223.1819  loss: 1651.7234  loss_cls: 250.4616  loss_conf: 599.3633  loss_xy: 758.1726  loss_wh: 43.7259
2025/05/11 23:10:34 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:25  time: 0.1502  data_time: 0.0023  memory: 2033  grad_norm: 2791.9791  loss: 1696.2794  loss_cls: 256.8581  loss_conf: 620.5512  loss_xy: 772.3697  loss_wh: 46.5004
2025/05/11 23:10:40 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:10:41 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:10:42 - mmengine - INFO - bbox_mAP_copypaste: 0.191 0.495 0.084 -1.000 0.126 0.201
2025/05/11 23:10:42 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.1910  coco/bbox_mAP_50: 0.4950  coco/bbox_mAP_75: 0.0840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1260  coco/bbox_mAP_l: 0.2010  data_time: 0.0044  time: 0.0197
2025/05/11 23:10:50 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:10  time: 0.1534  data_time: 0.0047  memory: 2033  grad_norm: 2809.6744  loss: 1740.5297  loss_cls: 274.8675  loss_conf: 634.3887  loss_xy: 791.0639  loss_wh: 40.2095
2025/05/11 23:10:57 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:02  time: 0.1498  data_time: 0.0022  memory: 2033  grad_norm: 2603.3593  loss: 1641.1226  loss_cls: 231.0845  loss_conf: 608.2105  loss_xy: 756.2520  loss_wh: 45.5756
2025/05/11 23:11:04 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:11:05 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:11:06 - mmengine - INFO - bbox_mAP_copypaste: 0.192 0.455 0.107 -1.000 0.124 0.218
2025/05/11 23:11:06 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.1920  coco/bbox_mAP_50: 0.4550  coco/bbox_mAP_75: 0.1070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1240  coco/bbox_mAP_l: 0.2180  data_time: 0.0046  time: 0.0210
2025/05/11 23:11:14 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:06:48  time: 0.1558  data_time: 0.0046  memory: 2033  grad_norm: 2599.3927  loss: 1563.2935  loss_cls: 223.7732  loss_conf: 575.7984  loss_xy: 720.6080  loss_wh: 43.1139
2025/05/11 23:11:21 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:39  time: 0.1477  data_time: 0.0022  memory: 2033  grad_norm: 2640.2727  loss: 1634.6010  loss_cls: 249.0764  loss_conf: 598.2901  loss_xy: 745.3483  loss_wh: 41.8862
2025/05/11 23:11:27 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:11:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:11:30 - mmengine - INFO - bbox_mAP_copypaste: 0.195 0.488 0.115 -1.000 0.068 0.216
2025/05/11 23:11:30 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.1950  coco/bbox_mAP_50: 0.4880  coco/bbox_mAP_75: 0.1150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0680  coco/bbox_mAP_l: 0.2160  data_time: 0.0059  time: 0.0207
2025/05/11 23:11:38 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:25  time: 0.1540  data_time: 0.0047  memory: 2033  grad_norm: 2370.9109  loss: 1552.0177  loss_cls: 221.7416  loss_conf: 557.7408  loss_xy: 728.6570  loss_wh: 43.8783
2025/05/11 23:11:45 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:17  time: 0.1503  data_time: 0.0024  memory: 2033  grad_norm: 3169.4611  loss: 1693.4689  loss_cls: 248.6788  loss_conf: 617.9455  loss_xy: 780.5903  loss_wh: 46.2543
2025/05/11 23:11:51 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:11:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:11:54 - mmengine - INFO - bbox_mAP_copypaste: 0.262 0.577 0.175 -1.000 0.177 0.276
2025/05/11 23:11:54 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2620  coco/bbox_mAP_50: 0.5770  coco/bbox_mAP_75: 0.1750  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.2760  data_time: 0.0041  time: 0.0193
2025/05/11 23:11:54 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_8.pth is removed
2025/05/11 23:11:55 - mmengine - INFO - The best checkpoint with 0.2620 coco/bbox_mAP at 13 epoch is saved to best_coco_bbox_mAP_epoch_13.pth.
2025/05/11 23:12:03 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:03  time: 0.1617  data_time: 0.0049  memory: 2033  grad_norm: 2835.1613  loss: 1615.9743  loss_cls: 241.1768  loss_conf: 586.0369  loss_xy: 745.3871  loss_wh: 43.3735
2025/05/11 23:12:11 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:05:55  time: 0.1524  data_time: 0.0023  memory: 2033  grad_norm: 2709.3609  loss: 1660.6982  loss_cls: 239.4930  loss_conf: 600.2284  loss_xy: 770.6209  loss_wh: 50.3559
2025/05/11 23:12:17 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:12:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:12:19 - mmengine - INFO - bbox_mAP_copypaste: 0.184 0.524 0.082 -1.000 0.200 0.187
2025/05/11 23:12:19 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.1840  coco/bbox_mAP_50: 0.5240  coco/bbox_mAP_75: 0.0820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.1870  data_time: 0.0044  time: 0.0202
2025/05/11 23:12:24 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:12:27 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:41  time: 0.1532  data_time: 0.0047  memory: 2033  grad_norm: 2513.7468  loss: 1577.9786  loss_cls: 226.3260  loss_conf: 575.2346  loss_xy: 733.8645  loss_wh: 42.5535
2025/05/11 23:12:35 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:33  time: 0.1520  data_time: 0.0022  memory: 2033  grad_norm: 2373.0958  loss: 1695.7495  loss_cls: 244.2184  loss_conf: 611.5663  loss_xy: 794.1754  loss_wh: 45.7894
2025/05/11 23:12:41 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:12:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:12:43 - mmengine - INFO - bbox_mAP_copypaste: 0.283 0.552 0.243 -1.000 0.205 0.303
2025/05/11 23:12:43 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2830  coco/bbox_mAP_50: 0.5520  coco/bbox_mAP_75: 0.2430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2050  coco/bbox_mAP_l: 0.3030  data_time: 0.0044  time: 0.0195
2025/05/11 23:12:43 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_13.pth is removed
2025/05/11 23:12:44 - mmengine - INFO - The best checkpoint with 0.2830 coco/bbox_mAP at 15 epoch is saved to best_coco_bbox_mAP_epoch_15.pth.
2025/05/11 23:12:52 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:19  time: 0.1576  data_time: 0.0048  memory: 2033  grad_norm: 2324.4968  loss: 1593.2040  loss_cls: 229.2041  loss_conf: 582.2255  loss_xy: 743.5452  loss_wh: 38.2292
2025/05/11 23:13:00 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:11  time: 0.1481  data_time: 0.0022  memory: 2033  grad_norm: 2330.1199  loss: 1535.3606  loss_cls: 201.7439  loss_conf: 563.5765  loss_xy: 726.2516  loss_wh: 43.7885
2025/05/11 23:13:06 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:13:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:13:08 - mmengine - INFO - bbox_mAP_copypaste: 0.297 0.579 0.258 -1.000 0.218 0.314
2025/05/11 23:13:08 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2970  coco/bbox_mAP_50: 0.5790  coco/bbox_mAP_75: 0.2580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3140  data_time: 0.0033  time: 0.0189
2025/05/11 23:13:08 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_15.pth is removed
2025/05/11 23:13:10 - mmengine - INFO - The best checkpoint with 0.2970 coco/bbox_mAP at 16 epoch is saved to best_coco_bbox_mAP_epoch_16.pth.
2025/05/11 23:13:18 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:04:57  time: 0.1592  data_time: 0.0050  memory: 2033  grad_norm: 2695.6156  loss: 1686.6595  loss_cls: 234.2317  loss_conf: 613.7782  loss_xy: 790.0234  loss_wh: 48.6262
2025/05/11 23:13:25 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:04:49  time: 0.1491  data_time: 0.0021  memory: 2033  grad_norm: 2600.6153  loss: 1577.7994  loss_cls: 236.1202  loss_conf: 562.4616  loss_xy: 740.8819  loss_wh: 38.3356
2025/05/11 23:13:31 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:13:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:13:33 - mmengine - INFO - bbox_mAP_copypaste: 0.224 0.529 0.118 -1.000 0.138 0.235
2025/05/11 23:13:33 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2240  coco/bbox_mAP_50: 0.5290  coco/bbox_mAP_75: 0.1180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1380  coco/bbox_mAP_l: 0.2350  data_time: 0.0038  time: 0.0193
2025/05/11 23:13:41 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:34  time: 0.1590  data_time: 0.0047  memory: 2033  grad_norm: 2517.0334  loss: 1687.4601  loss_cls: 238.7444  loss_conf: 600.5702  loss_xy: 803.4891  loss_wh: 44.6564
2025/05/11 23:13:49 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:27  time: 0.1493  data_time: 0.0040  memory: 2033  grad_norm: 2421.3250  loss: 1570.0987  loss_cls: 212.6280  loss_conf: 562.7217  loss_xy: 750.4966  loss_wh: 44.2524
2025/05/11 23:13:55 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:13:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:13:57 - mmengine - INFO - bbox_mAP_copypaste: 0.246 0.486 0.200 -1.000 0.196 0.259
2025/05/11 23:13:57 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2460  coco/bbox_mAP_50: 0.4860  coco/bbox_mAP_75: 0.2000  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1960  coco/bbox_mAP_l: 0.2590  data_time: 0.0045  time: 0.0196
2025/05/11 23:14:05 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:12  time: 0.1576  data_time: 0.0050  memory: 2033  grad_norm: 2393.1544  loss: 1522.0248  loss_cls: 213.3573  loss_conf: 549.6940  loss_xy: 718.0710  loss_wh: 40.9025
2025/05/11 23:14:13 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:05  time: 0.1509  data_time: 0.0023  memory: 2033  grad_norm: 2212.9658  loss: 1604.0494  loss_cls: 220.2708  loss_conf: 581.4128  loss_xy: 762.4303  loss_wh: 39.9355
2025/05/11 23:14:19 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:14:20 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:14:21 - mmengine - INFO - bbox_mAP_copypaste: 0.251 0.501 0.205 -1.000 0.144 0.285
2025/05/11 23:14:21 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2510  coco/bbox_mAP_50: 0.5010  coco/bbox_mAP_75: 0.2050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1440  coco/bbox_mAP_l: 0.2850  data_time: 0.0045  time: 0.0193
2025/05/11 23:14:29 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:03:51  time: 0.1534  data_time: 0.0047  memory: 2033  grad_norm: 2567.8361  loss: 1652.1108  loss_cls: 234.8722  loss_conf: 587.4637  loss_xy: 781.4910  loss_wh: 48.2840
2025/05/11 23:14:36 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:43  time: 0.1474  data_time: 0.0028  memory: 2033  grad_norm: 2093.8333  loss: 1496.4274  loss_cls: 181.5909  loss_conf: 549.3315  loss_xy: 722.7213  loss_wh: 42.7838
2025/05/11 23:14:43 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:14:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:14:45 - mmengine - INFO - bbox_mAP_copypaste: 0.180 0.466 0.078 -1.000 0.148 0.191
2025/05/11 23:14:45 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.1800  coco/bbox_mAP_50: 0.4660  coco/bbox_mAP_75: 0.0780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1480  coco/bbox_mAP_l: 0.1910  data_time: 0.0050  time: 0.0194
2025/05/11 23:14:53 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.1575  data_time: 0.0046  memory: 2033  grad_norm: 2456.6353  loss: 1598.5114  loss_cls: 218.7162  loss_conf: 566.5565  loss_xy: 773.7278  loss_wh: 39.5109
2025/05/11 23:15:01 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:21  time: 0.1502  data_time: 0.0023  memory: 2033  grad_norm: 2315.8292  loss: 1644.2229  loss_cls: 228.9854  loss_conf: 584.9408  loss_xy: 788.6119  loss_wh: 41.6847
2025/05/11 23:15:07 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:15:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:15:09 - mmengine - INFO - bbox_mAP_copypaste: 0.192 0.493 0.108 -1.000 0.155 0.204
2025/05/11 23:15:09 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.1920  coco/bbox_mAP_50: 0.4930  coco/bbox_mAP_75: 0.1080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1550  coco/bbox_mAP_l: 0.2040  data_time: 0.0046  time: 0.0196
2025/05/11 23:15:15 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:15:17 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:07  time: 0.1553  data_time: 0.0048  memory: 2033  grad_norm: 2225.6613  loss: 1572.8123  loss_cls: 190.6961  loss_conf: 570.8335  loss_xy: 770.7693  loss_wh: 40.5134
2025/05/11 23:15:25 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:02:59  time: 0.1489  data_time: 0.0031  memory: 2033  grad_norm: 2051.3812  loss: 1521.4134  loss_cls: 205.0942  loss_conf: 548.4414  loss_xy: 731.8477  loss_wh: 36.0301
2025/05/11 23:15:31 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:15:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:15:33 - mmengine - INFO - bbox_mAP_copypaste: 0.249 0.552 0.147 -1.000 0.168 0.264
2025/05/11 23:15:33 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2490  coco/bbox_mAP_50: 0.5520  coco/bbox_mAP_75: 0.1470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.2640  data_time: 0.0042  time: 0.0190
2025/05/11 23:15:41 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:45  time: 0.1537  data_time: 0.0047  memory: 2033  grad_norm: 2081.5937  loss: 1550.0996  loss_cls: 198.4595  loss_conf: 555.2173  loss_xy: 760.3613  loss_wh: 36.0615
2025/05/11 23:15:48 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:37  time: 0.1490  data_time: 0.0034  memory: 2033  grad_norm: 2751.9890  loss: 1554.3868  loss_cls: 205.0389  loss_conf: 557.7613  loss_xy: 751.1346  loss_wh: 40.4521
2025/05/11 23:15:54 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:15:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:15:57 - mmengine - INFO - bbox_mAP_copypaste: 0.176 0.477 0.085 -1.000 0.203 0.180
2025/05/11 23:15:57 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.1760  coco/bbox_mAP_50: 0.4770  coco/bbox_mAP_75: 0.0850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.1800  data_time: 0.0055  time: 0.0198
2025/05/11 23:16:05 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:23  time: 0.1567  data_time: 0.0048  memory: 2033  grad_norm: 2079.2075  loss: 1514.4720  loss_cls: 198.5364  loss_conf: 539.3069  loss_xy: 736.1016  loss_wh: 40.5271
2025/05/11 23:16:12 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:16  time: 0.1479  data_time: 0.0034  memory: 2033  grad_norm: 2022.7543  loss: 1457.4879  loss_cls: 189.0343  loss_conf: 522.2137  loss_xy: 712.0024  loss_wh: 34.2374
2025/05/11 23:16:18 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:16:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:16:21 - mmengine - INFO - bbox_mAP_copypaste: 0.246 0.540 0.166 -1.000 0.169 0.264
2025/05/11 23:16:21 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2460  coco/bbox_mAP_50: 0.5400  coco/bbox_mAP_75: 0.1660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1690  coco/bbox_mAP_l: 0.2640  data_time: 0.0050  time: 0.0196
2025/05/11 23:16:29 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:02  time: 0.1545  data_time: 0.0047  memory: 2033  grad_norm: 2121.8691  loss: 1497.0786  loss_cls: 181.8389  loss_conf: 530.0535  loss_xy: 746.4565  loss_wh: 38.7298
2025/05/11 23:16:36 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:54  time: 0.1521  data_time: 0.0022  memory: 2033  grad_norm: 2204.7667  loss: 1550.4607  loss_cls: 202.6075  loss_conf: 554.7902  loss_xy: 757.7292  loss_wh: 35.3338
2025/05/11 23:16:42 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:16:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:16:45 - mmengine - INFO - bbox_mAP_copypaste: 0.216 0.417 0.201 -1.000 0.117 0.240
2025/05/11 23:16:45 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2160  coco/bbox_mAP_50: 0.4170  coco/bbox_mAP_75: 0.2010  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1170  coco/bbox_mAP_l: 0.2400  data_time: 0.0038  time: 0.0193
2025/05/11 23:16:52 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:40  time: 0.1525  data_time: 0.0076  memory: 2033  grad_norm: 2437.3827  loss: 1473.3191  loss_cls: 192.4238  loss_conf: 523.8839  loss_xy: 727.2767  loss_wh: 29.7347
2025/05/11 23:17:00 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:32  time: 0.1493  data_time: 0.0023  memory: 2033  grad_norm: 2242.7020  loss: 1547.3041  loss_cls: 200.7609  loss_conf: 542.6788  loss_xy: 755.4926  loss_wh: 48.3717
2025/05/11 23:17:06 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:17:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:17:08 - mmengine - INFO - bbox_mAP_copypaste: 0.265 0.545 0.213 -1.000 0.166 0.286
2025/05/11 23:17:08 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2650  coco/bbox_mAP_50: 0.5450  coco/bbox_mAP_75: 0.2130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1660  coco/bbox_mAP_l: 0.2860  data_time: 0.0040  time: 0.0184
2025/05/11 23:17:16 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:18  time: 0.1553  data_time: 0.0049  memory: 2033  grad_norm: 2110.7795  loss: 1533.4558  loss_cls: 192.4745  loss_conf: 540.8042  loss_xy: 763.7691  loss_wh: 36.4080
2025/05/11 23:17:24 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:11  time: 0.1501  data_time: 0.0045  memory: 2033  grad_norm: 1975.8889  loss: 1468.0374  loss_cls: 181.3651  loss_conf: 524.7512  loss_xy: 727.7522  loss_wh: 34.1689
2025/05/11 23:17:30 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:17:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:17:32 - mmengine - INFO - bbox_mAP_copypaste: 0.289 0.597 0.219 -1.000 0.190 0.310
2025/05/11 23:17:32 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2890  coco/bbox_mAP_50: 0.5970  coco/bbox_mAP_75: 0.2190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.3100  data_time: 0.0040  time: 0.0199
2025/05/11 23:17:40 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:57  time: 0.1535  data_time: 0.0048  memory: 2033  grad_norm: 1975.3183  loss: 1470.0288  loss_cls: 179.6666  loss_conf: 520.8246  loss_xy: 736.5781  loss_wh: 32.9595
2025/05/11 23:17:48 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:49  time: 0.1494  data_time: 0.0022  memory: 2033  grad_norm: 2171.6798  loss: 1539.9633  loss_cls: 182.7562  loss_conf: 547.7540  loss_xy: 770.8139  loss_wh: 38.6392
2025/05/11 23:17:54 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:17:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:17:56 - mmengine - INFO - bbox_mAP_copypaste: 0.254 0.567 0.161 -1.000 0.213 0.266
2025/05/11 23:17:56 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2540  coco/bbox_mAP_50: 0.5670  coco/bbox_mAP_75: 0.1610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.2660  data_time: 0.0039  time: 0.0192
2025/05/11 23:18:04 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:35  time: 0.1536  data_time: 0.0046  memory: 2033  grad_norm: 2115.1472  loss: 1449.4636  loss_cls: 171.0985  loss_conf: 521.7367  loss_xy: 720.7000  loss_wh: 35.9282
2025/05/11 23:18:04 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:18:11 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:27  time: 0.1511  data_time: 0.0023  memory: 2033  grad_norm: 2207.5172  loss: 1594.3942  loss_cls: 210.3814  loss_conf: 564.8209  loss_xy: 784.4857  loss_wh: 34.7061
2025/05/11 23:18:17 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:18:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:18:20 - mmengine - INFO - bbox_mAP_copypaste: 0.206 0.554 0.067 -1.000 0.149 0.219
2025/05/11 23:18:20 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2060  coco/bbox_mAP_50: 0.5540  coco/bbox_mAP_75: 0.0670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1490  coco/bbox_mAP_l: 0.2190  data_time: 0.0057  time: 0.0198
2025/05/11 23:18:28 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:13  time: 0.1536  data_time: 0.0046  memory: 2033  grad_norm: 2061.7890  loss: 1443.5443  loss_cls: 176.4119  loss_conf: 500.3575  loss_xy: 729.5311  loss_wh: 37.2438
2025/05/11 23:18:35 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1554  data_time: 0.0023  memory: 2033  grad_norm: 2124.0468  loss: 1577.3051  loss_cls: 186.7937  loss_conf: 558.5806  loss_xy: 790.8551  loss_wh: 41.0756
2025/05/11 23:18:41 - mmengine - INFO - Exp name: yolov3_pt_bal_aff_20250511_230615
2025/05/11 23:18:41 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 23:18:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 23:18:46 - mmengine - INFO - bbox_mAP_copypaste: 0.240 0.465 0.213 -1.000 0.193 0.255
2025/05/11 23:18:46 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2400  coco/bbox_mAP_50: 0.4650  coco/bbox_mAP_75: 0.2130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.2550  data_time: 0.0034  time: 0.0208
