2025/05/11 11:12:10 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 952275534
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 952275534
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 11:12:11 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                mean=[
                    0,
                    0,
                    0,
                ],
                ratio_range=(
                    1,
                    2,
                ),
                to_rgb=True,
                type='Expand'),
            dict(
                min_crop_size=0.3,
                min_ious=(
                    0.4,
                    0.5,
                    0.6,
                    0.7,
                    0.8,
                    0.9,
                ),
                type='MinIoURandomCrop'),
            dict(
                keep_ratio=True,
                scale=[
                    (
                        320,
                        320,
                    ),
                    (
                        416,
                        416,
                    ),
                ],
                type='RandomResize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(mean=[
        0,
        0,
        0,
    ], ratio_range=(
        1,
        2,
    ), to_rgb=True, type='Expand'),
    dict(
        min_crop_size=0.3,
        min_ious=(
            0.4,
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
        ),
        type='MinIoURandomCrop'),
    dict(
        keep_ratio=True,
        scale=[
            (
                320,
                320,
            ),
            (
                416,
                416,
            ),
        ],
        type='RandomResize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 11:12:13 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 11:12:13 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 11:12:14 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 11:12:14 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 11:12:15 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 11:12:15 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 11:12:15 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 11:12:15 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 11:12:36 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:28:52  time: 0.4145  data_time: 0.2251  memory: 2031  grad_norm: 2404.8341  loss: 3752.3003  loss_cls: 1191.7428  loss_conf: 1676.6921  loss_xy: 816.6440  loss_wh: 67.2213
2025/05/11 11:12:51 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:24:48  time: 0.3064  data_time: 0.1564  memory: 2031  grad_norm: 3213.0644  loss: 2633.8304  loss_cls: 682.6483  loss_conf: 1095.5264  loss_xy: 811.8124  loss_wh: 43.8433
2025/05/11 11:13:03 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:13:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:13:16 - mmengine - INFO - bbox_mAP_copypaste: 0.090 0.192 0.060 -1.000 0.072 0.091
2025/05/11 11:13:16 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0900  coco/bbox_mAP_50: 0.1920  coco/bbox_mAP_75: 0.0600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0720  coco/bbox_mAP_l: 0.0910  data_time: 0.1794  time: 0.2068
2025/05/11 11:13:17 - mmengine - INFO - The best checkpoint with 0.0900 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 11:13:34 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:23:02  time: 0.3401  data_time: 0.1767  memory: 2031  grad_norm: 2895.8030  loss: 2227.8302  loss_cls: 566.1400  loss_conf: 846.1015  loss_xy: 782.2819  loss_wh: 33.3068
2025/05/11 11:13:48 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:21:54  time: 0.2802  data_time: 0.1321  memory: 2031  grad_norm: 2909.4245  loss: 2041.0155  loss_cls: 538.1478  loss_conf: 746.6399  loss_xy: 724.3732  loss_wh: 31.8547
2025/05/11 11:13:59 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:14:00 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:14:02 - mmengine - INFO - bbox_mAP_copypaste: 0.161 0.313 0.141 -1.000 0.098 0.172
2025/05/11 11:14:02 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1610  coco/bbox_mAP_50: 0.3130  coco/bbox_mAP_75: 0.1410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0980  coco/bbox_mAP_l: 0.1720  data_time: 0.0053  time: 0.0207
2025/05/11 11:14:02 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 11:14:03 - mmengine - INFO - The best checkpoint with 0.1610 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 11:14:18 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:20:33  time: 0.2899  data_time: 0.1379  memory: 2031  grad_norm: 3294.2354  loss: 1853.1997  loss_cls: 440.8103  loss_conf: 691.9741  loss_xy: 695.0232  loss_wh: 25.3921
2025/05/11 11:14:32 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:20:03  time: 0.2876  data_time: 0.1413  memory: 2031  grad_norm: 3020.0781  loss: 1885.1685  loss_cls: 445.4306  loss_conf: 674.1739  loss_xy: 738.9267  loss_wh: 26.6373
2025/05/11 11:14:44 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:14:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:14:46 - mmengine - INFO - bbox_mAP_copypaste: 0.192 0.367 0.173 -1.000 0.111 0.208
2025/05/11 11:14:46 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1920  coco/bbox_mAP_50: 0.3670  coco/bbox_mAP_75: 0.1730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1110  coco/bbox_mAP_l: 0.2080  data_time: 0.0046  time: 0.0201
2025/05/11 11:14:46 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 11:14:47 - mmengine - INFO - The best checkpoint with 0.1920 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 11:15:01 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:19:10  time: 0.2802  data_time: 0.1321  memory: 2031  grad_norm: 3043.4167  loss: 1649.9249  loss_cls: 376.8763  loss_conf: 609.8424  loss_xy: 640.0563  loss_wh: 23.1499
2025/05/11 11:15:15 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:18:40  time: 0.2659  data_time: 0.1206  memory: 2031  grad_norm: 3027.1075  loss: 1710.4947  loss_cls: 373.5742  loss_conf: 618.0110  loss_xy: 691.9671  loss_wh: 26.9424
2025/05/11 11:15:26 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:15:27 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:15:28 - mmengine - INFO - bbox_mAP_copypaste: 0.192 0.398 0.149 -1.000 0.170 0.207
2025/05/11 11:15:28 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1920  coco/bbox_mAP_50: 0.3980  coco/bbox_mAP_75: 0.1490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1700  coco/bbox_mAP_l: 0.2070  data_time: 0.0044  time: 0.0196
2025/05/11 11:15:42 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:17:55  time: 0.2653  data_time: 0.1187  memory: 2031  grad_norm: 2873.0087  loss: 1584.2397  loss_cls: 321.7862  loss_conf: 578.6759  loss_xy: 658.6088  loss_wh: 25.1687
2025/05/11 11:15:55 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:17:32  time: 0.2658  data_time: 0.1219  memory: 2031  grad_norm: 3072.1236  loss: 1643.5055  loss_cls: 347.0954  loss_conf: 590.5847  loss_xy: 682.6456  loss_wh: 23.1797
2025/05/11 11:16:07 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:16:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:16:09 - mmengine - INFO - bbox_mAP_copypaste: 0.224 0.490 0.132 -1.000 0.131 0.239
2025/05/11 11:16:09 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2240  coco/bbox_mAP_50: 0.4900  coco/bbox_mAP_75: 0.1320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1310  coco/bbox_mAP_l: 0.2390  data_time: 0.0053  time: 0.0202
2025/05/11 11:16:09 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 11:16:10 - mmengine - INFO - The best checkpoint with 0.2240 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 11:16:24 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:16:57  time: 0.2703  data_time: 0.1184  memory: 2031  grad_norm: 2926.4156  loss: 1680.3702  loss_cls: 331.3473  loss_conf: 615.9522  loss_xy: 707.2987  loss_wh: 25.7721
2025/05/11 11:16:38 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:16:38  time: 0.2711  data_time: 0.1256  memory: 2031  grad_norm: 2848.0802  loss: 1651.1662  loss_cls: 337.4745  loss_conf: 583.6653  loss_xy: 705.7845  loss_wh: 24.2419
2025/05/11 11:16:49 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:16:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:16:51 - mmengine - INFO - bbox_mAP_copypaste: 0.243 0.469 0.209 -1.000 0.177 0.257
2025/05/11 11:16:51 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2430  coco/bbox_mAP_50: 0.4690  coco/bbox_mAP_75: 0.2090  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.2570  data_time: 0.0045  time: 0.0193
2025/05/11 11:16:51 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 11:16:52 - mmengine - INFO - The best checkpoint with 0.2430 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 11:17:07 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:16:07  time: 0.2836  data_time: 0.1315  memory: 2031  grad_norm: 3174.1000  loss: 1750.3749  loss_cls: 369.4790  loss_conf: 602.9610  loss_xy: 755.1872  loss_wh: 22.7478
2025/05/11 11:17:20 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:15:51  time: 0.2781  data_time: 0.1339  memory: 2031  grad_norm: 3139.7721  loss: 1511.6625  loss_cls: 296.2839  loss_conf: 539.8379  loss_xy: 652.6893  loss_wh: 22.8514
2025/05/11 11:17:31 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:17:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:17:34 - mmengine - INFO - bbox_mAP_copypaste: 0.291 0.538 0.280 -1.000 0.210 0.305
2025/05/11 11:17:34 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2910  coco/bbox_mAP_50: 0.5380  coco/bbox_mAP_75: 0.2800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2100  coco/bbox_mAP_l: 0.3050  data_time: 0.0045  time: 0.0193
2025/05/11 11:17:34 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 11:17:35 - mmengine - INFO - The best checkpoint with 0.2910 coco/bbox_mAP at 7 epoch is saved to best_coco_bbox_mAP_epoch_7.pth.
2025/05/11 11:17:39 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:17:49 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:15:18  time: 0.2756  data_time: 0.1289  memory: 2031  grad_norm: 2672.1667  loss: 1452.6341  loss_cls: 265.2839  loss_conf: 526.0438  loss_xy: 639.9575  loss_wh: 21.3489
2025/05/11 11:18:02 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:15:01  time: 0.2693  data_time: 0.1262  memory: 2031  grad_norm: 3352.7295  loss: 1559.4908  loss_cls: 302.2692  loss_conf: 555.7706  loss_xy: 677.7554  loss_wh: 23.6957
2025/05/11 11:18:13 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:18:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:18:16 - mmengine - INFO - bbox_mAP_copypaste: 0.365 0.660 0.376 -1.000 0.220 0.388
2025/05/11 11:18:16 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3650  coco/bbox_mAP_50: 0.6600  coco/bbox_mAP_75: 0.3760  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2200  coco/bbox_mAP_l: 0.3880  data_time: 0.0042  time: 0.0192
2025/05/11 11:18:16 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_7.pth is removed
2025/05/11 11:18:17 - mmengine - INFO - The best checkpoint with 0.3650 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/11 11:18:31 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:14:33  time: 0.2780  data_time: 0.1234  memory: 2031  grad_norm: 2894.1807  loss: 1543.8843  loss_cls: 275.5605  loss_conf: 561.2342  loss_xy: 679.5042  loss_wh: 27.5855
2025/05/11 11:18:44 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:14:16  time: 0.2660  data_time: 0.1268  memory: 2031  grad_norm: 3237.9711  loss: 1530.8501  loss_cls: 316.5788  loss_conf: 521.8769  loss_xy: 667.0258  loss_wh: 25.3687
2025/05/11 11:18:55 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:18:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:18:58 - mmengine - INFO - bbox_mAP_copypaste: 0.290 0.561 0.265 -1.000 0.194 0.310
2025/05/11 11:18:58 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.2900  coco/bbox_mAP_50: 0.5610  coco/bbox_mAP_75: 0.2650  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.3100  data_time: 0.0050  time: 0.0195
2025/05/11 11:19:12 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:13:48  time: 0.2797  data_time: 0.1310  memory: 2031  grad_norm: 3062.7948  loss: 1512.6725  loss_cls: 275.0970  loss_conf: 540.7456  loss_xy: 661.8058  loss_wh: 35.0241
2025/05/11 11:19:26 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:13:33  time: 0.2770  data_time: 0.1296  memory: 2031  grad_norm: 2797.5016  loss: 1477.9063  loss_cls: 268.6831  loss_conf: 527.1248  loss_xy: 659.3559  loss_wh: 22.7424
2025/05/11 11:19:37 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:19:38 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:19:39 - mmengine - INFO - bbox_mAP_copypaste: 0.283 0.552 0.245 -1.000 0.193 0.302
2025/05/11 11:19:39 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2830  coco/bbox_mAP_50: 0.5520  coco/bbox_mAP_75: 0.2450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.3020  data_time: 0.0037  time: 0.0186
2025/05/11 11:19:54 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:13:06  time: 0.2823  data_time: 0.1325  memory: 2031  grad_norm: 2797.5124  loss: 1527.1313  loss_cls: 282.5878  loss_conf: 538.6838  loss_xy: 683.4069  loss_wh: 22.4528
2025/05/11 11:20:07 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:12:51  time: 0.2711  data_time: 0.1278  memory: 2031  grad_norm: 2831.2579  loss: 1497.0255  loss_cls: 261.2514  loss_conf: 538.4077  loss_xy: 669.4560  loss_wh: 27.9105
2025/05/11 11:20:18 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:20:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:20:21 - mmengine - INFO - bbox_mAP_copypaste: 0.200 0.490 0.122 -1.000 0.111 0.235
2025/05/11 11:20:21 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2000  coco/bbox_mAP_50: 0.4900  coco/bbox_mAP_75: 0.1220  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1110  coco/bbox_mAP_l: 0.2350  data_time: 0.0041  time: 0.0197
2025/05/11 11:20:34 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:12:22  time: 0.2601  data_time: 0.1129  memory: 2031  grad_norm: 3098.0399  loss: 1483.2294  loss_cls: 285.5246  loss_conf: 516.3061  loss_xy: 658.7647  loss_wh: 22.6340
2025/05/11 11:20:48 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:12:07  time: 0.2747  data_time: 0.1300  memory: 2031  grad_norm: 2778.1391  loss: 1514.2169  loss_cls: 289.2744  loss_conf: 525.5319  loss_xy: 676.2841  loss_wh: 23.1266
2025/05/11 11:20:59 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:21:00 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:21:01 - mmengine - INFO - bbox_mAP_copypaste: 0.329 0.602 0.314 -1.000 0.185 0.355
2025/05/11 11:21:01 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3290  coco/bbox_mAP_50: 0.6020  coco/bbox_mAP_75: 0.3140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1850  coco/bbox_mAP_l: 0.3550  data_time: 0.0045  time: 0.0196
2025/05/11 11:21:15 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:11:41  time: 0.2807  data_time: 0.1343  memory: 2031  grad_norm: 2732.5308  loss: 1471.4900  loss_cls: 283.8049  loss_conf: 514.5460  loss_xy: 650.2007  loss_wh: 22.9383
2025/05/11 11:21:29 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:11:27  time: 0.2765  data_time: 0.1321  memory: 2031  grad_norm: 2663.7655  loss: 1478.0938  loss_cls: 256.7879  loss_conf: 533.7471  loss_xy: 665.7288  loss_wh: 21.8301
2025/05/11 11:21:40 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:21:41 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:21:43 - mmengine - INFO - bbox_mAP_copypaste: 0.354 0.618 0.381 -1.000 0.185 0.378
2025/05/11 11:21:43 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3540  coco/bbox_mAP_50: 0.6180  coco/bbox_mAP_75: 0.3810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1850  coco/bbox_mAP_l: 0.3780  data_time: 0.0048  time: 0.0201
2025/05/11 11:21:56 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:11:00  time: 0.2715  data_time: 0.1216  memory: 2031  grad_norm: 2762.2534  loss: 1489.5026  loss_cls: 259.6157  loss_conf: 523.9944  loss_xy: 680.9836  loss_wh: 24.9089
2025/05/11 11:22:10 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:10:46  time: 0.2820  data_time: 0.1361  memory: 2031  grad_norm: 2782.7511  loss: 1484.1595  loss_cls: 250.7418  loss_conf: 529.4749  loss_xy: 677.4446  loss_wh: 26.4983
2025/05/11 11:22:22 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:22:23 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:22:25 - mmengine - INFO - bbox_mAP_copypaste: 0.325 0.626 0.290 -1.000 0.222 0.346
2025/05/11 11:22:25 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3250  coco/bbox_mAP_50: 0.6260  coco/bbox_mAP_75: 0.2900  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2220  coco/bbox_mAP_l: 0.3460  data_time: 0.0045  time: 0.0194
2025/05/11 11:22:32 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:22:39 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:10:20  time: 0.2817  data_time: 0.1310  memory: 2031  grad_norm: 2704.3773  loss: 1459.5137  loss_cls: 261.4952  loss_conf: 508.3613  loss_xy: 665.3455  loss_wh: 24.3117
2025/05/11 11:22:52 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:10:05  time: 0.2582  data_time: 0.1131  memory: 2031  grad_norm: 2532.1400  loss: 1472.0638  loss_cls: 262.8446  loss_conf: 510.8278  loss_xy: 667.2794  loss_wh: 31.1121
2025/05/11 11:23:02 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:23:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:23:05 - mmengine - INFO - bbox_mAP_copypaste: 0.252 0.576 0.147 -1.000 0.150 0.268
2025/05/11 11:23:05 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2520  coco/bbox_mAP_50: 0.5760  coco/bbox_mAP_75: 0.1470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2680  data_time: 0.0040  time: 0.0200
2025/05/11 11:23:19 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:09:39  time: 0.2778  data_time: 0.1298  memory: 2031  grad_norm: 2665.4534  loss: 1511.9816  loss_cls: 264.4684  loss_conf: 537.2343  loss_xy: 685.8540  loss_wh: 24.4248
2025/05/11 11:23:33 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:09:24  time: 0.2748  data_time: 0.1308  memory: 2031  grad_norm: 2469.0694  loss: 1423.9469  loss_cls: 239.1358  loss_conf: 499.2549  loss_xy: 663.1197  loss_wh: 22.4365
2025/05/11 11:23:44 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:23:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:23:47 - mmengine - INFO - bbox_mAP_copypaste: 0.318 0.592 0.305 -1.000 0.234 0.339
2025/05/11 11:23:47 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3180  coco/bbox_mAP_50: 0.5920  coco/bbox_mAP_75: 0.3050  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2340  coco/bbox_mAP_l: 0.3390  data_time: 0.0051  time: 0.0196
2025/05/11 11:24:00 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:08:59  time: 0.2719  data_time: 0.1276  memory: 2031  grad_norm: 2832.1461  loss: 1453.3649  loss_cls: 266.2256  loss_conf: 500.0352  loss_xy: 663.0912  loss_wh: 24.0129
2025/05/11 11:24:14 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:08:44  time: 0.2750  data_time: 0.1311  memory: 2031  grad_norm: 2308.6712  loss: 1430.7250  loss_cls: 235.5313  loss_conf: 504.2464  loss_xy: 658.8260  loss_wh: 32.1213
2025/05/11 11:24:24 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:24:25 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:24:27 - mmengine - INFO - bbox_mAP_copypaste: 0.295 0.556 0.268 -1.000 0.215 0.315
2025/05/11 11:24:27 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2950  coco/bbox_mAP_50: 0.5560  coco/bbox_mAP_75: 0.2680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3150  data_time: 0.0038  time: 0.0191
2025/05/11 11:24:41 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:08:18  time: 0.2782  data_time: 0.1292  memory: 2031  grad_norm: 2442.6794  loss: 1439.2695  loss_cls: 249.0091  loss_conf: 504.6340  loss_xy: 659.8563  loss_wh: 25.7701
2025/05/11 11:24:54 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:08:04  time: 0.2715  data_time: 0.1240  memory: 2031  grad_norm: 2223.5437  loss: 1362.3059  loss_cls: 229.4961  loss_conf: 478.3964  loss_xy: 630.6004  loss_wh: 23.8131
2025/05/11 11:25:06 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:25:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:25:08 - mmengine - INFO - bbox_mAP_copypaste: 0.322 0.603 0.297 -1.000 0.196 0.341
2025/05/11 11:25:08 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3220  coco/bbox_mAP_50: 0.6030  coco/bbox_mAP_75: 0.2970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1960  coco/bbox_mAP_l: 0.3410  data_time: 0.0034  time: 0.0191
2025/05/11 11:25:23 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:07:39  time: 0.2990  data_time: 0.1298  memory: 2031  grad_norm: 2191.5406  loss: 1347.0648  loss_cls: 222.3950  loss_conf: 475.6405  loss_xy: 627.1170  loss_wh: 21.9123
2025/05/11 11:25:38 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:07:25  time: 0.2865  data_time: 0.1190  memory: 2031  grad_norm: 2257.7045  loss: 1474.1539  loss_cls: 257.0515  loss_conf: 503.9585  loss_xy: 680.3594  loss_wh: 32.7846
2025/05/11 11:25:50 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:25:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:25:52 - mmengine - INFO - bbox_mAP_copypaste: 0.298 0.586 0.267 -1.000 0.233 0.304
2025/05/11 11:25:52 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2980  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.2670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2330  coco/bbox_mAP_l: 0.3040  data_time: 0.0041  time: 0.0206
2025/05/11 11:26:06 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:07:00  time: 0.2840  data_time: 0.1169  memory: 2031  grad_norm: 2850.2621  loss: 1460.8354  loss_cls: 253.0242  loss_conf: 510.0145  loss_xy: 672.6186  loss_wh: 25.1781
2025/05/11 11:26:21 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:06:46  time: 0.2885  data_time: 0.1387  memory: 2031  grad_norm: 2535.8357  loss: 1441.3599  loss_cls: 255.1061  loss_conf: 498.1296  loss_xy: 666.0983  loss_wh: 22.0258
2025/05/11 11:26:33 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:26:34 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:26:36 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.614 0.343 -1.000 0.225 0.364
2025/05/11 11:26:36 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6140  coco/bbox_mAP_75: 0.3430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2250  coco/bbox_mAP_l: 0.3640  data_time: 0.0038  time: 0.0210
2025/05/11 11:26:51 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:06:22  time: 0.3049  data_time: 0.1242  memory: 2031  grad_norm: 2092.0685  loss: 1422.2315  loss_cls: 241.3602  loss_conf: 494.2827  loss_xy: 665.6198  loss_wh: 20.9688
2025/05/11 11:27:06 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:06:08  time: 0.3006  data_time: 0.1334  memory: 2031  grad_norm: 2802.3950  loss: 1406.8428  loss_cls: 254.0314  loss_conf: 486.2361  loss_xy: 646.8919  loss_wh: 19.6835
2025/05/11 11:27:17 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:27:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:27:20 - mmengine - INFO - bbox_mAP_copypaste: 0.336 0.636 0.313 -1.000 0.218 0.357
2025/05/11 11:27:20 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.3360  coco/bbox_mAP_50: 0.6360  coco/bbox_mAP_75: 0.3130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2180  coco/bbox_mAP_l: 0.3570  data_time: 0.0044  time: 0.0208
2025/05/11 11:27:31 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:27:34 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:05:43  time: 0.2914  data_time: 0.1237  memory: 2031  grad_norm: 2113.3042  loss: 1398.6332  loss_cls: 231.6699  loss_conf: 489.7352  loss_xy: 655.8450  loss_wh: 21.3832
2025/05/11 11:27:49 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:05:29  time: 0.2926  data_time: 0.1225  memory: 2031  grad_norm: 2201.2314  loss: 1383.7482  loss_cls: 235.4178  loss_conf: 479.5409  loss_xy: 648.5596  loss_wh: 20.2298
2025/05/11 11:28:00 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:28:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:28:03 - mmengine - INFO - bbox_mAP_copypaste: 0.340 0.605 0.339 -1.000 0.229 0.359
2025/05/11 11:28:03 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3400  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.3390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2290  coco/bbox_mAP_l: 0.3590  data_time: 0.0048  time: 0.0206
2025/05/11 11:28:18 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:05:03  time: 0.2949  data_time: 0.1264  memory: 2031  grad_norm: 1991.8178  loss: 1366.8833  loss_cls: 233.9105  loss_conf: 475.3858  loss_xy: 636.3602  loss_wh: 21.2267
2025/05/11 11:28:32 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:04:49  time: 0.2848  data_time: 0.1172  memory: 2031  grad_norm: 1978.2453  loss: 1398.8751  loss_cls: 223.4226  loss_conf: 491.3861  loss_xy: 661.8867  loss_wh: 22.1797
2025/05/11 11:28:43 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:28:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:28:46 - mmengine - INFO - bbox_mAP_copypaste: 0.287 0.566 0.238 -1.000 0.193 0.307
2025/05/11 11:28:46 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2870  coco/bbox_mAP_50: 0.5660  coco/bbox_mAP_75: 0.2380  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.3070  data_time: 0.0042  time: 0.0206
2025/05/11 11:29:01 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:04:24  time: 0.2936  data_time: 0.1180  memory: 2031  grad_norm: 2340.5590  loss: 1474.6848  loss_cls: 234.7709  loss_conf: 520.1183  loss_xy: 693.2921  loss_wh: 26.5035
2025/05/11 11:29:15 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:04:10  time: 0.2818  data_time: 0.1161  memory: 2031  grad_norm: 2049.9676  loss: 1457.5702  loss_cls: 233.5155  loss_conf: 506.5778  loss_xy: 695.2832  loss_wh: 22.1938
2025/05/11 11:29:26 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:29:27 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:29:28 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.598 0.333 -1.000 0.230 0.343
2025/05/11 11:29:28 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.5980  coco/bbox_mAP_75: 0.3330  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3430  data_time: 0.0034  time: 0.0192
2025/05/11 11:29:42 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:03:44  time: 0.2687  data_time: 0.1266  memory: 2031  grad_norm: 1964.3719  loss: 1310.6387  loss_cls: 200.0570  loss_conf: 454.8628  loss_xy: 638.1595  loss_wh: 17.5594
2025/05/11 11:29:56 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:03:30  time: 0.2822  data_time: 0.1419  memory: 2031  grad_norm: 2060.1038  loss: 1361.2189  loss_cls: 215.7899  loss_conf: 473.5303  loss_xy: 652.3425  loss_wh: 19.5563
2025/05/11 11:30:07 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:30:08 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:30:10 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.639 0.355 -1.000 0.264 0.376
2025/05/11 11:30:10 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6390  coco/bbox_mAP_75: 0.3550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2640  coco/bbox_mAP_l: 0.3760  data_time: 0.0053  time: 0.0196
2025/05/11 11:30:24 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:03:04  time: 0.2782  data_time: 0.1344  memory: 2031  grad_norm: 2300.6018  loss: 1336.2217  loss_cls: 208.3821  loss_conf: 465.9287  loss_xy: 643.2358  loss_wh: 18.6750
2025/05/11 11:30:38 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:02:50  time: 0.2902  data_time: 0.1476  memory: 2031  grad_norm: 6618.1615  loss: 1494.0598  loss_cls: 278.9445  loss_conf: 530.2314  loss_xy: 659.7115  loss_wh: 25.1724
2025/05/11 11:30:49 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:30:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:30:52 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.601 0.360 -1.000 0.258 0.363
2025/05/11 11:30:52 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6010  coco/bbox_mAP_75: 0.3600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2580  coco/bbox_mAP_l: 0.3630  data_time: 0.0054  time: 0.0198
2025/05/11 11:31:05 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:02:24  time: 0.2751  data_time: 0.1272  memory: 2031  grad_norm: 1994.1497  loss: 1362.8141  loss_cls: 222.1732  loss_conf: 481.1609  loss_xy: 641.4339  loss_wh: 18.0461
2025/05/11 11:31:19 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:02:10  time: 0.2756  data_time: 0.1333  memory: 2031  grad_norm: 1924.7243  loss: 1353.2144  loss_cls: 211.1645  loss_conf: 470.4186  loss_xy: 654.3512  loss_wh: 17.2801
2025/05/11 11:31:30 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:31:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:31:33 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.623 0.374 -1.000 0.236 0.376
2025/05/11 11:31:33 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6230  coco/bbox_mAP_75: 0.3740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2360  coco/bbox_mAP_l: 0.3760  data_time: 0.0054  time: 0.0196
2025/05/11 11:31:46 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:44  time: 0.2680  data_time: 0.1251  memory: 2031  grad_norm: 3409.5682  loss: 1378.9869  loss_cls: 232.8118  loss_conf: 469.9636  loss_xy: 653.0120  loss_wh: 23.1996
2025/05/11 11:32:00 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:01:30  time: 0.2746  data_time: 0.1316  memory: 2031  grad_norm: 2182.9023  loss: 1418.5013  loss_cls: 236.4526  loss_conf: 486.6975  loss_xy: 677.6094  loss_wh: 17.7418
2025/05/11 11:32:11 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:32:12 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:32:14 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.633 0.334 -1.000 0.227 0.366
2025/05/11 11:32:14 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6330  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2270  coco/bbox_mAP_l: 0.3660  data_time: 0.0040  time: 0.0202
2025/05/11 11:32:27 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:01:05  time: 0.2732  data_time: 0.1261  memory: 2031  grad_norm: 2143.0599  loss: 1490.8511  loss_cls: 251.9209  loss_conf: 512.3770  loss_xy: 706.8374  loss_wh: 19.7159
2025/05/11 11:32:28 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:32:41 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.2733  data_time: 0.1322  memory: 2031  grad_norm: 1940.1717  loss: 1362.3974  loss_cls: 210.3494  loss_conf: 475.6148  loss_xy: 658.8852  loss_wh: 17.5479
2025/05/11 11:32:52 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:32:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:32:54 - mmengine - INFO - bbox_mAP_copypaste: 0.309 0.583 0.291 -1.000 0.216 0.329
2025/05/11 11:32:54 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3090  coco/bbox_mAP_50: 0.5830  coco/bbox_mAP_75: 0.2910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2160  coco/bbox_mAP_l: 0.3290  data_time: 0.0051  time: 0.0194
2025/05/11 11:33:09 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:25  time: 0.2843  data_time: 0.1390  memory: 2031  grad_norm: 2096.8846  loss: 1369.0329  loss_cls: 216.1496  loss_conf: 473.0946  loss_xy: 658.7288  loss_wh: 21.0599
2025/05/11 11:33:23 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:11  time: 0.2823  data_time: 0.1422  memory: 2031  grad_norm: 3150.9056  loss: 1323.0802  loss_cls: 221.5331  loss_conf: 459.6412  loss_xy: 622.1689  loss_wh: 19.7370
2025/05/11 11:33:34 - mmengine - INFO - Exp name: yolov3_pt_df_20250511_111205
2025/05/11 11:33:34 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 11:33:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:33:39 - mmengine - INFO - bbox_mAP_copypaste: 0.323 0.604 0.307 -1.000 0.212 0.349
2025/05/11 11:33:39 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3230  coco/bbox_mAP_50: 0.6040  coco/bbox_mAP_75: 0.3070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3490  data_time: 0.0037  time: 0.0202
