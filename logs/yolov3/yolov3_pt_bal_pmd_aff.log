2025/05/12 00:11:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1364968551
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1364968551
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/12 00:11:38 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    416,
                    416,
                ), type='Resize'),
                dict(type='PhotoMetricDistortion'),
                dict(type='RandomAffine'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/12 00:11:39 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/12 00:11:39 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/12 00:11:40 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/12 00:11:40 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/12 00:11:40 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/12 00:11:40 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/12 00:11:40 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/12 00:11:40 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/12 00:11:53 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:51  time: 0.2563  data_time: 0.0965  memory: 2033  grad_norm: 2756.1659  loss: 4216.1231  loss_cls: 1351.5066  loss_conf: 1818.3475  loss_xy: 929.3419  loss_wh: 116.9270
2025/05/12 00:12:01 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:12  time: 0.1563  data_time: 0.0035  memory: 2033  grad_norm: 3617.3246  loss: 3203.0824  loss_cls: 894.8172  loss_conf: 1276.7920  loss_xy: 936.2319  loss_wh: 95.2413
2025/05/12 00:12:08 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:12:17 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:12:18 - mmengine - INFO - bbox_mAP_copypaste: 0.065 0.194 0.013 -1.000 0.047 0.066
2025/05/12 00:12:18 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0650  coco/bbox_mAP_50: 0.1940  coco/bbox_mAP_75: 0.0130  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0470  coco/bbox_mAP_l: 0.0660  data_time: 0.1666  time: 0.1882
2025/05/12 00:12:20 - mmengine - INFO - The best checkpoint with 0.0650 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/12 00:12:28 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:30  time: 0.1645  data_time: 0.0063  memory: 2033  grad_norm: 2973.7947  loss: 2502.3018  loss_cls: 640.9829  loss_conf: 924.8535  loss_xy: 862.8510  loss_wh: 73.6144
2025/05/12 00:12:36 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:59  time: 0.1589  data_time: 0.0075  memory: 2033  grad_norm: 2988.6680  loss: 2272.8288  loss_cls: 582.5119  loss_conf: 845.8887  loss_xy: 790.3051  loss_wh: 54.1232
2025/05/12 00:12:42 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:12:43 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:12:45 - mmengine - INFO - bbox_mAP_copypaste: 0.144 0.282 0.126 -1.000 0.107 0.149
2025/05/12 00:12:45 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1440  coco/bbox_mAP_50: 0.2820  coco/bbox_mAP_75: 0.1260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1070  coco/bbox_mAP_l: 0.1490  data_time: 0.0036  time: 0.0192
2025/05/12 00:12:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/12 00:12:46 - mmengine - INFO - The best checkpoint with 0.1440 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/12 00:12:54 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:21  time: 0.1633  data_time: 0.0073  memory: 2033  grad_norm: 3149.6364  loss: 2044.2416  loss_cls: 457.9370  loss_conf: 770.2894  loss_xy: 767.3995  loss_wh: 48.6156
2025/05/12 00:13:02 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:03  time: 0.1571  data_time: 0.0057  memory: 2033  grad_norm: 3105.6556  loss: 2104.9406  loss_cls: 483.9938  loss_conf: 770.3750  loss_xy: 802.3231  loss_wh: 48.2487
2025/05/12 00:13:08 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:13:09 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:13:11 - mmengine - INFO - bbox_mAP_copypaste: 0.111 0.313 0.041 -1.000 0.097 0.113
2025/05/12 00:13:11 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1110  coco/bbox_mAP_50: 0.3130  coco/bbox_mAP_75: 0.0410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0970  coco/bbox_mAP_l: 0.1130  data_time: 0.0041  time: 0.0192
2025/05/12 00:13:19 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:37  time: 0.1602  data_time: 0.0065  memory: 2033  grad_norm: 3137.6870  loss: 2037.1486  loss_cls: 445.5044  loss_conf: 744.8095  loss_xy: 801.0722  loss_wh: 45.7625
2025/05/12 00:13:27 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:25  time: 0.1589  data_time: 0.0107  memory: 2033  grad_norm: 3090.8994  loss: 1971.2604  loss_cls: 420.2685  loss_conf: 729.6696  loss_xy: 779.3217  loss_wh: 42.0006
2025/05/12 00:13:33 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:13:34 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:13:36 - mmengine - INFO - bbox_mAP_copypaste: 0.174 0.348 0.151 -1.000 0.122 0.186
2025/05/12 00:13:36 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.1740  coco/bbox_mAP_50: 0.3480  coco/bbox_mAP_75: 0.1510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1220  coco/bbox_mAP_l: 0.1860  data_time: 0.0043  time: 0.0197
2025/05/12 00:13:36 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/12 00:13:37 - mmengine - INFO - The best checkpoint with 0.1740 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/12 00:13:45 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:05  time: 0.1639  data_time: 0.0067  memory: 2033  grad_norm: 3284.2601  loss: 1956.3397  loss_cls: 402.3789  loss_conf: 708.6687  loss_xy: 797.4303  loss_wh: 47.8619
2025/05/12 00:13:53 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:53  time: 0.1554  data_time: 0.0086  memory: 2033  grad_norm: 3162.3449  loss: 1762.0681  loss_cls: 347.1495  loss_conf: 643.1177  loss_xy: 731.6875  loss_wh: 40.1134
2025/05/12 00:14:00 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:14:01 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:14:02 - mmengine - INFO - bbox_mAP_copypaste: 0.226 0.450 0.187 -1.000 0.133 0.249
2025/05/12 00:14:02 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2260  coco/bbox_mAP_50: 0.4500  coco/bbox_mAP_75: 0.1870  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1330  coco/bbox_mAP_l: 0.2490  data_time: 0.0049  time: 0.0200
2025/05/12 00:14:02 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/12 00:14:03 - mmengine - INFO - The best checkpoint with 0.2260 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/12 00:14:12 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:37  time: 0.1666  data_time: 0.0074  memory: 2033  grad_norm: 3731.2803  loss: 1996.2792  loss_cls: 423.4558  loss_conf: 718.7587  loss_xy: 811.7631  loss_wh: 42.3016
2025/05/12 00:14:20 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:27  time: 0.1583  data_time: 0.0092  memory: 2033  grad_norm: 3096.7953  loss: 1813.1679  loss_cls: 343.2370  loss_conf: 667.5603  loss_xy: 762.8144  loss_wh: 39.5562
2025/05/12 00:14:26 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:14:27 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:14:29 - mmengine - INFO - bbox_mAP_copypaste: 0.251 0.502 0.217 -1.000 0.139 0.276
2025/05/12 00:14:29 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2510  coco/bbox_mAP_50: 0.5020  coco/bbox_mAP_75: 0.2170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1390  coco/bbox_mAP_l: 0.2760  data_time: 0.0045  time: 0.0196
2025/05/12 00:14:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/12 00:14:30 - mmengine - INFO - The best checkpoint with 0.2510 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/12 00:14:38 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:11  time: 0.1645  data_time: 0.0058  memory: 2033  grad_norm: 3306.9107  loss: 1843.1145  loss_cls: 346.0819  loss_conf: 666.5281  loss_xy: 789.0944  loss_wh: 41.4100
2025/05/12 00:14:46 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:09:01  time: 0.1567  data_time: 0.0070  memory: 2033  grad_norm: 3140.7706  loss: 1826.2846  loss_cls: 346.0292  loss_conf: 668.8075  loss_xy: 771.0121  loss_wh: 40.4357
2025/05/12 00:14:53 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:14:54 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:14:55 - mmengine - INFO - bbox_mAP_copypaste: 0.218 0.434 0.192 -1.000 0.128 0.238
2025/05/12 00:14:55 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2180  coco/bbox_mAP_50: 0.4340  coco/bbox_mAP_75: 0.1920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1280  coco/bbox_mAP_l: 0.2380  data_time: 0.0039  time: 0.0198
2025/05/12 00:14:57 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:15:03 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:45  time: 0.1636  data_time: 0.0111  memory: 2033  grad_norm: 2835.4942  loss: 1687.4124  loss_cls: 304.2698  loss_conf: 618.5829  loss_xy: 725.8471  loss_wh: 38.7126
2025/05/12 00:15:11 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:36  time: 0.1578  data_time: 0.0051  memory: 2033  grad_norm: 3224.5464  loss: 1858.1309  loss_cls: 352.6968  loss_conf: 673.6533  loss_xy: 786.9979  loss_wh: 44.7829
2025/05/12 00:15:18 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:15:19 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:15:20 - mmengine - INFO - bbox_mAP_copypaste: 0.236 0.460 0.202 -1.000 0.131 0.261
2025/05/12 00:15:20 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.2360  coco/bbox_mAP_50: 0.4600  coco/bbox_mAP_75: 0.2020  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1310  coco/bbox_mAP_l: 0.2610  data_time: 0.0037  time: 0.0190
2025/05/12 00:15:28 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:19  time: 0.1607  data_time: 0.0089  memory: 2033  grad_norm: 3047.9448  loss: 1722.7973  loss_cls: 300.4904  loss_conf: 632.2057  loss_xy: 749.7884  loss_wh: 40.3128
2025/05/12 00:15:36 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:11  time: 0.1607  data_time: 0.0067  memory: 2033  grad_norm: 3530.8700  loss: 1837.2022  loss_cls: 342.4647  loss_conf: 663.2101  loss_xy: 788.9878  loss_wh: 42.5396
2025/05/12 00:15:43 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:15:44 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:15:45 - mmengine - INFO - bbox_mAP_copypaste: 0.250 0.580 0.153 -1.000 0.088 0.276
2025/05/12 00:15:45 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.2500  coco/bbox_mAP_50: 0.5800  coco/bbox_mAP_75: 0.1530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0880  coco/bbox_mAP_l: 0.2760  data_time: 0.0030  time: 0.0192
2025/05/12 00:15:53 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:55  time: 0.1624  data_time: 0.0074  memory: 2033  grad_norm: 3233.2686  loss: 1816.6268  loss_cls: 328.3850  loss_conf: 652.6083  loss_xy: 788.9321  loss_wh: 46.7014
2025/05/12 00:16:01 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:46  time: 0.1567  data_time: 0.0070  memory: 2033  grad_norm: 3105.7271  loss: 1750.4118  loss_cls: 310.5585  loss_conf: 640.6646  loss_xy: 761.6192  loss_wh: 37.5694
2025/05/12 00:16:08 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:16:09 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:16:10 - mmengine - INFO - bbox_mAP_copypaste: 0.250 0.486 0.217 -1.000 0.184 0.266
2025/05/12 00:16:10 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2500  coco/bbox_mAP_50: 0.4860  coco/bbox_mAP_75: 0.2170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.2660  data_time: 0.0046  time: 0.0191
2025/05/12 00:16:18 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:31  time: 0.1612  data_time: 0.0082  memory: 2033  grad_norm: 3049.3723  loss: 1726.7971  loss_cls: 306.2856  loss_conf: 621.4718  loss_xy: 754.3809  loss_wh: 44.6587
2025/05/12 00:16:26 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:23  time: 0.1577  data_time: 0.0089  memory: 2033  grad_norm: 2752.3830  loss: 1713.5340  loss_cls: 287.5946  loss_conf: 625.0712  loss_xy: 758.8864  loss_wh: 41.9818
2025/05/12 00:16:33 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:16:34 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:16:35 - mmengine - INFO - bbox_mAP_copypaste: 0.195 0.499 0.099 -1.000 0.182 0.206
2025/05/12 00:16:35 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.1950  coco/bbox_mAP_50: 0.4990  coco/bbox_mAP_75: 0.0990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1820  coco/bbox_mAP_l: 0.2060  data_time: 0.0044  time: 0.0192
2025/05/12 00:16:43 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:07  time: 0.1624  data_time: 0.0094  memory: 2033  grad_norm: 3053.1555  loss: 1782.4802  loss_cls: 299.7165  loss_conf: 646.5745  loss_xy: 782.5254  loss_wh: 53.6638
2025/05/12 00:16:51 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:59  time: 0.1564  data_time: 0.0076  memory: 2033  grad_norm: 2792.2156  loss: 1621.1688  loss_cls: 264.2160  loss_conf: 599.5520  loss_xy: 717.4770  loss_wh: 39.9239
2025/05/12 00:16:58 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:16:59 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:17:00 - mmengine - INFO - bbox_mAP_copypaste: 0.217 0.436 0.187 -1.000 0.094 0.237
2025/05/12 00:17:00 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.2170  coco/bbox_mAP_50: 0.4360  coco/bbox_mAP_75: 0.1870  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0940  coco/bbox_mAP_l: 0.2370  data_time: 0.0047  time: 0.0191
2025/05/12 00:17:08 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:44  time: 0.1640  data_time: 0.0081  memory: 2033  grad_norm: 2779.1569  loss: 1678.8068  loss_cls: 278.9003  loss_conf: 611.3997  loss_xy: 748.8768  loss_wh: 39.6299
2025/05/12 00:17:16 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:35  time: 0.1581  data_time: 0.0062  memory: 2033  grad_norm: 2810.4197  loss: 1749.4365  loss_cls: 304.2306  loss_conf: 629.9034  loss_xy: 770.5088  loss_wh: 44.7937
2025/05/12 00:17:23 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:17:24 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:17:25 - mmengine - INFO - bbox_mAP_copypaste: 0.220 0.474 0.148 -1.000 0.147 0.240
2025/05/12 00:17:25 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2200  coco/bbox_mAP_50: 0.4740  coco/bbox_mAP_75: 0.1480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2400  data_time: 0.0052  time: 0.0191
2025/05/12 00:17:33 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:20  time: 0.1601  data_time: 0.0079  memory: 2033  grad_norm: 2622.1207  loss: 1597.1266  loss_cls: 265.1700  loss_conf: 583.3552  loss_xy: 708.8009  loss_wh: 39.8005
2025/05/12 00:17:41 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:12  time: 0.1596  data_time: 0.0075  memory: 2033  grad_norm: 3049.9596  loss: 1835.6028  loss_cls: 312.9999  loss_conf: 664.7830  loss_xy: 814.7373  loss_wh: 43.0826
2025/05/12 00:17:48 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:17:49 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:17:50 - mmengine - INFO - bbox_mAP_copypaste: 0.215 0.488 0.124 -1.000 0.154 0.231
2025/05/12 00:17:50 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2150  coco/bbox_mAP_50: 0.4880  coco/bbox_mAP_75: 0.1240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1540  coco/bbox_mAP_l: 0.2310  data_time: 0.0045  time: 0.0195
2025/05/12 00:17:54 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:17:58 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:57  time: 0.1588  data_time: 0.0097  memory: 2033  grad_norm: 2803.7875  loss: 1670.8781  loss_cls: 289.8757  loss_conf: 597.1623  loss_xy: 742.8745  loss_wh: 40.9656
2025/05/12 00:18:06 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:48  time: 0.1570  data_time: 0.0082  memory: 2033  grad_norm: 2520.7373  loss: 1695.2097  loss_cls: 281.2762  loss_conf: 617.2211  loss_xy: 750.4350  loss_wh: 46.2775
2025/05/12 00:18:13 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:18:14 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:18:15 - mmengine - INFO - bbox_mAP_copypaste: 0.204 0.431 0.143 -1.000 0.146 0.216
2025/05/12 00:18:15 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2040  coco/bbox_mAP_50: 0.4310  coco/bbox_mAP_75: 0.1430  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1460  coco/bbox_mAP_l: 0.2160  data_time: 0.0045  time: 0.0199
2025/05/12 00:18:23 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:33  time: 0.1623  data_time: 0.0107  memory: 2033  grad_norm: 2819.7596  loss: 1628.6654  loss_cls: 269.2361  loss_conf: 591.5002  loss_xy: 731.2533  loss_wh: 36.6759
2025/05/12 00:18:31 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:25  time: 0.1570  data_time: 0.0066  memory: 2033  grad_norm: 2733.1770  loss: 1735.0780  loss_cls: 289.0855  loss_conf: 615.4688  loss_xy: 785.0992  loss_wh: 45.4245
2025/05/12 00:18:37 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:18:38 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:18:40 - mmengine - INFO - bbox_mAP_copypaste: 0.271 0.515 0.253 -1.000 0.187 0.289
2025/05/12 00:18:40 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2710  coco/bbox_mAP_50: 0.5150  coco/bbox_mAP_75: 0.2530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1870  coco/bbox_mAP_l: 0.2890  data_time: 0.0042  time: 0.0198
2025/05/12 00:18:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/12 00:18:41 - mmengine - INFO - The best checkpoint with 0.2710 coco/bbox_mAP at 16 epoch is saved to best_coco_bbox_mAP_epoch_16.pth.
2025/05/12 00:18:50 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:10  time: 0.1667  data_time: 0.0084  memory: 2033  grad_norm: 2821.7912  loss: 1747.4322  loss_cls: 300.3365  loss_conf: 617.2646  loss_xy: 790.5852  loss_wh: 39.2458
2025/05/12 00:18:57 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:02  time: 0.1561  data_time: 0.0058  memory: 2033  grad_norm: 2721.5386  loss: 1710.4833  loss_cls: 281.4452  loss_conf: 621.0002  loss_xy: 768.2291  loss_wh: 39.8088
2025/05/12 00:19:04 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:19:05 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:19:07 - mmengine - INFO - bbox_mAP_copypaste: 0.147 0.373 0.079 -1.000 0.143 0.152
2025/05/12 00:19:07 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.1470  coco/bbox_mAP_50: 0.3730  coco/bbox_mAP_75: 0.0790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1430  coco/bbox_mAP_l: 0.1520  data_time: 0.0040  time: 0.0201
2025/05/12 00:19:15 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:47  time: 0.1616  data_time: 0.0056  memory: 2033  grad_norm: 3202.8841  loss: 1730.6810  loss_cls: 296.2618  loss_conf: 614.3887  loss_xy: 776.5194  loss_wh: 43.5111
2025/05/12 00:19:22 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:39  time: 0.1579  data_time: 0.0069  memory: 2033  grad_norm: 3026.8077  loss: 1671.0245  loss_cls: 270.4413  loss_conf: 603.6282  loss_xy: 754.9358  loss_wh: 42.0192
2025/05/12 00:19:29 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:19:30 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:19:31 - mmengine - INFO - bbox_mAP_copypaste: 0.154 0.431 0.081 -1.000 0.173 0.159
2025/05/12 00:19:31 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.1540  coco/bbox_mAP_50: 0.4310  coco/bbox_mAP_75: 0.0810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1730  coco/bbox_mAP_l: 0.1590  data_time: 0.0036  time: 0.0196
2025/05/12 00:19:40 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:24  time: 0.1628  data_time: 0.0069  memory: 2033  grad_norm: 2534.8700  loss: 1678.0604  loss_cls: 253.6026  loss_conf: 612.5992  loss_xy: 770.3659  loss_wh: 41.4927
2025/05/12 00:19:47 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:16  time: 0.1571  data_time: 0.0070  memory: 2033  grad_norm: 2524.1536  loss: 1710.6523  loss_cls: 288.4652  loss_conf: 607.1385  loss_xy: 775.3532  loss_wh: 39.6954
2025/05/12 00:19:54 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:19:55 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:19:56 - mmengine - INFO - bbox_mAP_copypaste: 0.274 0.543 0.239 -1.000 0.165 0.293
2025/05/12 00:19:56 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2740  coco/bbox_mAP_50: 0.5430  coco/bbox_mAP_75: 0.2390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1650  coco/bbox_mAP_l: 0.2930  data_time: 0.0050  time: 0.0195
2025/05/12 00:19:56 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_16.pth is removed
2025/05/12 00:19:58 - mmengine - INFO - The best checkpoint with 0.2740 coco/bbox_mAP at 19 epoch is saved to best_coco_bbox_mAP_epoch_19.pth.
2025/05/12 00:20:06 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:02  time: 0.1729  data_time: 0.0096  memory: 2033  grad_norm: 2516.9229  loss: 1691.2421  loss_cls: 289.8031  loss_conf: 598.0288  loss_xy: 766.8225  loss_wh: 36.5877
2025/05/12 00:20:14 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:54  time: 0.1572  data_time: 0.0074  memory: 2033  grad_norm: 3002.7521  loss: 1608.7859  loss_cls: 260.7777  loss_conf: 574.3505  loss_xy: 731.4453  loss_wh: 42.2123
2025/05/12 00:20:21 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:20:22 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:20:23 - mmengine - INFO - bbox_mAP_copypaste: 0.251 0.586 0.173 -1.000 0.191 0.270
2025/05/12 00:20:23 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2510  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.1730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1910  coco/bbox_mAP_l: 0.2700  data_time: 0.0039  time: 0.0194
2025/05/12 00:20:31 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:39  time: 0.1605  data_time: 0.0088  memory: 2033  grad_norm: 2541.3669  loss: 1600.0645  loss_cls: 253.7312  loss_conf: 574.3013  loss_xy: 727.5014  loss_wh: 44.5307
2025/05/12 00:20:39 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:31  time: 0.1591  data_time: 0.0080  memory: 2033  grad_norm: 2404.4361  loss: 1660.0320  loss_cls: 259.5369  loss_conf: 590.0651  loss_xy: 771.1428  loss_wh: 39.2872
2025/05/12 00:20:46 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:20:47 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:20:48 - mmengine - INFO - bbox_mAP_copypaste: 0.243 0.479 0.211 -1.000 0.158 0.264
2025/05/12 00:20:48 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2430  coco/bbox_mAP_50: 0.4790  coco/bbox_mAP_75: 0.2110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.2640  data_time: 0.0050  time: 0.0203
2025/05/12 00:20:55 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:20:56 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:16  time: 0.1615  data_time: 0.0099  memory: 2033  grad_norm: 2403.5765  loss: 1601.2986  loss_cls: 253.5234  loss_conf: 570.6182  loss_xy: 734.9333  loss_wh: 42.2236
2025/05/12 00:21:04 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:08  time: 0.1625  data_time: 0.0060  memory: 2033  grad_norm: 2663.7622  loss: 1712.7439  loss_cls: 282.7525  loss_conf: 596.5456  loss_xy: 796.2292  loss_wh: 37.2167
2025/05/12 00:21:11 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:21:12 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:21:14 - mmengine - INFO - bbox_mAP_copypaste: 0.223 0.462 0.178 -1.000 0.135 0.244
2025/05/12 00:21:14 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2230  coco/bbox_mAP_50: 0.4620  coco/bbox_mAP_75: 0.1780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2440  data_time: 0.0034  time: 0.0194
2025/05/12 00:21:22 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:53  time: 0.1632  data_time: 0.0092  memory: 2033  grad_norm: 2264.3302  loss: 1615.5869  loss_cls: 243.5001  loss_conf: 579.2118  loss_xy: 753.7648  loss_wh: 39.1101
2025/05/12 00:21:30 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:45  time: 0.1580  data_time: 0.0075  memory: 2033  grad_norm: 2696.1144  loss: 1675.2856  loss_cls: 278.7072  loss_conf: 589.9363  loss_xy: 766.3979  loss_wh: 40.2443
2025/05/12 00:21:36 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:21:37 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:21:39 - mmengine - INFO - bbox_mAP_copypaste: 0.306 0.600 0.273 -1.000 0.171 0.335
2025/05/12 00:21:39 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3060  coco/bbox_mAP_50: 0.6000  coco/bbox_mAP_75: 0.2730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1710  coco/bbox_mAP_l: 0.3350  data_time: 0.0041  time: 0.0194
2025/05/12 00:21:39 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_19.pth is removed
2025/05/12 00:21:40 - mmengine - INFO - The best checkpoint with 0.3060 coco/bbox_mAP at 23 epoch is saved to best_coco_bbox_mAP_epoch_23.pth.
2025/05/12 00:21:48 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:31  time: 0.1640  data_time: 0.0078  memory: 2033  grad_norm: 2321.4646  loss: 1651.0249  loss_cls: 266.5911  loss_conf: 577.1766  loss_xy: 768.7066  loss_wh: 38.5506
2025/05/12 00:21:56 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:23  time: 0.1622  data_time: 0.0129  memory: 2033  grad_norm: 2344.6147  loss: 1576.7927  loss_cls: 235.3785  loss_conf: 565.4816  loss_xy: 738.8660  loss_wh: 37.0665
2025/05/12 00:22:03 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:22:04 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:22:05 - mmengine - INFO - bbox_mAP_copypaste: 0.243 0.533 0.182 -1.000 0.197 0.254
2025/05/12 00:22:05 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2430  coco/bbox_mAP_50: 0.5330  coco/bbox_mAP_75: 0.1820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1970  coco/bbox_mAP_l: 0.2540  data_time: 0.0027  time: 0.0207
2025/05/12 00:22:14 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:08  time: 0.1623  data_time: 0.0102  memory: 2033  grad_norm: 3060.8645  loss: 1636.0065  loss_cls: 263.1789  loss_conf: 570.8089  loss_xy: 765.9713  loss_wh: 36.0474
2025/05/12 00:22:21 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:02:00  time: 0.1582  data_time: 0.0091  memory: 2033  grad_norm: 2172.4926  loss: 1545.3775  loss_cls: 228.6286  loss_conf: 547.7519  loss_xy: 734.5545  loss_wh: 34.4425
2025/05/12 00:22:28 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:22:29 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:22:30 - mmengine - INFO - bbox_mAP_copypaste: 0.237 0.455 0.214 -1.000 0.136 0.258
2025/05/12 00:22:30 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2370  coco/bbox_mAP_50: 0.4550  coco/bbox_mAP_75: 0.2140  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1360  coco/bbox_mAP_l: 0.2580  data_time: 0.0045  time: 0.0197
2025/05/12 00:22:39 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:45  time: 0.1657  data_time: 0.0085  memory: 2033  grad_norm: 2426.7260  loss: 1652.0551  loss_cls: 248.1575  loss_conf: 580.8778  loss_xy: 781.5773  loss_wh: 41.4425
2025/05/12 00:22:46 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:37  time: 0.1545  data_time: 0.0032  memory: 2033  grad_norm: 2475.1707  loss: 1678.3977  loss_cls: 261.3631  loss_conf: 585.1869  loss_xy: 788.0258  loss_wh: 43.8219
2025/05/12 00:22:53 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:22:54 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:22:55 - mmengine - INFO - bbox_mAP_copypaste: 0.309 0.614 0.283 -1.000 0.167 0.332
2025/05/12 00:22:55 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3090  coco/bbox_mAP_50: 0.6140  coco/bbox_mAP_75: 0.2830  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.3320  data_time: 0.0040  time: 0.0192
2025/05/12 00:22:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_23.pth is removed
2025/05/12 00:22:57 - mmengine - INFO - The best checkpoint with 0.3090 coco/bbox_mAP at 26 epoch is saved to best_coco_bbox_mAP_epoch_26.pth.
2025/05/12 00:23:05 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:22  time: 0.1644  data_time: 0.0070  memory: 2033  grad_norm: 2415.4399  loss: 1626.1434  loss_cls: 249.0513  loss_conf: 566.9746  loss_xy: 773.7166  loss_wh: 36.4009
2025/05/12 00:23:13 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:14  time: 0.1567  data_time: 0.0097  memory: 2033  grad_norm: 3001.4574  loss: 1540.4325  loss_cls: 229.3782  loss_conf: 545.9160  loss_xy: 734.7118  loss_wh: 30.4265
2025/05/12 00:23:19 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:23:20 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:23:22 - mmengine - INFO - bbox_mAP_copypaste: 0.304 0.572 0.292 -1.000 0.187 0.328
2025/05/12 00:23:22 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3040  coco/bbox_mAP_50: 0.5720  coco/bbox_mAP_75: 0.2920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1870  coco/bbox_mAP_l: 0.3280  data_time: 0.0050  time: 0.0200
2025/05/12 00:23:30 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:00  time: 0.1612  data_time: 0.0088  memory: 2033  grad_norm: 2495.5801  loss: 1487.7242  loss_cls: 204.6840  loss_conf: 529.9255  loss_xy: 716.7604  loss_wh: 36.3544
2025/05/12 00:23:37 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:51  time: 0.1563  data_time: 0.0057  memory: 2033  grad_norm: 2293.2017  loss: 1563.1079  loss_cls: 237.8801  loss_conf: 545.8725  loss_xy: 742.2051  loss_wh: 37.1503
2025/05/12 00:23:44 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:23:45 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:23:46 - mmengine - INFO - bbox_mAP_copypaste: 0.267 0.485 0.270 -1.000 0.180 0.286
2025/05/12 00:23:46 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2670  coco/bbox_mAP_50: 0.4850  coco/bbox_mAP_75: 0.2700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1800  coco/bbox_mAP_l: 0.2860  data_time: 0.0047  time: 0.0195
2025/05/12 00:23:54 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:37  time: 0.1605  data_time: 0.0085  memory: 2033  grad_norm: 2261.8152  loss: 1543.2977  loss_cls: 237.1306  loss_conf: 537.4487  loss_xy: 732.0359  loss_wh: 36.6825
2025/05/12 00:23:55 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:24:02 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:29  time: 0.1589  data_time: 0.0091  memory: 2033  grad_norm: 2281.5814  loss: 1569.7183  loss_cls: 227.8217  loss_conf: 556.7230  loss_xy: 750.6808  loss_wh: 34.4928
2025/05/12 00:24:09 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:24:10 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:24:11 - mmengine - INFO - bbox_mAP_copypaste: 0.253 0.498 0.229 -1.000 0.161 0.280
2025/05/12 00:24:12 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2530  coco/bbox_mAP_50: 0.4980  coco/bbox_mAP_75: 0.2290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1610  coco/bbox_mAP_l: 0.2800  data_time: 0.0045  time: 0.0191
2025/05/12 00:24:20 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1665  data_time: 0.0061  memory: 2033  grad_norm: 2488.7034  loss: 1567.2022  loss_cls: 225.2743  loss_conf: 556.1515  loss_xy: 748.8488  loss_wh: 36.9277
2025/05/12 00:24:28 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1570  data_time: 0.0090  memory: 2033  grad_norm: 2311.9724  loss: 1519.0591  loss_cls: 219.1951  loss_conf: 536.7611  loss_xy: 729.1650  loss_wh: 33.9379
2025/05/12 00:24:34 - mmengine - INFO - Exp name: yolov3_pt_bal_pdm_aff_20250512_001134
2025/05/12 00:24:34 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/12 00:24:38 - mmengine - INFO - Evaluating bbox...
2025/05/12 00:24:40 - mmengine - INFO - bbox_mAP_copypaste: 0.269 0.485 0.272 -1.000 0.150 0.299
2025/05/12 00:24:40 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2690  coco/bbox_mAP_50: 0.4850  coco/bbox_mAP_75: 0.2720  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1500  coco/bbox_mAP_l: 0.2990  data_time: 0.0032  time: 0.0220
