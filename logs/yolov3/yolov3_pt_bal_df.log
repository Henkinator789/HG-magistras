2025/05/11 11:37:46 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1967373353
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1967373353
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 11:37:46 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(
                    mean=[
                        0,
                        0,
                        0,
                    ],
                    ratio_range=(
                        1,
                        2,
                    ),
                    to_rgb=True,
                    type='Expand'),
                dict(
                    min_crop_size=0.3,
                    min_ious=(
                        0.4,
                        0.5,
                        0.6,
                        0.7,
                        0.8,
                        0.9,
                    ),
                    type='MinIoURandomCrop'),
                dict(
                    keep_ratio=True,
                    scale=[
                        (
                            320,
                            320,
                        ),
                        (
                            416,
                            416,
                        ),
                    ],
                    type='RandomResize'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(mean=[
        0,
        0,
        0,
    ], ratio_range=(
        1,
        2,
    ), to_rgb=True, type='Expand'),
    dict(
        min_crop_size=0.3,
        min_ious=(
            0.4,
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
        ),
        type='MinIoURandomCrop'),
    dict(
        keep_ratio=True,
        scale=[
            (
                320,
                320,
            ),
            (
                416,
                416,
            ),
        ],
        type='RandomResize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 11:37:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 11:37:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 11:37:49 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 11:37:49 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 11:37:49 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 11:37:49 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 11:37:49 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 11:37:49 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 11:38:07 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:25:18  time: 0.3632  data_time: 0.1891  memory: 2033  grad_norm: 2548.5386  loss: 3786.2620  loss_cls: 1185.0537  loss_conf: 1700.2846  loss_xy: 828.1321  loss_wh: 72.7916
2025/05/11 11:38:21 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:22:26  time: 0.2887  data_time: 0.1356  memory: 2033  grad_norm: 3166.3887  loss: 2661.3982  loss_cls: 709.2400  loss_conf: 1098.7188  loss_xy: 807.2582  loss_wh: 46.1811
2025/05/11 11:38:33 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:38:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:38:44 - mmengine - INFO - bbox_mAP_copypaste: 0.072 0.178 0.034 -1.000 0.067 0.072
2025/05/11 11:38:44 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0720  coco/bbox_mAP_50: 0.1780  coco/bbox_mAP_75: 0.0340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0670  coco/bbox_mAP_l: 0.0720  data_time: 0.1716  time: 0.1958
2025/05/11 11:38:45 - mmengine - INFO - The best checkpoint with 0.0720 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 11:39:00 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:20:39  time: 0.2872  data_time: 0.1330  memory: 2033  grad_norm: 2741.4891  loss: 2080.9486  loss_cls: 534.9607  loss_conf: 774.7687  loss_xy: 739.5034  loss_wh: 31.7158
2025/05/11 11:39:14 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:20:00  time: 0.2792  data_time: 0.1321  memory: 2033  grad_norm: 3134.9599  loss: 2030.0043  loss_cls: 500.9519  loss_conf: 762.2459  loss_xy: 734.8883  loss_wh: 31.9181
2025/05/11 11:39:25 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:39:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:39:28 - mmengine - INFO - bbox_mAP_copypaste: 0.150 0.322 0.115 -1.000 0.089 0.167
2025/05/11 11:39:28 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1500  coco/bbox_mAP_50: 0.3220  coco/bbox_mAP_75: 0.1150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0890  coco/bbox_mAP_l: 0.1670  data_time: 0.0050  time: 0.0198
2025/05/11 11:39:28 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 11:39:29 - mmengine - INFO - The best checkpoint with 0.1500 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 11:39:43 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:19:11  time: 0.2835  data_time: 0.1309  memory: 2033  grad_norm: 3017.4076  loss: 1766.2385  loss_cls: 404.8266  loss_conf: 646.3185  loss_xy: 689.1892  loss_wh: 25.9041
2025/05/11 11:39:57 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:18:50  time: 0.2843  data_time: 0.1319  memory: 2033  grad_norm: 3279.2618  loss: 1906.1128  loss_cls: 443.7475  loss_conf: 680.6847  loss_xy: 751.7086  loss_wh: 29.9721
2025/05/11 11:40:09 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:40:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:40:11 - mmengine - INFO - bbox_mAP_copypaste: 0.183 0.367 0.154 -1.000 0.147 0.188
2025/05/11 11:40:11 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1830  coco/bbox_mAP_50: 0.3670  coco/bbox_mAP_75: 0.1540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.1880  data_time: 0.0051  time: 0.0198
2025/05/11 11:40:11 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 11:40:13 - mmengine - INFO - The best checkpoint with 0.1830 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 11:40:26 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:18:11  time: 0.2764  data_time: 0.1217  memory: 2033  grad_norm: 3460.9848  loss: 1757.4493  loss_cls: 393.2019  loss_conf: 631.3965  loss_xy: 704.2526  loss_wh: 28.5982
2025/05/11 11:40:40 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:17:50  time: 0.2718  data_time: 0.1232  memory: 2033  grad_norm: 2766.2466  loss: 1726.3749  loss_cls: 377.3127  loss_conf: 609.5772  loss_xy: 714.7418  loss_wh: 24.7432
2025/05/11 11:40:52 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:40:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:40:54 - mmengine - INFO - bbox_mAP_copypaste: 0.238 0.479 0.181 -1.000 0.203 0.248
2025/05/11 11:40:54 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2380  coco/bbox_mAP_50: 0.4790  coco/bbox_mAP_75: 0.1810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.2480  data_time: 0.0050  time: 0.0194
2025/05/11 11:40:54 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 11:40:55 - mmengine - INFO - The best checkpoint with 0.2380 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 11:41:09 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:17:18  time: 0.2740  data_time: 0.1215  memory: 2033  grad_norm: 2820.6255  loss: 1511.8405  loss_cls: 286.9259  loss_conf: 552.3470  loss_xy: 650.2511  loss_wh: 22.3164
2025/05/11 11:41:23 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:17:03  time: 0.2819  data_time: 0.1330  memory: 2033  grad_norm: 2851.2582  loss: 1618.0870  loss_cls: 311.1406  loss_conf: 578.0833  loss_xy: 703.4482  loss_wh: 25.4149
2025/05/11 11:41:35 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:41:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:41:37 - mmengine - INFO - bbox_mAP_copypaste: 0.272 0.500 0.264 -1.000 0.194 0.287
2025/05/11 11:41:37 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2720  coco/bbox_mAP_50: 0.5000  coco/bbox_mAP_75: 0.2640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.2870  data_time: 0.0058  time: 0.0206
2025/05/11 11:41:37 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 11:41:39 - mmengine - INFO - The best checkpoint with 0.2720 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 11:41:53 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:16:36  time: 0.2890  data_time: 0.1377  memory: 2033  grad_norm: 2774.8279  loss: 1486.1862  loss_cls: 256.1955  loss_conf: 537.7182  loss_xy: 670.2609  loss_wh: 22.0116
2025/05/11 11:42:07 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:16:21  time: 0.2830  data_time: 0.1363  memory: 2033  grad_norm: 2799.3281  loss: 1469.2241  loss_cls: 263.9709  loss_conf: 531.1462  loss_xy: 652.2405  loss_wh: 21.8664
2025/05/11 11:42:19 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:42:20 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:42:22 - mmengine - INFO - bbox_mAP_copypaste: 0.320 0.644 0.254 -1.000 0.236 0.335
2025/05/11 11:42:22 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3200  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.2540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2360  coco/bbox_mAP_l: 0.3350  data_time: 0.0051  time: 0.0201
2025/05/11 11:42:22 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 11:42:23 - mmengine - INFO - The best checkpoint with 0.3200 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 11:42:37 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:15:56  time: 0.2921  data_time: 0.1432  memory: 2033  grad_norm: 2927.9059  loss: 1420.1027  loss_cls: 255.1336  loss_conf: 509.0521  loss_xy: 633.2001  loss_wh: 22.7169
2025/05/11 11:42:51 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:15:40  time: 0.2775  data_time: 0.1305  memory: 2033  grad_norm: 2752.2560  loss: 1411.3789  loss_cls: 250.8962  loss_conf: 505.6374  loss_xy: 632.8549  loss_wh: 21.9904
2025/05/11 11:43:03 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:43:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:43:05 - mmengine - INFO - bbox_mAP_copypaste: 0.282 0.527 0.273 -1.000 0.188 0.303
2025/05/11 11:43:05 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2820  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.2730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1880  coco/bbox_mAP_l: 0.3030  data_time: 0.0053  time: 0.0203
2025/05/11 11:43:09 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:43:20 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:15:13  time: 0.2877  data_time: 0.1374  memory: 2033  grad_norm: 2702.2402  loss: 1510.5951  loss_cls: 238.5680  loss_conf: 537.9698  loss_xy: 711.2690  loss_wh: 22.7884
2025/05/11 11:43:34 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:15:00  time: 0.2954  data_time: 0.1483  memory: 2033  grad_norm: 2758.9491  loss: 1413.1035  loss_cls: 245.0119  loss_conf: 498.5433  loss_xy: 647.2768  loss_wh: 22.2715
2025/05/11 11:43:45 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:43:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:43:48 - mmengine - INFO - bbox_mAP_copypaste: 0.314 0.558 0.311 -1.000 0.230 0.338
2025/05/11 11:43:48 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3140  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.3110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3380  data_time: 0.0048  time: 0.0197
2025/05/11 11:44:02 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:14:31  time: 0.2784  data_time: 0.1234  memory: 2033  grad_norm: 3229.3092  loss: 1611.4716  loss_cls: 275.5892  loss_conf: 570.1397  loss_xy: 737.0163  loss_wh: 28.7264
2025/05/11 11:44:16 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:14:16  time: 0.2750  data_time: 0.1284  memory: 2033  grad_norm: 2551.5696  loss: 1420.1395  loss_cls: 206.6807  loss_conf: 517.7933  loss_xy: 672.4031  loss_wh: 23.2624
2025/05/11 11:44:27 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:44:28 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:44:30 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.667 0.334 -1.000 0.244 0.378
2025/05/11 11:44:30 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6670  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2440  coco/bbox_mAP_l: 0.3780  data_time: 0.0044  time: 0.0196
2025/05/11 11:44:30 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 11:44:31 - mmengine - INFO - The best checkpoint with 0.3560 coco/bbox_mAP at 9 epoch is saved to best_coco_bbox_mAP_epoch_9.pth.
2025/05/11 11:44:44 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:13:48  time: 0.2692  data_time: 0.1178  memory: 2033  grad_norm: 2729.4128  loss: 1364.9176  loss_cls: 203.0572  loss_conf: 496.5626  loss_xy: 641.2845  loss_wh: 24.0134
2025/05/11 11:44:58 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:13:32  time: 0.2747  data_time: 0.1310  memory: 2033  grad_norm: 2535.6957  loss: 1379.0076  loss_cls: 219.0476  loss_conf: 485.8897  loss_xy: 651.0953  loss_wh: 22.9750
2025/05/11 11:45:10 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:45:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:45:12 - mmengine - INFO - bbox_mAP_copypaste: 0.303 0.595 0.257 -1.000 0.236 0.318
2025/05/11 11:45:12 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3030  coco/bbox_mAP_50: 0.5950  coco/bbox_mAP_75: 0.2570  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2360  coco/bbox_mAP_l: 0.3180  data_time: 0.0046  time: 0.0196
2025/05/11 11:45:26 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:13:06  time: 0.2816  data_time: 0.1325  memory: 2033  grad_norm: 2806.4605  loss: 1374.1068  loss_cls: 226.0893  loss_conf: 488.8789  loss_xy: 633.7093  loss_wh: 25.4293
2025/05/11 11:45:40 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:12:51  time: 0.2706  data_time: 0.1241  memory: 2033  grad_norm: 2466.9612  loss: 1364.4406  loss_cls: 201.8522  loss_conf: 487.8956  loss_xy: 651.0901  loss_wh: 23.6028
2025/05/11 11:45:51 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:45:52 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:45:53 - mmengine - INFO - bbox_mAP_copypaste: 0.301 0.564 0.285 -1.000 0.219 0.319
2025/05/11 11:45:53 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3010  coco/bbox_mAP_50: 0.5640  coco/bbox_mAP_75: 0.2850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2190  coco/bbox_mAP_l: 0.3190  data_time: 0.0039  time: 0.0201
2025/05/11 11:46:07 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:12:24  time: 0.2792  data_time: 0.1303  memory: 2033  grad_norm: 2498.9344  loss: 1378.1569  loss_cls: 221.4318  loss_conf: 474.1455  loss_xy: 657.4905  loss_wh: 25.0891
2025/05/11 11:46:21 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:12:09  time: 0.2815  data_time: 0.1361  memory: 2033  grad_norm: 2393.2117  loss: 1311.8307  loss_cls: 191.6626  loss_conf: 474.0485  loss_xy: 614.8733  loss_wh: 31.2463
2025/05/11 11:46:32 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:46:33 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:46:35 - mmengine - INFO - bbox_mAP_copypaste: 0.303 0.586 0.268 -1.000 0.221 0.320
2025/05/11 11:46:35 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3030  coco/bbox_mAP_50: 0.5860  coco/bbox_mAP_75: 0.2680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.3200  data_time: 0.0047  time: 0.0204
2025/05/11 11:46:49 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:11:43  time: 0.2846  data_time: 0.1358  memory: 2033  grad_norm: 2328.4413  loss: 1299.9915  loss_cls: 198.5882  loss_conf: 458.2991  loss_xy: 621.6045  loss_wh: 21.4997
2025/05/11 11:47:03 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:11:28  time: 0.2695  data_time: 0.1210  memory: 2033  grad_norm: 2233.5810  loss: 1427.5537  loss_cls: 204.5667  loss_conf: 513.6766  loss_xy: 686.9892  loss_wh: 22.3213
2025/05/11 11:47:14 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:47:15 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:47:17 - mmengine - INFO - bbox_mAP_copypaste: 0.340 0.662 0.299 -1.000 0.214 0.364
2025/05/11 11:47:17 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3400  coco/bbox_mAP_50: 0.6620  coco/bbox_mAP_75: 0.2990  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2140  coco/bbox_mAP_l: 0.3640  data_time: 0.0051  time: 0.0200
2025/05/11 11:47:31 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:11:03  time: 0.2896  data_time: 0.1405  memory: 2033  grad_norm: 2720.3909  loss: 1355.7448  loss_cls: 202.0622  loss_conf: 472.6886  loss_xy: 647.1630  loss_wh: 33.8309
2025/05/11 11:47:45 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:10:48  time: 0.2732  data_time: 0.1218  memory: 2033  grad_norm: 2444.7952  loss: 1422.7412  loss_cls: 211.4711  loss_conf: 507.2978  loss_xy: 682.7853  loss_wh: 21.1869
2025/05/11 11:47:57 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:47:58 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:47:59 - mmengine - INFO - bbox_mAP_copypaste: 0.329 0.644 0.281 -1.000 0.252 0.347
2025/05/11 11:47:59 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3290  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.2810  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.3470  data_time: 0.0049  time: 0.0203
2025/05/11 11:48:07 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:48:13 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:10:22  time: 0.2818  data_time: 0.1314  memory: 2033  grad_norm: 2327.6043  loss: 1382.2836  loss_cls: 208.3137  loss_conf: 481.2268  loss_xy: 666.5527  loss_wh: 26.1904
2025/05/11 11:48:27 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:10:08  time: 0.2796  data_time: 0.1420  memory: 2033  grad_norm: 2168.3188  loss: 1267.1740  loss_cls: 182.2640  loss_conf: 450.8493  loss_xy: 607.0441  loss_wh: 27.0166
2025/05/11 11:48:39 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:48:40 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:48:41 - mmengine - INFO - bbox_mAP_copypaste: 0.313 0.644 0.227 -1.000 0.242 0.330
2025/05/11 11:48:41 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.3130  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2420  coco/bbox_mAP_l: 0.3300  data_time: 0.0051  time: 0.0202
2025/05/11 11:48:55 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:09:42  time: 0.2750  data_time: 0.1254  memory: 2033  grad_norm: 2024.8653  loss: 1263.6473  loss_cls: 174.5865  loss_conf: 443.6322  loss_xy: 624.3685  loss_wh: 21.0602
2025/05/11 11:49:08 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:09:27  time: 0.2669  data_time: 0.1235  memory: 2033  grad_norm: 2408.8394  loss: 1306.6869  loss_cls: 194.8755  loss_conf: 460.9331  loss_xy: 622.6528  loss_wh: 28.2255
2025/05/11 11:49:20 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:49:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:49:22 - mmengine - INFO - bbox_mAP_copypaste: 0.366 0.677 0.348 -1.000 0.252 0.389
2025/05/11 11:49:22 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.3660  coco/bbox_mAP_50: 0.6770  coco/bbox_mAP_75: 0.3480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.3890  data_time: 0.0054  time: 0.0203
2025/05/11 11:49:22 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_9.pth is removed
2025/05/11 11:49:23 - mmengine - INFO - The best checkpoint with 0.3660 coco/bbox_mAP at 16 epoch is saved to best_coco_bbox_mAP_epoch_16.pth.
2025/05/11 11:49:38 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:09:01  time: 0.2825  data_time: 0.1317  memory: 2033  grad_norm: 2239.6352  loss: 1374.3040  loss_cls: 212.2094  loss_conf: 472.1897  loss_xy: 665.2100  loss_wh: 24.6949
2025/05/11 11:49:51 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:08:47  time: 0.2715  data_time: 0.1230  memory: 2033  grad_norm: 2160.3830  loss: 1375.6131  loss_cls: 197.8789  loss_conf: 486.7433  loss_xy: 664.0603  loss_wh: 26.9306
2025/05/11 11:50:02 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:50:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:50:05 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.634 0.329 -1.000 0.261 0.357
2025/05/11 11:50:05 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6340  coco/bbox_mAP_75: 0.3290  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2610  coco/bbox_mAP_l: 0.3570  data_time: 0.0051  time: 0.0211
2025/05/11 11:50:19 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:08:21  time: 0.2873  data_time: 0.1403  memory: 2033  grad_norm: 2032.2670  loss: 1217.7841  loss_cls: 169.3893  loss_conf: 431.6344  loss_xy: 599.9806  loss_wh: 16.7798
2025/05/11 11:50:33 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:08:07  time: 0.2750  data_time: 0.1244  memory: 2033  grad_norm: 2160.1975  loss: 1511.7029  loss_cls: 211.5944  loss_conf: 536.7260  loss_xy: 739.8273  loss_wh: 23.5552
2025/05/11 11:50:44 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:50:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:50:47 - mmengine - INFO - bbox_mAP_copypaste: 0.307 0.585 0.288 -1.000 0.161 0.331
2025/05/11 11:50:47 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3070  coco/bbox_mAP_50: 0.5850  coco/bbox_mAP_75: 0.2880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1610  coco/bbox_mAP_l: 0.3310  data_time: 0.0054  time: 0.0204
2025/05/11 11:51:00 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:07:41  time: 0.2705  data_time: 0.1212  memory: 2033  grad_norm: 2124.1111  loss: 1390.4033  loss_cls: 205.1383  loss_conf: 473.4338  loss_xy: 689.1248  loss_wh: 22.7064
2025/05/11 11:51:14 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:07:26  time: 0.2760  data_time: 0.1289  memory: 2033  grad_norm: 2001.5277  loss: 1299.0638  loss_cls: 183.1064  loss_conf: 449.6831  loss_xy: 645.4020  loss_wh: 20.8723
2025/05/11 11:51:26 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:51:27 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:51:28 - mmengine - INFO - bbox_mAP_copypaste: 0.360 0.651 0.366 -1.000 0.243 0.388
2025/05/11 11:51:28 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.3600  coco/bbox_mAP_50: 0.6510  coco/bbox_mAP_75: 0.3660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.3880  data_time: 0.0046  time: 0.0200
2025/05/11 11:51:43 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:07:01  time: 0.2918  data_time: 0.1407  memory: 2033  grad_norm: 1953.2233  loss: 1362.8359  loss_cls: 196.9168  loss_conf: 458.0821  loss_xy: 686.2588  loss_wh: 21.5782
2025/05/11 11:51:56 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:06:47  time: 0.2745  data_time: 0.1271  memory: 2033  grad_norm: 1952.2566  loss: 1343.6904  loss_cls: 182.1530  loss_conf: 471.3761  loss_xy: 671.9033  loss_wh: 18.2579
2025/05/11 11:52:08 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:52:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:52:10 - mmengine - INFO - bbox_mAP_copypaste: 0.329 0.610 0.321 -1.000 0.250 0.347
2025/05/11 11:52:10 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.3290  coco/bbox_mAP_50: 0.6100  coco/bbox_mAP_75: 0.3210  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2500  coco/bbox_mAP_l: 0.3470  data_time: 0.0047  time: 0.0200
2025/05/11 11:52:24 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:06:21  time: 0.2753  data_time: 0.1278  memory: 2033  grad_norm: 2081.2351  loss: 1296.4563  loss_cls: 190.6143  loss_conf: 442.5298  loss_xy: 643.2214  loss_wh: 20.0908
2025/05/11 11:52:38 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:06:07  time: 0.2711  data_time: 0.1252  memory: 2033  grad_norm: 1787.5412  loss: 1220.0039  loss_cls: 165.1807  loss_conf: 428.4859  loss_xy: 609.0950  loss_wh: 17.2423
2025/05/11 11:52:49 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:52:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:52:51 - mmengine - INFO - bbox_mAP_copypaste: 0.271 0.565 0.207 -1.000 0.207 0.284
2025/05/11 11:52:51 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2710  coco/bbox_mAP_50: 0.5650  coco/bbox_mAP_75: 0.2070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.2840  data_time: 0.0050  time: 0.0198
2025/05/11 11:53:02 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:53:05 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:05:41  time: 0.2749  data_time: 0.1238  memory: 2033  grad_norm: 1908.0511  loss: 1299.4395  loss_cls: 172.7876  loss_conf: 449.3042  loss_xy: 656.3045  loss_wh: 21.0432
2025/05/11 11:53:19 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:05:27  time: 0.2884  data_time: 0.1346  memory: 2033  grad_norm: 1929.7111  loss: 1355.9765  loss_cls: 185.3670  loss_conf: 462.8515  loss_xy: 687.8176  loss_wh: 19.9405
2025/05/11 11:53:30 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:53:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:53:33 - mmengine - INFO - bbox_mAP_copypaste: 0.339 0.610 0.336 -1.000 0.258 0.356
2025/05/11 11:53:33 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3390  coco/bbox_mAP_50: 0.6100  coco/bbox_mAP_75: 0.3360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2580  coco/bbox_mAP_l: 0.3560  data_time: 0.0052  time: 0.0209
2025/05/11 11:53:47 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:05:02  time: 0.2835  data_time: 0.1329  memory: 2033  grad_norm: 1902.7045  loss: 1343.2716  loss_cls: 172.6484  loss_conf: 466.5193  loss_xy: 682.0310  loss_wh: 22.0728
2025/05/11 11:54:01 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:04:48  time: 0.2853  data_time: 0.1361  memory: 2033  grad_norm: 2050.2392  loss: 1388.9485  loss_cls: 180.2097  loss_conf: 474.7311  loss_xy: 708.8381  loss_wh: 25.1696
2025/05/11 11:54:13 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:54:14 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:54:15 - mmengine - INFO - bbox_mAP_copypaste: 0.346 0.624 0.344 -1.000 0.270 0.364
2025/05/11 11:54:16 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3460  coco/bbox_mAP_50: 0.6240  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2700  coco/bbox_mAP_l: 0.3640  data_time: 0.0046  time: 0.0200
2025/05/11 11:54:29 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:04:22  time: 0.2758  data_time: 0.1265  memory: 2033  grad_norm: 1825.3893  loss: 1262.4438  loss_cls: 155.2160  loss_conf: 433.4976  loss_xy: 652.9771  loss_wh: 20.7531
2025/05/11 11:54:44 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:04:08  time: 0.2897  data_time: 0.1434  memory: 2033  grad_norm: 2260.3312  loss: 1354.8025  loss_cls: 189.2300  loss_conf: 460.7843  loss_xy: 684.8417  loss_wh: 19.9465
2025/05/11 11:54:55 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:54:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:54:57 - mmengine - INFO - bbox_mAP_copypaste: 0.387 0.681 0.408 -1.000 0.248 0.414
2025/05/11 11:54:57 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3870  coco/bbox_mAP_50: 0.6810  coco/bbox_mAP_75: 0.4080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2480  coco/bbox_mAP_l: 0.4140  data_time: 0.0056  time: 0.0204
2025/05/11 11:54:57 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_16.pth is removed
2025/05/11 11:54:58 - mmengine - INFO - The best checkpoint with 0.3870 coco/bbox_mAP at 24 epoch is saved to best_coco_bbox_mAP_epoch_24.pth.
2025/05/11 11:55:12 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:03:43  time: 0.2755  data_time: 0.1201  memory: 2033  grad_norm: 1867.5997  loss: 1293.3411  loss_cls: 159.2368  loss_conf: 444.8646  loss_xy: 670.4240  loss_wh: 18.8157
2025/05/11 11:55:26 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:03:29  time: 0.2783  data_time: 0.1204  memory: 2033  grad_norm: 1970.2265  loss: 1301.0414  loss_cls: 173.9127  loss_conf: 446.3836  loss_xy: 662.1166  loss_wh: 18.6284
2025/05/11 11:55:38 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:55:39 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:55:41 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.618 0.339 -1.000 0.224 0.366
2025/05/11 11:55:41 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6180  coco/bbox_mAP_75: 0.3390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2240  coco/bbox_mAP_l: 0.3660  data_time: 0.0052  time: 0.0200
2025/05/11 11:55:55 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:03:03  time: 0.2863  data_time: 0.1356  memory: 2033  grad_norm: 1841.8287  loss: 1237.1009  loss_cls: 150.9060  loss_conf: 431.8104  loss_xy: 634.4840  loss_wh: 19.9005
2025/05/11 11:56:10 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:02:49  time: 0.2859  data_time: 0.1350  memory: 2033  grad_norm: 1872.4955  loss: 1249.1445  loss_cls: 169.7288  loss_conf: 423.9918  loss_xy: 636.5914  loss_wh: 18.8325
2025/05/11 11:56:21 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:56:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:56:23 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.619 0.379 -1.000 0.288 0.376
2025/05/11 11:56:23 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.6190  coco/bbox_mAP_75: 0.3790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2880  coco/bbox_mAP_l: 0.3760  data_time: 0.0047  time: 0.0204
2025/05/11 11:56:37 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:02:24  time: 0.2772  data_time: 0.1352  memory: 2033  grad_norm: 1897.6837  loss: 1208.2930  loss_cls: 149.8861  loss_conf: 413.7906  loss_xy: 627.3782  loss_wh: 17.2381
2025/05/11 11:56:52 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:02:10  time: 0.2897  data_time: 0.1498  memory: 2033  grad_norm: 2016.3730  loss: 1343.8057  loss_cls: 190.2493  loss_conf: 456.9967  loss_xy: 676.9538  loss_wh: 19.6059
2025/05/11 11:57:02 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:57:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:57:05 - mmengine - INFO - bbox_mAP_copypaste: 0.338 0.620 0.326 -1.000 0.290 0.353
2025/05/11 11:57:05 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3380  coco/bbox_mAP_50: 0.6200  coco/bbox_mAP_75: 0.3260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2900  coco/bbox_mAP_l: 0.3530  data_time: 0.0048  time: 0.0201
2025/05/11 11:57:19 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:44  time: 0.2761  data_time: 0.1246  memory: 2033  grad_norm: 1830.1510  loss: 1287.1890  loss_cls: 156.8784  loss_conf: 438.3881  loss_xy: 673.6241  loss_wh: 18.2984
2025/05/11 11:57:32 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:01:30  time: 0.2689  data_time: 0.1269  memory: 2033  grad_norm: 1752.5721  loss: 1207.2358  loss_cls: 126.2996  loss_conf: 423.9861  loss_xy: 639.6606  loss_wh: 17.2896
2025/05/11 11:57:43 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:57:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:57:45 - mmengine - INFO - bbox_mAP_copypaste: 0.318 0.626 0.280 -1.000 0.209 0.337
2025/05/11 11:57:45 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.3180  coco/bbox_mAP_50: 0.6260  coco/bbox_mAP_75: 0.2800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2090  coco/bbox_mAP_l: 0.3370  data_time: 0.0055  time: 0.0210
2025/05/11 11:57:59 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:01:04  time: 0.2809  data_time: 0.1307  memory: 2033  grad_norm: 2041.3271  loss: 1310.5060  loss_cls: 176.2861  loss_conf: 438.4956  loss_xy: 675.7005  loss_wh: 20.0237
2025/05/11 11:58:00 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:58:14 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:50  time: 0.2926  data_time: 0.1474  memory: 2033  grad_norm: 1867.9004  loss: 1208.6603  loss_cls: 157.4120  loss_conf: 411.8144  loss_xy: 621.0591  loss_wh: 18.3748
2025/05/11 11:58:26 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:58:27 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:58:28 - mmengine - INFO - bbox_mAP_copypaste: 0.247 0.479 0.223 -1.000 0.193 0.260
2025/05/11 11:58:28 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2470  coco/bbox_mAP_50: 0.4790  coco/bbox_mAP_75: 0.2230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.2600  data_time: 0.0050  time: 0.0192
2025/05/11 11:58:42 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:25  time: 0.2688  data_time: 0.1237  memory: 2033  grad_norm: 1976.1922  loss: 1234.1909  loss_cls: 150.6195  loss_conf: 420.1650  loss_xy: 646.1588  loss_wh: 17.2476
2025/05/11 11:58:55 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:11  time: 0.2613  data_time: 0.1203  memory: 2033  grad_norm: 1888.1054  loss: 1229.7766  loss_cls: 156.1437  loss_conf: 414.9442  loss_xy: 641.9352  loss_wh: 16.7535
2025/05/11 11:59:06 - mmengine - INFO - Exp name: yolov3_pt_df_bal_20250511_113742
2025/05/11 11:59:06 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 11:59:09 - mmengine - INFO - Evaluating bbox...
2025/05/11 11:59:10 - mmengine - INFO - bbox_mAP_copypaste: 0.373 0.672 0.386 -1.000 0.247 0.400
2025/05/11 11:59:10 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.3730  coco/bbox_mAP_50: 0.6720  coco/bbox_mAP_75: 0.3860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2470  coco/bbox_mAP_l: 0.4000  data_time: 0.0031  time: 0.0212
