2025/05/11 20:41:10 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 354504561
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 354504561
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 20:41:11 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 20:41:12 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 20:41:12 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 20:41:13 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 20:41:13 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 20:41:13 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 20:41:13 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 20:41:13 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 20:41:13 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 20:41:26 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:54  time: 0.2571  data_time: 0.0914  memory: 2033  grad_norm: 3135.5261  loss: 5085.4153  loss_cls: 1655.0734  loss_conf: 2193.6465  loss_xy: 1155.2045  loss_wh: 81.4910
2025/05/11 20:41:34 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:25  time: 0.1619  data_time: 0.0028  memory: 2033  grad_norm: 3618.6540  loss: 3429.6712  loss_cls: 952.5615  loss_conf: 1379.9785  loss_xy: 1049.0372  loss_wh: 48.0940
2025/05/11 20:41:41 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:41:50 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:41:52 - mmengine - INFO - bbox_mAP_copypaste: 0.110 0.226 0.082 -1.000 0.071 0.114
2025/05/11 20:41:52 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1100  coco/bbox_mAP_50: 0.2260  coco/bbox_mAP_75: 0.0820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0710  coco/bbox_mAP_l: 0.1140  data_time: 0.1664  time: 0.1858
2025/05/11 20:41:53 - mmengine - INFO - The best checkpoint with 0.1100 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 20:42:01 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:39  time: 0.1668  data_time: 0.0057  memory: 2033  grad_norm: 3262.3886  loss: 2767.0551  loss_cls: 750.5864  loss_conf: 999.5246  loss_xy: 983.7275  loss_wh: 33.2166
2025/05/11 20:42:09 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:12:09  time: 0.1635  data_time: 0.0028  memory: 2033  grad_norm: 3226.4336  loss: 2523.6387  loss_cls: 632.0799  loss_conf: 913.3663  loss_xy: 947.5839  loss_wh: 30.6086
2025/05/11 20:42:16 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:42:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:42:18 - mmengine - INFO - bbox_mAP_copypaste: 0.198 0.381 0.176 -1.000 0.126 0.214
2025/05/11 20:42:18 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1980  coco/bbox_mAP_50: 0.3810  coco/bbox_mAP_75: 0.1760  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1260  coco/bbox_mAP_l: 0.2140  data_time: 0.0050  time: 0.0200
2025/05/11 20:42:18 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 20:42:20 - mmengine - INFO - The best checkpoint with 0.1980 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 20:42:28 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:32  time: 0.1683  data_time: 0.0052  memory: 2033  grad_norm: 3414.6469  loss: 2320.2963  loss_cls: 524.9519  loss_conf: 825.5319  loss_xy: 940.0743  loss_wh: 29.7382
2025/05/11 20:42:36 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:16  time: 0.1631  data_time: 0.0028  memory: 2033  grad_norm: 3601.9272  loss: 2407.3929  loss_cls: 544.3903  loss_conf: 854.1814  loss_xy: 979.3193  loss_wh: 29.5019
2025/05/11 20:42:43 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:42:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:42:45 - mmengine - INFO - bbox_mAP_copypaste: 0.242 0.452 0.227 -1.000 0.176 0.254
2025/05/11 20:42:45 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2420  coco/bbox_mAP_50: 0.4520  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1760  coco/bbox_mAP_l: 0.2540  data_time: 0.0048  time: 0.0192
2025/05/11 20:42:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 20:42:46 - mmengine - INFO - The best checkpoint with 0.2420 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 20:42:55 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:50  time: 0.1682  data_time: 0.0055  memory: 2033  grad_norm: 3719.6802  loss: 2200.6417  loss_cls: 467.0538  loss_conf: 767.0471  loss_xy: 941.4884  loss_wh: 25.0524
2025/05/11 20:43:03 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:36  time: 0.1567  data_time: 0.0028  memory: 2033  grad_norm: 3727.7983  loss: 2108.0601  loss_cls: 421.0184  loss_conf: 757.1617  loss_xy: 904.6478  loss_wh: 25.2322
2025/05/11 20:43:09 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:43:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:43:12 - mmengine - INFO - bbox_mAP_copypaste: 0.228 0.414 0.231 -1.000 0.166 0.242
2025/05/11 20:43:12 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2280  coco/bbox_mAP_50: 0.4140  coco/bbox_mAP_75: 0.2310  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1660  coco/bbox_mAP_l: 0.2420  data_time: 0.0035  time: 0.0190
2025/05/11 20:43:20 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:15  time: 0.1647  data_time: 0.0054  memory: 2033  grad_norm: 3611.6246  loss: 2029.9548  loss_cls: 382.5353  loss_conf: 705.8110  loss_xy: 918.3134  loss_wh: 23.2952
2025/05/11 20:43:28 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:10:04  time: 0.1603  data_time: 0.0028  memory: 2033  grad_norm: 3990.8035  loss: 2138.8014  loss_cls: 413.5876  loss_conf: 745.1200  loss_xy: 954.6814  loss_wh: 25.4124
2025/05/11 20:43:34 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:43:35 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:43:37 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.616 0.354 -1.000 0.229 0.367
2025/05/11 20:43:37 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6160  coco/bbox_mAP_75: 0.3540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2290  coco/bbox_mAP_l: 0.3670  data_time: 0.0045  time: 0.0197
2025/05/11 20:43:37 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 20:43:38 - mmengine - INFO - The best checkpoint with 0.3450 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 20:43:46 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:46  time: 0.1677  data_time: 0.0054  memory: 2033  grad_norm: 3664.0138  loss: 1966.8428  loss_cls: 351.9289  loss_conf: 671.4339  loss_xy: 920.8504  loss_wh: 22.6297
2025/05/11 20:43:54 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:35  time: 0.1579  data_time: 0.0028  memory: 2033  grad_norm: 4089.0359  loss: 1945.6061  loss_cls: 349.1128  loss_conf: 662.3727  loss_xy: 910.5015  loss_wh: 23.6191
2025/05/11 20:44:01 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:44:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:44:03 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.631 0.368 -1.000 0.178 0.393
2025/05/11 20:44:03 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.6310  coco/bbox_mAP_75: 0.3680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1780  coco/bbox_mAP_l: 0.3930  data_time: 0.0044  time: 0.0202
2025/05/11 20:44:03 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 20:44:05 - mmengine - INFO - The best checkpoint with 0.3610 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 20:44:13 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:19  time: 0.1720  data_time: 0.0053  memory: 2033  grad_norm: 3938.0412  loss: 1920.8106  loss_cls: 323.2980  loss_conf: 642.1968  loss_xy: 930.8155  loss_wh: 24.5004
2025/05/11 20:44:21 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:09:10  time: 0.1607  data_time: 0.0030  memory: 2033  grad_norm: 4091.3568  loss: 1878.4373  loss_cls: 308.3625  loss_conf: 637.5321  loss_xy: 906.4354  loss_wh: 26.1074
2025/05/11 20:44:28 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:44:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:44:30 - mmengine - INFO - bbox_mAP_copypaste: 0.350 0.645 0.345 -1.000 0.266 0.371
2025/05/11 20:44:30 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3500  coco/bbox_mAP_50: 0.6450  coco/bbox_mAP_75: 0.3450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2660  coco/bbox_mAP_l: 0.3710  data_time: 0.0055  time: 0.0200
2025/05/11 20:44:33 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:44:38 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:52  time: 0.1638  data_time: 0.0055  memory: 2033  grad_norm: 3880.5484  loss: 1784.4337  loss_cls: 294.1912  loss_conf: 580.0368  loss_xy: 888.8202  loss_wh: 21.3854
2025/05/11 20:44:46 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:43  time: 0.1605  data_time: 0.0029  memory: 2033  grad_norm: 4091.5483  loss: 1865.8453  loss_cls: 305.3632  loss_conf: 613.1061  loss_xy: 923.8915  loss_wh: 23.4846
2025/05/11 20:44:53 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:44:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:44:55 - mmengine - INFO - bbox_mAP_copypaste: 0.393 0.686 0.407 -1.000 0.228 0.421
2025/05/11 20:44:55 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3930  coco/bbox_mAP_50: 0.6860  coco/bbox_mAP_75: 0.4070  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2280  coco/bbox_mAP_l: 0.4210  data_time: 0.0049  time: 0.0197
2025/05/11 20:44:55 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 20:44:57 - mmengine - INFO - The best checkpoint with 0.3930 coco/bbox_mAP at 8 epoch is saved to best_coco_bbox_mAP_epoch_8.pth.
2025/05/11 20:45:05 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:27  time: 0.1686  data_time: 0.0057  memory: 2033  grad_norm: 3941.9931  loss: 1741.7945  loss_cls: 260.2403  loss_conf: 549.6496  loss_xy: 910.2840  loss_wh: 21.6207
2025/05/11 20:45:13 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:18  time: 0.1595  data_time: 0.0029  memory: 2033  grad_norm: 4371.2132  loss: 1734.8712  loss_cls: 277.5681  loss_conf: 540.6820  loss_xy: 893.2509  loss_wh: 23.3703
2025/05/11 20:45:19 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:45:20 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:45:22 - mmengine - INFO - bbox_mAP_copypaste: 0.310 0.581 0.280 -1.000 0.230 0.330
2025/05/11 20:45:22 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3100  coco/bbox_mAP_50: 0.5810  coco/bbox_mAP_75: 0.2800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3300  data_time: 0.0037  time: 0.0192
2025/05/11 20:45:30 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:08:02  time: 0.1634  data_time: 0.0055  memory: 2033  grad_norm: 4150.5027  loss: 1633.1853  loss_cls: 231.8973  loss_conf: 499.9270  loss_xy: 879.7830  loss_wh: 21.5780
2025/05/11 20:45:38 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:53  time: 0.1624  data_time: 0.0029  memory: 2033  grad_norm: 4669.0961  loss: 1773.2587  loss_cls: 276.6020  loss_conf: 528.5565  loss_xy: 945.8305  loss_wh: 22.2696
2025/05/11 20:45:45 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:45:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:45:47 - mmengine - INFO - bbox_mAP_copypaste: 0.254 0.577 0.167 -1.000 0.149 0.277
2025/05/11 20:45:47 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2540  coco/bbox_mAP_50: 0.5770  coco/bbox_mAP_75: 0.1670  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1490  coco/bbox_mAP_l: 0.2770  data_time: 0.0052  time: 0.0196
2025/05/11 20:45:55 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:37  time: 0.1625  data_time: 0.0054  memory: 2033  grad_norm: 4333.5740  loss: 1640.6085  loss_cls: 230.9763  loss_conf: 459.5357  loss_xy: 928.0181  loss_wh: 22.0784
2025/05/11 20:46:03 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:29  time: 0.1630  data_time: 0.0030  memory: 2033  grad_norm: 4486.1178  loss: 1560.5634  loss_cls: 209.9297  loss_conf: 451.4141  loss_xy: 879.4493  loss_wh: 19.7703
2025/05/11 20:46:10 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:46:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:46:12 - mmengine - INFO - bbox_mAP_copypaste: 0.265 0.491 0.252 -1.000 0.141 0.289
2025/05/11 20:46:12 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2650  coco/bbox_mAP_50: 0.4910  coco/bbox_mAP_75: 0.2520  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1410  coco/bbox_mAP_l: 0.2890  data_time: 0.0034  time: 0.0188
2025/05/11 20:46:20 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:13  time: 0.1614  data_time: 0.0054  memory: 2033  grad_norm: 4548.4578  loss: 1517.3146  loss_cls: 194.2589  loss_conf: 400.5090  loss_xy: 900.5369  loss_wh: 22.0098
2025/05/11 20:46:28 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:07:04  time: 0.1589  data_time: 0.0029  memory: 2033  grad_norm: 4930.5281  loss: 1559.5071  loss_cls: 217.3758  loss_conf: 424.4717  loss_xy: 896.3536  loss_wh: 21.3059
2025/05/11 20:46:35 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:46:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:46:37 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.611 0.348 -1.000 0.180 0.373
2025/05/11 20:46:37 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6110  coco/bbox_mAP_75: 0.3480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1800  coco/bbox_mAP_l: 0.3730  data_time: 0.0057  time: 0.0199
2025/05/11 20:46:45 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:49  time: 0.1641  data_time: 0.0056  memory: 2033  grad_norm: 4524.9719  loss: 1461.8815  loss_cls: 162.2800  loss_conf: 366.8501  loss_xy: 910.3152  loss_wh: 22.4362
2025/05/11 20:46:53 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:40  time: 0.1586  data_time: 0.0028  memory: 2033  grad_norm: 4940.4922  loss: 1449.2483  loss_cls: 170.6042  loss_conf: 374.2841  loss_xy: 880.9365  loss_wh: 23.4235
2025/05/11 20:47:00 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:47:01 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:47:02 - mmengine - INFO - bbox_mAP_copypaste: 0.338 0.607 0.349 -1.000 0.195 0.364
2025/05/11 20:47:02 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3380  coco/bbox_mAP_50: 0.6070  coco/bbox_mAP_75: 0.3490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1950  coco/bbox_mAP_l: 0.3640  data_time: 0.0045  time: 0.0192
2025/05/11 20:47:10 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:25  time: 0.1627  data_time: 0.0057  memory: 2033  grad_norm: 4307.2605  loss: 1266.6790  loss_cls: 117.0682  loss_conf: 278.7522  loss_xy: 849.5221  loss_wh: 21.3365
2025/05/11 20:47:18 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:16  time: 0.1604  data_time: 0.0029  memory: 2033  grad_norm: 5147.0002  loss: 1436.4389  loss_cls: 155.0110  loss_conf: 346.1086  loss_xy: 914.1628  loss_wh: 21.1565
2025/05/11 20:47:25 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:47:26 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:47:27 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.633 0.339 -1.000 0.175 0.376
2025/05/11 20:47:27 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6330  coco/bbox_mAP_75: 0.3390  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1750  coco/bbox_mAP_l: 0.3760  data_time: 0.0045  time: 0.0195
2025/05/11 20:47:32 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:47:36 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:06:01  time: 0.1656  data_time: 0.0056  memory: 2033  grad_norm: 4919.3014  loss: 1264.3768  loss_cls: 134.7689  loss_conf: 266.3170  loss_xy: 842.4774  loss_wh: 20.8134
2025/05/11 20:47:44 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:53  time: 0.1620  data_time: 0.0031  memory: 2033  grad_norm: 4838.6515  loss: 1355.2545  loss_cls: 114.2467  loss_conf: 297.8940  loss_xy: 921.2776  loss_wh: 21.8362
2025/05/11 20:47:51 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:47:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:47:53 - mmengine - INFO - bbox_mAP_copypaste: 0.289 0.566 0.246 -1.000 0.138 0.320
2025/05/11 20:47:53 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2890  coco/bbox_mAP_50: 0.5660  coco/bbox_mAP_75: 0.2460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1380  coco/bbox_mAP_l: 0.3200  data_time: 0.0036  time: 0.0193
2025/05/11 20:48:01 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:38  time: 0.1621  data_time: 0.0057  memory: 2033  grad_norm: 4303.5239  loss: 1163.1093  loss_cls: 89.0879  loss_conf: 209.6434  loss_xy: 843.1825  loss_wh: 21.1955
2025/05/11 20:48:09 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:30  time: 0.1598  data_time: 0.0030  memory: 2033  grad_norm: 4793.1150  loss: 1240.2692  loss_cls: 106.1358  loss_conf: 238.9746  loss_xy: 873.4256  loss_wh: 21.7332
2025/05/11 20:48:16 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:48:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:48:18 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.528 0.218 -1.000 0.162 0.289
2025/05/11 20:48:18 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5280  coco/bbox_mAP_75: 0.2180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1620  coco/bbox_mAP_l: 0.2890  data_time: 0.0035  time: 0.0181
2025/05/11 20:48:26 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:15  time: 0.1614  data_time: 0.0054  memory: 2033  grad_norm: 4475.3508  loss: 1183.7958  loss_cls: 81.9896  loss_conf: 195.6466  loss_xy: 879.7389  loss_wh: 26.4208
2025/05/11 20:48:34 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:06  time: 0.1608  data_time: 0.0028  memory: 2033  grad_norm: 5198.5650  loss: 1204.6758  loss_cls: 94.6263  loss_conf: 217.1950  loss_xy: 868.6699  loss_wh: 24.1845
2025/05/11 20:48:41 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:48:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:48:43 - mmengine - INFO - bbox_mAP_copypaste: 0.298 0.546 0.298 -1.000 0.158 0.330
2025/05/11 20:48:43 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2980  coco/bbox_mAP_50: 0.5460  coco/bbox_mAP_75: 0.2980  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.3300  data_time: 0.0034  time: 0.0196
2025/05/11 20:48:52 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:51  time: 0.1628  data_time: 0.0053  memory: 2033  grad_norm: 4392.9192  loss: 1167.8861  loss_cls: 62.3450  loss_conf: 181.3862  loss_xy: 900.8250  loss_wh: 23.3299
2025/05/11 20:48:59 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:43  time: 0.1575  data_time: 0.0028  memory: 2033  grad_norm: 4042.9901  loss: 1091.4537  loss_cls: 56.6127  loss_conf: 157.5842  loss_xy: 858.4214  loss_wh: 18.8354
2025/05/11 20:49:06 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:49:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:49:08 - mmengine - INFO - bbox_mAP_copypaste: 0.234 0.484 0.180 -1.000 0.114 0.272
2025/05/11 20:49:08 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2340  coco/bbox_mAP_50: 0.4840  coco/bbox_mAP_75: 0.1800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1140  coco/bbox_mAP_l: 0.2720  data_time: 0.0058  time: 0.0199
2025/05/11 20:49:17 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:28  time: 0.1657  data_time: 0.0055  memory: 2033  grad_norm: 4176.8829  loss: 1115.4188  loss_cls: 54.4372  loss_conf: 148.0352  loss_xy: 888.7686  loss_wh: 24.1777
2025/05/11 20:49:25 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:20  time: 0.1588  data_time: 0.0029  memory: 2033  grad_norm: 4421.7980  loss: 1093.8572  loss_cls: 59.4293  loss_conf: 149.0208  loss_xy: 861.8805  loss_wh: 23.5265
2025/05/11 20:49:31 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:49:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:49:34 - mmengine - INFO - bbox_mAP_copypaste: 0.293 0.535 0.285 -1.000 0.162 0.322
2025/05/11 20:49:34 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2930  coco/bbox_mAP_50: 0.5350  coco/bbox_mAP_75: 0.2850  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1620  coco/bbox_mAP_l: 0.3220  data_time: 0.0050  time: 0.0203
2025/05/11 20:49:42 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:05  time: 0.1639  data_time: 0.0060  memory: 2033  grad_norm: 4031.2184  loss: 1078.0805  loss_cls: 52.1769  loss_conf: 125.1682  loss_xy: 879.8941  loss_wh: 20.8412
2025/05/11 20:49:50 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:56  time: 0.1572  data_time: 0.0029  memory: 2033  grad_norm: 4376.9958  loss: 1063.8183  loss_cls: 54.7739  loss_conf: 126.9726  loss_xy: 859.9530  loss_wh: 22.1188
2025/05/11 20:49:56 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:49:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:49:59 - mmengine - INFO - bbox_mAP_copypaste: 0.281 0.524 0.268 -1.000 0.170 0.308
2025/05/11 20:49:59 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2810  coco/bbox_mAP_50: 0.5240  coco/bbox_mAP_75: 0.2680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1700  coco/bbox_mAP_l: 0.3080  data_time: 0.0045  time: 0.0193
2025/05/11 20:50:07 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:42  time: 0.1700  data_time: 0.0058  memory: 2033  grad_norm: 4055.2712  loss: 1078.5152  loss_cls: 46.1877  loss_conf: 103.3469  loss_xy: 900.0016  loss_wh: 28.9790
2025/05/11 20:50:15 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:33  time: 0.1587  data_time: 0.0029  memory: 2033  grad_norm: 3646.3766  loss: 1024.9221  loss_cls: 33.6300  loss_conf: 106.3332  loss_xy: 864.0583  loss_wh: 20.9006
2025/05/11 20:50:22 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:50:23 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:50:24 - mmengine - INFO - bbox_mAP_copypaste: 0.275 0.553 0.227 -1.000 0.140 0.301
2025/05/11 20:50:24 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2750  coco/bbox_mAP_50: 0.5530  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1400  coco/bbox_mAP_l: 0.3010  data_time: 0.0050  time: 0.0192
2025/05/11 20:50:31 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:50:32 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:18  time: 0.1674  data_time: 0.0052  memory: 2033  grad_norm: 3593.9520  loss: 1063.6032  loss_cls: 32.2858  loss_conf: 89.2627  loss_xy: 915.6517  loss_wh: 26.4030
2025/05/11 20:50:40 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:10  time: 0.1585  data_time: 0.0028  memory: 2033  grad_norm: 4147.3204  loss: 977.3299  loss_cls: 36.1512  loss_conf: 90.2280  loss_xy: 823.0856  loss_wh: 27.8651
2025/05/11 20:50:47 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:50:48 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:50:49 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.588 0.318 -1.000 0.168 0.355
2025/05/11 20:50:49 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.5880  coco/bbox_mAP_75: 0.3180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.3550  data_time: 0.0053  time: 0.0206
2025/05/11 20:50:58 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:55  time: 0.1649  data_time: 0.0054  memory: 2033  grad_norm: 3831.0230  loss: 1022.3733  loss_cls: 40.0022  loss_conf: 81.7067  loss_xy: 878.8518  loss_wh: 21.8126
2025/05/11 20:51:06 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:47  time: 0.1570  data_time: 0.0028  memory: 2033  grad_norm: 3775.0958  loss: 970.9325  loss_cls: 31.5396  loss_conf: 83.1064  loss_xy: 835.3045  loss_wh: 20.9821
2025/05/11 20:51:12 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:51:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:51:15 - mmengine - INFO - bbox_mAP_copypaste: 0.315 0.572 0.312 -1.000 0.175 0.342
2025/05/11 20:51:15 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.3150  coco/bbox_mAP_50: 0.5720  coco/bbox_mAP_75: 0.3120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1750  coco/bbox_mAP_l: 0.3420  data_time: 0.0052  time: 0.0195
2025/05/11 20:51:23 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:32  time: 0.1647  data_time: 0.0054  memory: 2033  grad_norm: 3645.0571  loss: 985.4820  loss_cls: 30.3810  loss_conf: 74.4341  loss_xy: 857.3299  loss_wh: 23.3370
2025/05/11 20:51:31 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:24  time: 0.1607  data_time: 0.0029  memory: 2033  grad_norm: 3646.0097  loss: 1034.0357  loss_cls: 30.7916  loss_conf: 75.7690  loss_xy: 907.4646  loss_wh: 20.0105
2025/05/11 20:51:37 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:51:38 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:51:40 - mmengine - INFO - bbox_mAP_copypaste: 0.282 0.514 0.278 -1.000 0.168 0.304
2025/05/11 20:51:40 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2820  coco/bbox_mAP_50: 0.5140  coco/bbox_mAP_75: 0.2780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.3040  data_time: 0.0051  time: 0.0199
2025/05/11 20:51:48 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:09  time: 0.1650  data_time: 0.0055  memory: 2033  grad_norm: 3789.0663  loss: 1033.5942  loss_cls: 31.4941  loss_conf: 63.6370  loss_xy: 910.6986  loss_wh: 27.7645
2025/05/11 20:51:56 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:02:01  time: 0.1578  data_time: 0.0029  memory: 2033  grad_norm: 3433.5960  loss: 958.8711  loss_cls: 23.7698  loss_conf: 58.4376  loss_xy: 846.1275  loss_wh: 30.5363
2025/05/11 20:52:03 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:52:04 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:52:05 - mmengine - INFO - bbox_mAP_copypaste: 0.255 0.555 0.168 -1.000 0.162 0.279
2025/05/11 20:52:05 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2550  coco/bbox_mAP_50: 0.5550  coco/bbox_mAP_75: 0.1680  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1620  coco/bbox_mAP_l: 0.2790  data_time: 0.0044  time: 0.0202
2025/05/11 20:52:14 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:46  time: 0.1654  data_time: 0.0052  memory: 2033  grad_norm: 3278.1028  loss: 984.7012  loss_cls: 20.4631  loss_conf: 53.8718  loss_xy: 880.4045  loss_wh: 29.9617
2025/05/11 20:52:21 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:38  time: 0.1584  data_time: 0.0029  memory: 2033  grad_norm: 3100.6748  loss: 973.9712  loss_cls: 18.4667  loss_conf: 49.8757  loss_xy: 876.8003  loss_wh: 28.8284
2025/05/11 20:52:28 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:52:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:52:30 - mmengine - INFO - bbox_mAP_copypaste: 0.255 0.533 0.174 -1.000 0.157 0.282
2025/05/11 20:52:30 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2550  coco/bbox_mAP_50: 0.5330  coco/bbox_mAP_75: 0.1740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1570  coco/bbox_mAP_l: 0.2820  data_time: 0.0049  time: 0.0194
2025/05/11 20:52:39 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:23  time: 0.1666  data_time: 0.0055  memory: 2033  grad_norm: 3133.1253  loss: 980.0720  loss_cls: 19.3204  loss_conf: 50.2005  loss_xy: 883.5042  loss_wh: 27.0470
2025/05/11 20:52:47 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:15  time: 0.1628  data_time: 0.0030  memory: 2033  grad_norm: 3324.9828  loss: 948.2038  loss_cls: 21.0535  loss_conf: 53.5527  loss_xy: 850.8045  loss_wh: 22.7932
2025/05/11 20:52:53 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:52:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:52:56 - mmengine - INFO - bbox_mAP_copypaste: 0.255 0.525 0.195 -1.000 0.146 0.283
2025/05/11 20:52:56 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2550  coco/bbox_mAP_50: 0.5250  coco/bbox_mAP_75: 0.1950  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1460  coco/bbox_mAP_l: 0.2830  data_time: 0.0044  time: 0.0196
2025/05/11 20:53:04 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:00  time: 0.1637  data_time: 0.0053  memory: 2033  grad_norm: 3085.2443  loss: 953.6298  loss_cls: 16.5224  loss_conf: 40.0316  loss_xy: 862.7351  loss_wh: 34.3407
2025/05/11 20:53:12 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:52  time: 0.1601  data_time: 0.0029  memory: 2033  grad_norm: 2913.6835  loss: 958.8638  loss_cls: 16.1930  loss_conf: 45.1412  loss_xy: 871.0377  loss_wh: 26.4919
2025/05/11 20:53:18 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:53:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:53:21 - mmengine - INFO - bbox_mAP_copypaste: 0.272 0.527 0.237 -1.000 0.157 0.299
2025/05/11 20:53:21 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2720  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.2370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1570  coco/bbox_mAP_l: 0.2990  data_time: 0.0048  time: 0.0196
2025/05/11 20:53:29 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:37  time: 0.1669  data_time: 0.0053  memory: 2033  grad_norm: 3039.3774  loss: 992.7284  loss_cls: 17.3739  loss_conf: 41.9231  loss_xy: 907.5611  loss_wh: 25.8703
2025/05/11 20:53:29 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:53:37 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:29  time: 0.1587  data_time: 0.0030  memory: 2033  grad_norm: 3361.4448  loss: 956.1127  loss_cls: 24.1165  loss_conf: 42.5007  loss_xy: 859.0965  loss_wh: 30.3990
2025/05/11 20:53:43 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:53:44 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:53:46 - mmengine - INFO - bbox_mAP_copypaste: 0.245 0.512 0.189 -1.000 0.141 0.270
2025/05/11 20:53:46 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2450  coco/bbox_mAP_50: 0.5120  coco/bbox_mAP_75: 0.1890  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1410  coco/bbox_mAP_l: 0.2700  data_time: 0.0044  time: 0.0194
2025/05/11 20:53:54 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1625  data_time: 0.0054  memory: 2033  grad_norm: 3092.6101  loss: 952.5460  loss_cls: 18.0591  loss_conf: 39.2603  loss_xy: 866.4036  loss_wh: 28.8231
2025/05/11 20:54:02 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1580  data_time: 0.0030  memory: 2033  grad_norm: 3072.8442  loss: 934.2691  loss_cls: 16.3703  loss_conf: 41.2870  loss_xy: 852.7107  loss_wh: 23.9011
2025/05/11 20:54:08 - mmengine - INFO - Exp name: yolov3_pt_pmd_20250511_204106
2025/05/11 20:54:08 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 20:54:12 - mmengine - INFO - Evaluating bbox...
2025/05/11 20:54:13 - mmengine - INFO - bbox_mAP_copypaste: 0.244 0.504 0.195 -1.000 0.111 0.277
2025/05/11 20:54:13 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2440  coco/bbox_mAP_50: 0.5040  coco/bbox_mAP_75: 0.1950  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1110  coco/bbox_mAP_l: 0.2770  data_time: 0.0026  time: 0.0200
