2025/05/10 19:12:08 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 464045564
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 464045564
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/10 19:12:08 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/10 19:12:09 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/10 19:12:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/10 19:12:10 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/10 19:12:10 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/10 19:12:11 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/10 19:12:11 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/10 19:12:11 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/10 19:12:11 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/10 19:12:23 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:45  time: 0.2550  data_time: 0.0925  memory: 2033  grad_norm: 2745.4624  loss: 4756.3679  loss_cls: 1530.5359  loss_conf: 2070.2338  loss_xy: 1078.6902  loss_wh: 76.9079
2025/05/10 19:12:31 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:07  time: 0.1554  data_time: 0.0021  memory: 2033  grad_norm: 3664.3596  loss: 3663.2085  loss_cls: 1010.5888  loss_conf: 1460.5781  loss_xy: 1141.6047  loss_wh: 50.4368
2025/05/10 19:12:38 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:12:47 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:12:48 - mmengine - INFO - bbox_mAP_copypaste: 0.109 0.235 0.073 -1.000 0.069 0.116
2025/05/10 19:12:48 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1090  coco/bbox_mAP_50: 0.2350  coco/bbox_mAP_75: 0.0730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0690  coco/bbox_mAP_l: 0.1160  data_time: 0.1677  time: 0.1864
2025/05/10 19:12:50 - mmengine - INFO - The best checkpoint with 0.1090 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/10 19:12:58 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:27  time: 0.1682  data_time: 0.0048  memory: 2033  grad_norm: 3233.0129  loss: 2742.7675  loss_cls: 726.0709  loss_conf: 990.6376  loss_xy: 993.6105  loss_wh: 32.4486
2025/05/10 19:13:06 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:52  time: 0.1541  data_time: 0.0023  memory: 2033  grad_norm: 3262.2688  loss: 2566.2464  loss_cls: 634.7363  loss_conf: 926.4417  loss_xy: 973.3340  loss_wh: 31.7344
2025/05/10 19:13:12 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:13:13 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:13:14 - mmengine - INFO - bbox_mAP_copypaste: 0.200 0.410 0.153 -1.000 0.140 0.217
2025/05/10 19:13:14 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.2000  coco/bbox_mAP_50: 0.4100  coco/bbox_mAP_75: 0.1530  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1400  coco/bbox_mAP_l: 0.2170  data_time: 0.0046  time: 0.0197
2025/05/10 19:13:14 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/10 19:13:16 - mmengine - INFO - The best checkpoint with 0.2000 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/10 19:13:24 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:11  time: 0.1583  data_time: 0.0048  memory: 2033  grad_norm: 3341.0885  loss: 2210.5226  loss_cls: 480.2448  loss_conf: 796.2999  loss_xy: 907.3969  loss_wh: 26.5809
2025/05/10 19:13:31 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:10:52  time: 0.1523  data_time: 0.0021  memory: 2033  grad_norm: 3565.3740  loss: 2225.4744  loss_cls: 504.5855  loss_conf: 776.6567  loss_xy: 916.7308  loss_wh: 27.5014
2025/05/10 19:13:38 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:13:39 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:13:40 - mmengine - INFO - bbox_mAP_copypaste: 0.258 0.470 0.262 -1.000 0.135 0.282
2025/05/10 19:13:40 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2580  coco/bbox_mAP_50: 0.4700  coco/bbox_mAP_75: 0.2620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1350  coco/bbox_mAP_l: 0.2820  data_time: 0.0044  time: 0.0194
2025/05/10 19:13:40 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/10 19:13:41 - mmengine - INFO - The best checkpoint with 0.2580 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/10 19:13:49 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:30  time: 0.1632  data_time: 0.0046  memory: 2033  grad_norm: 3667.7258  loss: 2056.1416  loss_cls: 394.2014  loss_conf: 730.5477  loss_xy: 906.2373  loss_wh: 25.1553
2025/05/10 19:13:57 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:17  time: 0.1554  data_time: 0.0022  memory: 2033  grad_norm: 3535.0505  loss: 2074.1357  loss_cls: 381.7726  loss_conf: 736.9918  loss_xy: 930.7599  loss_wh: 24.6114
2025/05/10 19:14:03 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:14:04 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:14:06 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.654 0.276 -1.000 0.207 0.356
2025/05/10 19:14:06 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.2760  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3560  data_time: 0.0038  time: 0.0190
2025/05/10 19:14:06 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/10 19:14:07 - mmengine - INFO - The best checkpoint with 0.3310 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/10 19:14:15 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:09:59  time: 0.1675  data_time: 0.0047  memory: 2033  grad_norm: 3654.8898  loss: 2029.9190  loss_cls: 339.3906  loss_conf: 716.3435  loss_xy: 950.0680  loss_wh: 24.1169
2025/05/10 19:14:23 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:48  time: 0.1541  data_time: 0.0023  memory: 2033  grad_norm: 3779.3814  loss: 1970.7309  loss_cls: 327.3493  loss_conf: 694.5436  loss_xy: 924.1746  loss_wh: 24.6634
2025/05/10 19:14:29 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:14:30 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:14:32 - mmengine - INFO - bbox_mAP_copypaste: 0.301 0.574 0.266 -1.000 0.187 0.320
2025/05/10 19:14:32 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3010  coco/bbox_mAP_50: 0.5740  coco/bbox_mAP_75: 0.2660  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1870  coco/bbox_mAP_l: 0.3200  data_time: 0.0044  time: 0.0194
2025/05/10 19:14:40 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:28  time: 0.1562  data_time: 0.0045  memory: 2033  grad_norm: 3481.9026  loss: 1801.0059  loss_cls: 280.3741  loss_conf: 617.9196  loss_xy: 880.7269  loss_wh: 21.9854
2025/05/10 19:14:47 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:18  time: 0.1539  data_time: 0.0023  memory: 2033  grad_norm: 3843.2054  loss: 1895.1275  loss_cls: 315.9603  loss_conf: 642.4058  loss_xy: 914.0547  loss_wh: 22.7067
2025/05/10 19:14:54 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:14:55 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:14:56 - mmengine - INFO - bbox_mAP_copypaste: 0.355 0.632 0.364 -1.000 0.204 0.383
2025/05/10 19:14:56 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3550  coco/bbox_mAP_50: 0.6320  coco/bbox_mAP_75: 0.3640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.3830  data_time: 0.0033  time: 0.0189
2025/05/10 19:14:56 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/10 19:14:57 - mmengine - INFO - The best checkpoint with 0.3550 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/10 19:15:05 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:02  time: 0.1632  data_time: 0.0048  memory: 2033  grad_norm: 3638.7513  loss: 1735.8018  loss_cls: 246.2418  loss_conf: 571.2075  loss_xy: 895.2040  loss_wh: 23.1485
2025/05/10 19:15:13 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:53  time: 0.1571  data_time: 0.0024  memory: 2033  grad_norm: 4019.1670  loss: 1778.3462  loss_cls: 272.6994  loss_conf: 587.2685  loss_xy: 896.4839  loss_wh: 21.8944
2025/05/10 19:15:20 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:15:21 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:15:22 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.594 0.361 -1.000 0.195 0.362
2025/05/10 19:15:22 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.5940  coco/bbox_mAP_75: 0.3610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1950  coco/bbox_mAP_l: 0.3620  data_time: 0.0033  time: 0.0191
2025/05/10 19:15:24 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:15:30 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:37  time: 0.1617  data_time: 0.0046  memory: 2033  grad_norm: 4034.3506  loss: 1751.2348  loss_cls: 253.9870  loss_conf: 545.8347  loss_xy: 930.8585  loss_wh: 20.5547
2025/05/10 19:15:38 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:28  time: 0.1539  data_time: 0.0022  memory: 2033  grad_norm: 3905.9284  loss: 1608.9680  loss_cls: 218.7732  loss_conf: 508.9347  loss_xy: 861.2710  loss_wh: 19.9892
2025/05/10 19:15:44 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:15:45 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:15:47 - mmengine - INFO - bbox_mAP_copypaste: 0.341 0.630 0.326 -1.000 0.207 0.366
2025/05/10 19:15:47 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3410  coco/bbox_mAP_50: 0.6300  coco/bbox_mAP_75: 0.3260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2070  coco/bbox_mAP_l: 0.3660  data_time: 0.0055  time: 0.0197
2025/05/10 19:15:55 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:12  time: 0.1620  data_time: 0.0048  memory: 2033  grad_norm: 4033.3280  loss: 1643.7775  loss_cls: 201.1089  loss_conf: 492.9724  loss_xy: 928.4703  loss_wh: 21.2257
2025/05/10 19:16:02 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:03  time: 0.1516  data_time: 0.0021  memory: 2033  grad_norm: 4453.1727  loss: 1535.3786  loss_cls: 207.3869  loss_conf: 461.4091  loss_xy: 846.5298  loss_wh: 20.0528
2025/05/10 19:16:09 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:16:10 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:16:11 - mmengine - INFO - bbox_mAP_copypaste: 0.329 0.593 0.326 -1.000 0.234 0.354
2025/05/10 19:16:11 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3290  coco/bbox_mAP_50: 0.5930  coco/bbox_mAP_75: 0.3260  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2340  coco/bbox_mAP_l: 0.3540  data_time: 0.0044  time: 0.0194
2025/05/10 19:16:19 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:48  time: 0.1638  data_time: 0.0046  memory: 2033  grad_norm: 4401.8867  loss: 1539.7110  loss_cls: 182.9824  loss_conf: 425.2264  loss_xy: 910.1993  loss_wh: 21.3028
2025/05/10 19:16:27 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:39  time: 0.1544  data_time: 0.0022  memory: 2033  grad_norm: 4366.3051  loss: 1468.5150  loss_cls: 169.5188  loss_conf: 417.5934  loss_xy: 861.9438  loss_wh: 19.4591
2025/05/10 19:16:33 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:16:34 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:16:36 - mmengine - INFO - bbox_mAP_copypaste: 0.342 0.661 0.291 -1.000 0.247 0.365
2025/05/10 19:16:36 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3420  coco/bbox_mAP_50: 0.6610  coco/bbox_mAP_75: 0.2910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2470  coco/bbox_mAP_l: 0.3650  data_time: 0.0049  time: 0.0189
2025/05/10 19:16:44 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:24  time: 0.1585  data_time: 0.0046  memory: 2033  grad_norm: 4393.1880  loss: 1422.5125  loss_cls: 134.3417  loss_conf: 370.1103  loss_xy: 897.6585  loss_wh: 20.4020
2025/05/10 19:16:52 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:16  time: 0.1550  data_time: 0.0022  memory: 2033  grad_norm: 5175.4747  loss: 1495.4853  loss_cls: 175.7566  loss_conf: 395.3736  loss_xy: 900.2185  loss_wh: 24.1366
2025/05/10 19:16:58 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:16:59 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:17:00 - mmengine - INFO - bbox_mAP_copypaste: 0.293 0.535 0.290 -1.000 0.174 0.314
2025/05/10 19:17:00 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2930  coco/bbox_mAP_50: 0.5350  coco/bbox_mAP_75: 0.2900  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1740  coco/bbox_mAP_l: 0.3140  data_time: 0.0038  time: 0.0189
2025/05/10 19:17:08 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:01  time: 0.1609  data_time: 0.0045  memory: 2033  grad_norm: 5271.3663  loss: 1414.0360  loss_cls: 159.6605  loss_conf: 325.6003  loss_xy: 903.3431  loss_wh: 25.4322
2025/05/10 19:17:16 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:52  time: 0.1560  data_time: 0.0021  memory: 2033  grad_norm: 4896.9379  loss: 1398.1726  loss_cls: 132.3327  loss_conf: 337.1689  loss_xy: 906.7548  loss_wh: 21.9161
2025/05/10 19:17:22 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:17:23 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:17:25 - mmengine - INFO - bbox_mAP_copypaste: 0.340 0.625 0.336 -1.000 0.203 0.368
2025/05/10 19:17:25 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3400  coco/bbox_mAP_50: 0.6250  coco/bbox_mAP_75: 0.3360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.3680  data_time: 0.0046  time: 0.0195
2025/05/10 19:17:33 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:37  time: 0.1622  data_time: 0.0045  memory: 2033  grad_norm: 4545.2533  loss: 1343.9605  loss_cls: 111.9353  loss_conf: 287.3573  loss_xy: 920.2459  loss_wh: 24.4220
2025/05/10 19:17:41 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:29  time: 0.1537  data_time: 0.0022  memory: 2033  grad_norm: 5202.3858  loss: 1324.7687  loss_cls: 122.7210  loss_conf: 289.1660  loss_xy: 892.8473  loss_wh: 20.0344
2025/05/10 19:17:47 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:17:48 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:17:49 - mmengine - INFO - bbox_mAP_copypaste: 0.322 0.619 0.292 -1.000 0.185 0.353
2025/05/10 19:17:49 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.3220  coco/bbox_mAP_50: 0.6190  coco/bbox_mAP_75: 0.2920  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1850  coco/bbox_mAP_l: 0.3530  data_time: 0.0036  time: 0.0193
2025/05/10 19:17:57 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:14  time: 0.1612  data_time: 0.0048  memory: 2033  grad_norm: 4694.4487  loss: 1236.4714  loss_cls: 89.3196  loss_conf: 235.8708  loss_xy: 887.9458  loss_wh: 23.3351
2025/05/10 19:18:05 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:06  time: 0.1536  data_time: 0.0023  memory: 2033  grad_norm: 5362.6353  loss: 1273.8488  loss_cls: 115.3202  loss_conf: 247.5914  loss_xy: 889.9867  loss_wh: 20.9506
2025/05/10 19:18:11 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:18:12 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:18:14 - mmengine - INFO - bbox_mAP_copypaste: 0.301 0.574 0.271 -1.000 0.208 0.324
2025/05/10 19:18:14 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3010  coco/bbox_mAP_50: 0.5740  coco/bbox_mAP_75: 0.2710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2080  coco/bbox_mAP_l: 0.3240  data_time: 0.0044  time: 0.0192
2025/05/10 19:18:18 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:18:22 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:51  time: 0.1597  data_time: 0.0047  memory: 2033  grad_norm: 4822.9001  loss: 1210.9055  loss_cls: 79.0599  loss_conf: 218.4024  loss_xy: 893.7142  loss_wh: 19.7290
2025/05/10 19:18:29 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:43  time: 0.1555  data_time: 0.0021  memory: 2033  grad_norm: 4572.6489  loss: 1199.1506  loss_cls: 78.7698  loss_conf: 213.4902  loss_xy: 886.4685  loss_wh: 20.4222
2025/05/10 19:18:36 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:18:37 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:18:38 - mmengine - INFO - bbox_mAP_copypaste: 0.291 0.588 0.227 -1.000 0.190 0.322
2025/05/10 19:18:38 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2910  coco/bbox_mAP_50: 0.5880  coco/bbox_mAP_75: 0.2270  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.3220  data_time: 0.0035  time: 0.0193
2025/05/10 19:18:46 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:28  time: 0.1586  data_time: 0.0047  memory: 2033  grad_norm: 4150.1808  loss: 1129.0314  loss_cls: 48.4898  loss_conf: 164.1000  loss_xy: 890.7613  loss_wh: 25.6804
2025/05/10 19:18:54 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:20  time: 0.1554  data_time: 0.0022  memory: 2033  grad_norm: 4674.8313  loss: 1166.4591  loss_cls: 59.6013  loss_conf: 186.2348  loss_xy: 894.9169  loss_wh: 25.7060
2025/05/10 19:19:00 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:19:01 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:19:03 - mmengine - INFO - bbox_mAP_copypaste: 0.283 0.578 0.218 -1.000 0.180 0.315
2025/05/10 19:19:03 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2830  coco/bbox_mAP_50: 0.5780  coco/bbox_mAP_75: 0.2180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1800  coco/bbox_mAP_l: 0.3150  data_time: 0.0046  time: 0.0190
2025/05/10 19:19:11 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:05  time: 0.1596  data_time: 0.0046  memory: 2033  grad_norm: 4132.5710  loss: 1084.9171  loss_cls: 49.9496  loss_conf: 138.3615  loss_xy: 876.8320  loss_wh: 19.7740
2025/05/10 19:19:18 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:04:57  time: 0.1528  data_time: 0.0023  memory: 2033  grad_norm: 4679.8690  loss: 1081.0485  loss_cls: 59.4428  loss_conf: 137.0957  loss_xy: 858.7352  loss_wh: 25.7748
2025/05/10 19:19:25 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:19:26 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:19:27 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.603 0.317 -1.000 0.195 0.353
2025/05/10 19:19:27 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.6030  coco/bbox_mAP_75: 0.3170  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1950  coco/bbox_mAP_l: 0.3530  data_time: 0.0033  time: 0.0189
2025/05/10 19:19:35 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:42  time: 0.1552  data_time: 0.0045  memory: 2033  grad_norm: 3590.2601  loss: 1011.4329  loss_cls: 28.6513  loss_conf: 107.2491  loss_xy: 850.5647  loss_wh: 24.9678
2025/05/10 19:19:43 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:34  time: 0.1556  data_time: 0.0022  memory: 2033  grad_norm: 4215.1577  loss: 1062.3132  loss_cls: 38.8250  loss_conf: 117.1859  loss_xy: 874.1976  loss_wh: 32.1048
2025/05/10 19:19:49 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:19:50 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:19:51 - mmengine - INFO - bbox_mAP_copypaste: 0.327 0.605 0.311 -1.000 0.176 0.355
2025/05/10 19:19:51 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.3270  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.3110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1760  coco/bbox_mAP_l: 0.3550  data_time: 0.0048  time: 0.0186
2025/05/10 19:19:59 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:20  time: 0.1576  data_time: 0.0051  memory: 2033  grad_norm: 3639.5943  loss: 984.8954  loss_cls: 28.6268  loss_conf: 88.1639  loss_xy: 842.9805  loss_wh: 25.1242
2025/05/10 19:20:07 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:12  time: 0.1548  data_time: 0.0022  memory: 2033  grad_norm: 4195.0212  loss: 1061.1754  loss_cls: 41.2716  loss_conf: 101.2875  loss_xy: 886.0138  loss_wh: 32.6025
2025/05/10 19:20:13 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:20:14 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:20:16 - mmengine - INFO - bbox_mAP_copypaste: 0.252 0.512 0.206 -1.000 0.147 0.277
2025/05/10 19:20:16 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2520  coco/bbox_mAP_50: 0.5120  coco/bbox_mAP_75: 0.2060  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2770  data_time: 0.0033  time: 0.0190
2025/05/10 19:20:24 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:03:57  time: 0.1554  data_time: 0.0046  memory: 2033  grad_norm: 3475.3807  loss: 929.1979  loss_cls: 25.3697  loss_conf: 72.6338  loss_xy: 804.3052  loss_wh: 26.8891
2025/05/10 19:20:31 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:49  time: 0.1546  data_time: 0.0021  memory: 2033  grad_norm: 3527.8509  loss: 1017.4045  loss_cls: 24.4135  loss_conf: 87.6862  loss_xy: 881.1967  loss_wh: 24.1080
2025/05/10 19:20:38 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:20:39 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:20:40 - mmengine - INFO - bbox_mAP_copypaste: 0.292 0.577 0.259 -1.000 0.156 0.334
2025/05/10 19:20:40 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2920  coco/bbox_mAP_50: 0.5770  coco/bbox_mAP_75: 0.2590  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1560  coco/bbox_mAP_l: 0.3340  data_time: 0.0048  time: 0.0192
2025/05/10 19:20:48 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:35  time: 0.1559  data_time: 0.0046  memory: 2033  grad_norm: 3175.2157  loss: 980.6903  loss_cls: 23.3293  loss_conf: 67.2336  loss_xy: 869.1478  loss_wh: 20.9796
2025/05/10 19:20:56 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:27  time: 0.1518  data_time: 0.0022  memory: 2033  grad_norm: 4177.9787  loss: 978.1254  loss_cls: 32.7560  loss_conf: 71.6267  loss_xy: 835.3489  loss_wh: 38.3937
2025/05/10 19:21:02 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:21:03 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:21:04 - mmengine - INFO - bbox_mAP_copypaste: 0.251 0.580 0.155 -1.000 0.162 0.268
2025/05/10 19:21:04 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2510  coco/bbox_mAP_50: 0.5800  coco/bbox_mAP_75: 0.1550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1620  coco/bbox_mAP_l: 0.2680  data_time: 0.0037  time: 0.0196
2025/05/10 19:21:11 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:21:12 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:12  time: 0.1595  data_time: 0.0051  memory: 2033  grad_norm: 3521.7066  loss: 949.8245  loss_cls: 25.4416  loss_conf: 55.1150  loss_xy: 837.8609  loss_wh: 31.4071
2025/05/10 19:21:20 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:04  time: 0.1556  data_time: 0.0022  memory: 2033  grad_norm: 3966.4945  loss: 1002.6673  loss_cls: 37.3887  loss_conf: 66.9066  loss_xy: 875.2843  loss_wh: 23.0877
2025/05/10 19:21:26 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:21:27 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:21:29 - mmengine - INFO - bbox_mAP_copypaste: 0.326 0.605 0.306 -1.000 0.178 0.357
2025/05/10 19:21:29 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.3260  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.3060  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1780  coco/bbox_mAP_l: 0.3570  data_time: 0.0044  time: 0.0189
2025/05/10 19:21:37 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:50  time: 0.1601  data_time: 0.0046  memory: 2033  grad_norm: 3265.5904  loss: 986.6860  loss_cls: 20.0910  loss_conf: 55.0315  loss_xy: 886.0381  loss_wh: 25.5255
2025/05/10 19:21:45 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:42  time: 0.1532  data_time: 0.0022  memory: 2033  grad_norm: 3525.7358  loss: 961.7437  loss_cls: 26.4520  loss_conf: 51.4286  loss_xy: 852.2817  loss_wh: 31.5814
2025/05/10 19:21:51 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:21:52 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:21:53 - mmengine - INFO - bbox_mAP_copypaste: 0.280 0.571 0.230 -1.000 0.186 0.299
2025/05/10 19:21:53 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2800  coco/bbox_mAP_50: 0.5710  coco/bbox_mAP_75: 0.2300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1860  coco/bbox_mAP_l: 0.2990  data_time: 0.0044  time: 0.0195
2025/05/10 19:22:01 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:27  time: 0.1565  data_time: 0.0045  memory: 2033  grad_norm: 2899.0737  loss: 922.7167  loss_cls: 15.6650  loss_conf: 42.7222  loss_xy: 841.8216  loss_wh: 22.5079
2025/05/10 19:22:09 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:20  time: 0.1543  data_time: 0.0022  memory: 2033  grad_norm: 3174.4312  loss: 965.5407  loss_cls: 16.9943  loss_conf: 51.0960  loss_xy: 871.8348  loss_wh: 25.6156
2025/05/10 19:22:15 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:22:16 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:22:18 - mmengine - INFO - bbox_mAP_copypaste: 0.235 0.549 0.145 -1.000 0.188 0.251
2025/05/10 19:22:18 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2350  coco/bbox_mAP_50: 0.5490  coco/bbox_mAP_75: 0.1450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1880  coco/bbox_mAP_l: 0.2510  data_time: 0.0050  time: 0.0199
2025/05/10 19:22:26 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:05  time: 0.1600  data_time: 0.0046  memory: 2033  grad_norm: 2773.0718  loss: 985.2453  loss_cls: 13.2846  loss_conf: 40.7920  loss_xy: 906.3651  loss_wh: 24.8036
2025/05/10 19:22:33 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:57  time: 0.1542  data_time: 0.0022  memory: 2033  grad_norm: 3494.1475  loss: 942.6308  loss_cls: 25.1644  loss_conf: 45.0876  loss_xy: 845.5547  loss_wh: 26.8241
2025/05/10 19:22:40 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:22:41 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:22:42 - mmengine - INFO - bbox_mAP_copypaste: 0.284 0.549 0.246 -1.000 0.168 0.312
2025/05/10 19:22:42 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2840  coco/bbox_mAP_50: 0.5490  coco/bbox_mAP_75: 0.2460  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1680  coco/bbox_mAP_l: 0.3120  data_time: 0.0054  time: 0.0199
2025/05/10 19:22:50 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:43  time: 0.1563  data_time: 0.0047  memory: 2033  grad_norm: 2988.2929  loss: 921.3146  loss_cls: 17.8906  loss_conf: 38.9969  loss_xy: 840.5195  loss_wh: 23.9076
2025/05/10 19:22:58 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:35  time: 0.1548  data_time: 0.0023  memory: 2033  grad_norm: 3038.5497  loss: 947.9191  loss_cls: 15.9045  loss_conf: 39.6787  loss_xy: 865.8256  loss_wh: 26.5104
2025/05/10 19:23:04 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:23:05 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:23:06 - mmengine - INFO - bbox_mAP_copypaste: 0.220 0.461 0.177 -1.000 0.093 0.245
2025/05/10 19:23:06 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2200  coco/bbox_mAP_50: 0.4610  coco/bbox_mAP_75: 0.1770  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0930  coco/bbox_mAP_l: 0.2450  data_time: 0.0051  time: 0.0199
2025/05/10 19:23:14 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:21  time: 0.1556  data_time: 0.0047  memory: 2033  grad_norm: 3171.9324  loss: 918.5371  loss_cls: 20.5998  loss_conf: 32.8827  loss_xy: 837.0071  loss_wh: 28.0476
2025/05/10 19:23:22 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:13  time: 0.1555  data_time: 0.0022  memory: 2033  grad_norm: 2901.7232  loss: 977.8000  loss_cls: 15.3523  loss_conf: 38.9181  loss_xy: 894.4105  loss_wh: 29.1191
2025/05/10 19:23:28 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:23:29 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:23:31 - mmengine - INFO - bbox_mAP_copypaste: 0.312 0.593 0.286 -1.000 0.200 0.338
2025/05/10 19:23:31 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3120  coco/bbox_mAP_50: 0.5930  coco/bbox_mAP_75: 0.2860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.3380  data_time: 0.0037  time: 0.0184
2025/05/10 19:23:38 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:58  time: 0.1579  data_time: 0.0047  memory: 2033  grad_norm: 2509.5999  loss: 909.3818  loss_cls: 9.6516  loss_conf: 32.0023  loss_xy: 841.6858  loss_wh: 26.0423
2025/05/10 19:23:46 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:50  time: 0.1592  data_time: 0.0020  memory: 2033  grad_norm: 2961.7152  loss: 991.0135  loss_cls: 13.0911  loss_conf: 38.5269  loss_xy: 916.4110  loss_wh: 22.9846
2025/05/10 19:23:53 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:23:54 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:23:55 - mmengine - INFO - bbox_mAP_copypaste: 0.278 0.563 0.224 -1.000 0.173 0.306
2025/05/10 19:23:55 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2780  coco/bbox_mAP_50: 0.5630  coco/bbox_mAP_75: 0.2240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1730  coco/bbox_mAP_l: 0.3060  data_time: 0.0048  time: 0.0188
2025/05/10 19:24:03 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:36  time: 0.1592  data_time: 0.0046  memory: 2033  grad_norm: 2545.5601  loss: 930.5398  loss_cls: 11.2332  loss_conf: 29.9241  loss_xy: 866.9396  loss_wh: 22.4428
2025/05/10 19:24:03 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:24:11 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:28  time: 0.1532  data_time: 0.0021  memory: 2033  grad_norm: 2596.1428  loss: 878.9020  loss_cls: 10.6481  loss_conf: 30.9606  loss_xy: 814.9021  loss_wh: 22.3912
2025/05/10 19:24:17 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:24:18 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:24:19 - mmengine - INFO - bbox_mAP_copypaste: 0.302 0.591 0.249 -1.000 0.194 0.326
2025/05/10 19:24:19 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.3020  coco/bbox_mAP_50: 0.5910  coco/bbox_mAP_75: 0.2490  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1940  coco/bbox_mAP_l: 0.3260  data_time: 0.0038  time: 0.0195
2025/05/10 19:24:27 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1598  data_time: 0.0045  memory: 2033  grad_norm: 2405.8619  loss: 964.2799  loss_cls: 8.3327  loss_conf: 25.1447  loss_xy: 901.8870  loss_wh: 28.9155
2025/05/10 19:24:35 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1560  data_time: 0.0021  memory: 2033  grad_norm: 2502.8263  loss: 926.8728  loss_cls: 10.2463  loss_conf: 29.1371  loss_xy: 859.5957  loss_wh: 27.8936
2025/05/10 19:24:41 - mmengine - INFO - Exp name: yolov3_pt_20250510_191203
2025/05/10 19:24:41 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/10 19:24:45 - mmengine - INFO - Evaluating bbox...
2025/05/10 19:24:46 - mmengine - INFO - bbox_mAP_copypaste: 0.270 0.552 0.220 -1.000 0.145 0.300
2025/05/10 19:24:46 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2700  coco/bbox_mAP_50: 0.5520  coco/bbox_mAP_75: 0.2200  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1450  coco/bbox_mAP_l: 0.3000  data_time: 0.0030  time: 0.0206
