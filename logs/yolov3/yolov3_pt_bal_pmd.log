2025/05/11 21:58:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 290450268
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 290450268
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 21:58:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        dataset=dict(
            ann_file='train/annotations.json',
            backend_args=None,
            data_prefix=dict(img='train/'),
            data_root='D:/Repositories/test/data/larch_casebearer/',
            metainfo=dict(
                classes=(
                    'H',
                    'LD',
                    'HD',
                    'other',
                ),
                palette=[
                    (
                        0,
                        255,
                        0,
                    ),
                    (
                        255,
                        128,
                        0,
                    ),
                    (
                        255,
                        0,
                        0,
                    ),
                    (
                        0,
                        0,
                        255,
                    ),
                ]),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(keep_ratio=True, scale=(
                    416,
                    416,
                ), type='Resize'),
                dict(type='PhotoMetricDistortion'),
                dict(type='PackDetInputs'),
            ],
            type='CocoDataset'),
        oversample_thr=0.25,
        type='ClassBalancedDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 21:58:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 21:58:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 21:58:39 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 21:58:39 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 21:58:39 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 21:58:39 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 21:58:39 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 21:58:39 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 21:58:52 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:18:16  time: 0.2624  data_time: 0.0935  memory: 2033  grad_norm: 3016.4477  loss: 5012.6980  loss_cls: 1626.5724  loss_conf: 2168.3255  loss_xy: 1131.7536  loss_wh: 86.0465
2025/05/11 21:59:00 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:14:30  time: 0.1589  data_time: 0.0029  memory: 2033  grad_norm: 3735.8783  loss: 3367.1453  loss_cls: 910.7674  loss_conf: 1343.9947  loss_xy: 1063.1168  loss_wh: 49.2665
2025/05/11 21:59:07 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 21:59:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:59:17 - mmengine - INFO - bbox_mAP_copypaste: 0.105 0.219 0.079 -1.000 0.082 0.106
2025/05/11 21:59:17 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.1050  coco/bbox_mAP_50: 0.2190  coco/bbox_mAP_75: 0.0790  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0820  coco/bbox_mAP_l: 0.1060  data_time: 0.1671  time: 0.1881
2025/05/11 21:59:19 - mmengine - INFO - The best checkpoint with 0.1050 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 21:59:27 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:46  time: 0.1705  data_time: 0.0056  memory: 2033  grad_norm: 3140.2211  loss: 2774.9767  loss_cls: 729.1832  loss_conf: 1023.3203  loss_xy: 988.8509  loss_wh: 33.6223
2025/05/11 21:59:35 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:12:17  time: 0.1666  data_time: 0.0029  memory: 2033  grad_norm: 3193.0697  loss: 2579.7780  loss_cls: 661.9872  loss_conf: 923.7823  loss_xy: 963.6934  loss_wh: 30.3152
2025/05/11 21:59:42 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 21:59:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 21:59:45 - mmengine - INFO - bbox_mAP_copypaste: 0.167 0.342 0.137 -1.000 0.112 0.186
2025/05/11 21:59:45 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1670  coco/bbox_mAP_50: 0.3420  coco/bbox_mAP_75: 0.1370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1120  coco/bbox_mAP_l: 0.1860  data_time: 0.0043  time: 0.0198
2025/05/11 21:59:45 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 21:59:46 - mmengine - INFO - The best checkpoint with 0.1670 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 21:59:54 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:11:36  time: 0.1646  data_time: 0.0054  memory: 2033  grad_norm: 3582.5455  loss: 2278.1496  loss_cls: 505.2757  loss_conf: 824.9188  loss_xy: 917.7082  loss_wh: 30.2468
2025/05/11 22:00:02 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:11:19  time: 0.1619  data_time: 0.0029  memory: 2033  grad_norm: 3535.8779  loss: 2353.0216  loss_cls: 520.1516  loss_conf: 830.3654  loss_xy: 973.8411  loss_wh: 28.6635
2025/05/11 22:00:09 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:00:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:00:11 - mmengine - INFO - bbox_mAP_copypaste: 0.230 0.459 0.183 -1.000 0.177 0.247
2025/05/11 22:00:11 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.2300  coco/bbox_mAP_50: 0.4590  coco/bbox_mAP_75: 0.1830  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1770  coco/bbox_mAP_l: 0.2470  data_time: 0.0046  time: 0.0200
2025/05/11 22:00:11 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 22:00:12 - mmengine - INFO - The best checkpoint with 0.2300 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 22:00:21 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:54  time: 0.1669  data_time: 0.0055  memory: 2033  grad_norm: 3832.5324  loss: 2107.8567  loss_cls: 431.9029  loss_conf: 747.4346  loss_xy: 902.0903  loss_wh: 26.4289
2025/05/11 22:00:29 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:10:40  time: 0.1595  data_time: 0.0029  memory: 2033  grad_norm: 3825.7891  loss: 2163.3280  loss_cls: 453.2654  loss_conf: 759.2877  loss_xy: 924.8751  loss_wh: 25.8998
2025/05/11 22:00:35 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:00:36 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:00:38 - mmengine - INFO - bbox_mAP_copypaste: 0.291 0.525 0.288 -1.000 0.191 0.314
2025/05/11 22:00:38 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2910  coco/bbox_mAP_50: 0.5250  coco/bbox_mAP_75: 0.2880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1910  coco/bbox_mAP_l: 0.3140  data_time: 0.0040  time: 0.0191
2025/05/11 22:00:38 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 22:00:39 - mmengine - INFO - The best checkpoint with 0.2910 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 22:00:47 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:10:20  time: 0.1686  data_time: 0.0054  memory: 2033  grad_norm: 3735.2383  loss: 2155.6307  loss_cls: 415.9113  loss_conf: 748.6474  loss_xy: 965.5949  loss_wh: 25.4772
2025/05/11 22:00:55 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:10:07  time: 0.1553  data_time: 0.0029  memory: 2033  grad_norm: 4037.6735  loss: 1976.4564  loss_cls: 379.7198  loss_conf: 699.3050  loss_xy: 875.0323  loss_wh: 22.3994
2025/05/11 22:01:02 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:01:03 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:01:04 - mmengine - INFO - bbox_mAP_copypaste: 0.330 0.601 0.328 -1.000 0.226 0.352
2025/05/11 22:01:04 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.3300  coco/bbox_mAP_50: 0.6010  coco/bbox_mAP_75: 0.3280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2260  coco/bbox_mAP_l: 0.3520  data_time: 0.0045  time: 0.0195
2025/05/11 22:01:04 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 22:01:05 - mmengine - INFO - The best checkpoint with 0.3300 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 22:01:14 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:49  time: 0.1683  data_time: 0.0054  memory: 2033  grad_norm: 3942.5703  loss: 2037.0875  loss_cls: 366.2750  loss_conf: 700.6485  loss_xy: 944.1845  loss_wh: 25.9794
2025/05/11 22:01:22 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:38  time: 0.1577  data_time: 0.0030  memory: 2033  grad_norm: 3887.7791  loss: 1862.7848  loss_cls: 323.3555  loss_conf: 638.6563  loss_xy: 878.8573  loss_wh: 21.9157
2025/05/11 22:01:28 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:01:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:01:31 - mmengine - INFO - bbox_mAP_copypaste: 0.362 0.679 0.340 -1.000 0.212 0.388
2025/05/11 22:01:31 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.3620  coco/bbox_mAP_50: 0.6790  coco/bbox_mAP_75: 0.3400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2120  coco/bbox_mAP_l: 0.3880  data_time: 0.0048  time: 0.0195
2025/05/11 22:01:31 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 22:01:32 - mmengine - INFO - The best checkpoint with 0.3620 coco/bbox_mAP at 6 epoch is saved to best_coco_bbox_mAP_epoch_6.pth.
2025/05/11 22:01:40 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:09:20  time: 0.1644  data_time: 0.0056  memory: 2033  grad_norm: 3936.2356  loss: 1801.2159  loss_cls: 317.8270  loss_conf: 588.4982  loss_xy: 873.9743  loss_wh: 20.9164
2025/05/11 22:01:48 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:09:10  time: 0.1597  data_time: 0.0030  memory: 2033  grad_norm: 4148.6361  loss: 1926.7323  loss_cls: 334.1961  loss_conf: 653.0125  loss_xy: 916.0517  loss_wh: 23.4720
2025/05/11 22:01:55 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:01:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:01:57 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.590 0.340 -1.000 0.184 0.357
2025/05/11 22:01:57 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.5900  coco/bbox_mAP_75: 0.3400  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.3570  data_time: 0.0039  time: 0.0194
2025/05/11 22:02:00 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:02:06 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:54  time: 0.1685  data_time: 0.0055  memory: 2033  grad_norm: 4103.6259  loss: 1797.7384  loss_cls: 299.4955  loss_conf: 577.8077  loss_xy: 897.4345  loss_wh: 23.0008
2025/05/11 22:02:14 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:45  time: 0.1603  data_time: 0.0030  memory: 2033  grad_norm: 4177.1773  loss: 1883.7664  loss_cls: 310.9768  loss_conf: 630.8872  loss_xy: 917.8408  loss_wh: 24.0616
2025/05/11 22:02:20 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:02:21 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:02:23 - mmengine - INFO - bbox_mAP_copypaste: 0.307 0.601 0.258 -1.000 0.202 0.329
2025/05/11 22:02:23 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.3070  coco/bbox_mAP_50: 0.6010  coco/bbox_mAP_75: 0.2580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2020  coco/bbox_mAP_l: 0.3290  data_time: 0.0042  time: 0.0193
2025/05/11 22:02:31 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:08:28  time: 0.1634  data_time: 0.0054  memory: 2033  grad_norm: 4273.0141  loss: 1740.9574  loss_cls: 271.8430  loss_conf: 553.0408  loss_xy: 893.8292  loss_wh: 22.2444
2025/05/11 22:02:39 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:08:19  time: 0.1580  data_time: 0.0030  memory: 2033  grad_norm: 4251.1554  loss: 1704.7339  loss_cls: 249.9573  loss_conf: 547.0369  loss_xy: 887.5794  loss_wh: 20.1603
2025/05/11 22:02:45 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:02:46 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:02:48 - mmengine - INFO - bbox_mAP_copypaste: 0.345 0.619 0.344 -1.000 0.230 0.367
2025/05/11 22:02:48 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.3450  coco/bbox_mAP_50: 0.6190  coco/bbox_mAP_75: 0.3440  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2300  coco/bbox_mAP_l: 0.3670  data_time: 0.0054  time: 0.0203
2025/05/11 22:02:56 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:08:03  time: 0.1641  data_time: 0.0056  memory: 2033  grad_norm: 4211.6709  loss: 1611.9809  loss_cls: 220.7250  loss_conf: 489.3642  loss_xy: 880.9691  loss_wh: 20.9225
2025/05/11 22:03:04 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:54  time: 0.1597  data_time: 0.0031  memory: 2033  grad_norm: 4370.3772  loss: 1694.0650  loss_cls: 231.3487  loss_conf: 519.0126  loss_xy: 922.7407  loss_wh: 20.9630
2025/05/11 22:03:10 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:03:11 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:03:13 - mmengine - INFO - bbox_mAP_copypaste: 0.325 0.581 0.334 -1.000 0.184 0.351
2025/05/11 22:03:13 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.3250  coco/bbox_mAP_50: 0.5810  coco/bbox_mAP_75: 0.3340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.3510  data_time: 0.0060  time: 0.0198
2025/05/11 22:03:21 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:38  time: 0.1662  data_time: 0.0055  memory: 2033  grad_norm: 4351.4208  loss: 1621.1191  loss_cls: 225.3557  loss_conf: 460.2895  loss_xy: 914.6454  loss_wh: 20.8285
2025/05/11 22:03:29 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:29  time: 0.1590  data_time: 0.0030  memory: 2033  grad_norm: 4652.9909  loss: 1584.9991  loss_cls: 219.8192  loss_conf: 465.2191  loss_xy: 880.1255  loss_wh: 19.8353
2025/05/11 22:03:36 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:03:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:03:38 - mmengine - INFO - bbox_mAP_copypaste: 0.316 0.603 0.286 -1.000 0.179 0.346
2025/05/11 22:03:38 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.3160  coco/bbox_mAP_50: 0.6030  coco/bbox_mAP_75: 0.2860  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.3460  data_time: 0.0061  time: 0.0199
2025/05/11 22:03:47 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:07:14  time: 0.1673  data_time: 0.0057  memory: 2033  grad_norm: 4554.3345  loss: 1510.6983  loss_cls: 186.5380  loss_conf: 416.2290  loss_xy: 887.4581  loss_wh: 20.4733
2025/05/11 22:03:55 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:07:05  time: 0.1597  data_time: 0.0029  memory: 2033  grad_norm: 4581.4554  loss: 1507.6403  loss_cls: 179.5034  loss_conf: 404.5065  loss_xy: 904.4404  loss_wh: 19.1901
2025/05/11 22:04:01 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:04:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:04:04 - mmengine - INFO - bbox_mAP_copypaste: 0.366 0.654 0.374 -1.000 0.215 0.392
2025/05/11 22:04:04 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.3660  coco/bbox_mAP_50: 0.6540  coco/bbox_mAP_75: 0.3740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2150  coco/bbox_mAP_l: 0.3920  data_time: 0.0048  time: 0.0199
2025/05/11 22:04:04 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_6.pth is removed
2025/05/11 22:04:05 - mmengine - INFO - The best checkpoint with 0.3660 coco/bbox_mAP at 12 epoch is saved to best_coco_bbox_mAP_epoch_12.pth.
2025/05/11 22:04:13 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:50  time: 0.1699  data_time: 0.0053  memory: 2033  grad_norm: 5223.9169  loss: 1557.8698  loss_cls: 193.5401  loss_conf: 393.5890  loss_xy: 949.7163  loss_wh: 21.0245
2025/05/11 22:04:21 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:41  time: 0.1581  data_time: 0.0028  memory: 2033  grad_norm: 4481.6939  loss: 1380.3144  loss_cls: 141.0372  loss_conf: 355.5635  loss_xy: 864.1273  loss_wh: 19.5864
2025/05/11 22:04:28 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:04:29 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:04:30 - mmengine - INFO - bbox_mAP_copypaste: 0.274 0.505 0.260 -1.000 0.158 0.302
2025/05/11 22:04:30 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2740  coco/bbox_mAP_50: 0.5050  coco/bbox_mAP_75: 0.2600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.3020  data_time: 0.0032  time: 0.0186
2025/05/11 22:04:39 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:26  time: 0.1672  data_time: 0.0054  memory: 2033  grad_norm: 4535.6557  loss: 1337.4021  loss_cls: 119.9297  loss_conf: 304.4958  loss_xy: 892.2870  loss_wh: 20.6897
2025/05/11 22:04:46 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:06:17  time: 0.1573  data_time: 0.0030  memory: 2033  grad_norm: 5217.8991  loss: 1399.7035  loss_cls: 142.6190  loss_conf: 341.9844  loss_xy: 892.2227  loss_wh: 22.8774
2025/05/11 22:04:53 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:04:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:04:56 - mmengine - INFO - bbox_mAP_copypaste: 0.313 0.607 0.280 -1.000 0.179 0.334
2025/05/11 22:04:56 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.3130  coco/bbox_mAP_50: 0.6070  coco/bbox_mAP_75: 0.2800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.3340  data_time: 0.0051  time: 0.0203
2025/05/11 22:05:00 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:05:04 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:06:02  time: 0.1657  data_time: 0.0055  memory: 2033  grad_norm: 4713.0884  loss: 1308.4864  loss_cls: 113.8068  loss_conf: 271.3487  loss_xy: 895.9475  loss_wh: 27.3834
2025/05/11 22:05:12 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:54  time: 0.1575  data_time: 0.0030  memory: 2033  grad_norm: 4830.1347  loss: 1268.8179  loss_cls: 102.5470  loss_conf: 267.1307  loss_xy: 876.2760  loss_wh: 22.8642
2025/05/11 22:05:18 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:05:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:05:21 - mmengine - INFO - bbox_mAP_copypaste: 0.208 0.496 0.151 -1.000 0.097 0.256
2025/05/11 22:05:21 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.2080  coco/bbox_mAP_50: 0.4960  coco/bbox_mAP_75: 0.1510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0970  coco/bbox_mAP_l: 0.2560  data_time: 0.0048  time: 0.0187
2025/05/11 22:05:29 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:39  time: 0.1628  data_time: 0.0055  memory: 2033  grad_norm: 4497.7685  loss: 1200.6522  loss_cls: 87.4383  loss_conf: 232.6587  loss_xy: 859.0925  loss_wh: 21.4627
2025/05/11 22:05:37 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:30  time: 0.1630  data_time: 0.0029  memory: 2033  grad_norm: 4700.4699  loss: 1252.5658  loss_cls: 95.9373  loss_conf: 244.2377  loss_xy: 890.6515  loss_wh: 21.7392
2025/05/11 22:05:44 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:05:45 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:05:46 - mmengine - INFO - bbox_mAP_copypaste: 0.298 0.548 0.288 -1.000 0.175 0.321
2025/05/11 22:05:46 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2980  coco/bbox_mAP_50: 0.5480  coco/bbox_mAP_75: 0.2880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1750  coco/bbox_mAP_l: 0.3210  data_time: 0.0037  time: 0.0194
2025/05/11 22:05:54 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:05:15  time: 0.1670  data_time: 0.0055  memory: 2033  grad_norm: 4669.5444  loss: 1239.0012  loss_cls: 85.6061  loss_conf: 199.1426  loss_xy: 930.2112  loss_wh: 24.0414
2025/05/11 22:06:02 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:05:07  time: 0.1606  data_time: 0.0029  memory: 2033  grad_norm: 4322.4086  loss: 1149.3199  loss_cls: 67.3675  loss_conf: 191.0868  loss_xy: 869.1517  loss_wh: 21.7138
2025/05/11 22:06:09 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:06:10 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:06:11 - mmengine - INFO - bbox_mAP_copypaste: 0.299 0.567 0.261 -1.000 0.164 0.329
2025/05/11 22:06:11 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2990  coco/bbox_mAP_50: 0.5670  coco/bbox_mAP_75: 0.2610  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1640  coco/bbox_mAP_l: 0.3290  data_time: 0.0045  time: 0.0194
2025/05/11 22:06:20 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:52  time: 0.1625  data_time: 0.0054  memory: 2033  grad_norm: 4244.4473  loss: 1135.6331  loss_cls: 58.8560  loss_conf: 159.7643  loss_xy: 891.8263  loss_wh: 25.1866
2025/05/11 22:06:27 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:43  time: 0.1584  data_time: 0.0029  memory: 2033  grad_norm: 4154.4915  loss: 1114.9804  loss_cls: 55.4780  loss_conf: 158.3459  loss_xy: 878.0658  loss_wh: 23.0907
2025/05/11 22:06:34 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:06:35 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:06:37 - mmengine - INFO - bbox_mAP_copypaste: 0.266 0.542 0.218 -1.000 0.155 0.304
2025/05/11 22:06:37 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2660  coco/bbox_mAP_50: 0.5420  coco/bbox_mAP_75: 0.2180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1550  coco/bbox_mAP_l: 0.3040  data_time: 0.0042  time: 0.0192
2025/05/11 22:06:45 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:29  time: 0.1665  data_time: 0.0055  memory: 2033  grad_norm: 4006.9846  loss: 1098.7493  loss_cls: 49.0038  loss_conf: 136.0678  loss_xy: 883.5210  loss_wh: 30.1566
2025/05/11 22:06:53 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:20  time: 0.1579  data_time: 0.0029  memory: 2033  grad_norm: 4219.6835  loss: 1081.0457  loss_cls: 49.2190  loss_conf: 140.7833  loss_xy: 863.5021  loss_wh: 27.5413
2025/05/11 22:06:59 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:07:00 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:07:02 - mmengine - INFO - bbox_mAP_copypaste: 0.255 0.502 0.235 -1.000 0.104 0.300
2025/05/11 22:07:02 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2550  coco/bbox_mAP_50: 0.5020  coco/bbox_mAP_75: 0.2350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1040  coco/bbox_mAP_l: 0.3000  data_time: 0.0046  time: 0.0190
2025/05/11 22:07:10 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:04:05  time: 0.1636  data_time: 0.0055  memory: 2033  grad_norm: 3820.1538  loss: 1060.5283  loss_cls: 40.9806  loss_conf: 111.2670  loss_xy: 879.5639  loss_wh: 28.7167
2025/05/11 22:07:18 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:57  time: 0.1605  data_time: 0.0029  memory: 2033  grad_norm: 4252.2567  loss: 1081.8491  loss_cls: 48.6723  loss_conf: 122.9190  loss_xy: 882.3680  loss_wh: 27.8899
2025/05/11 22:07:24 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:07:25 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:07:27 - mmengine - INFO - bbox_mAP_copypaste: 0.285 0.529 0.271 -1.000 0.128 0.319
2025/05/11 22:07:27 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2850  coco/bbox_mAP_50: 0.5290  coco/bbox_mAP_75: 0.2710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1280  coco/bbox_mAP_l: 0.3190  data_time: 0.0040  time: 0.0190
2025/05/11 22:07:35 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:42  time: 0.1628  data_time: 0.0055  memory: 2033  grad_norm: 3957.0748  loss: 1026.0780  loss_cls: 43.3321  loss_conf: 95.9127  loss_xy: 860.5020  loss_wh: 26.3311
2025/05/11 22:07:43 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:34  time: 0.1615  data_time: 0.0031  memory: 2033  grad_norm: 4107.1291  loss: 1054.6078  loss_cls: 44.9734  loss_conf: 106.9714  loss_xy: 874.3374  loss_wh: 28.3256
2025/05/11 22:07:50 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:07:51 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:07:52 - mmengine - INFO - bbox_mAP_copypaste: 0.272 0.534 0.232 -1.000 0.156 0.295
2025/05/11 22:07:52 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2720  coco/bbox_mAP_50: 0.5340  coco/bbox_mAP_75: 0.2320  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1560  coco/bbox_mAP_l: 0.2950  data_time: 0.0039  time: 0.0210
2025/05/11 22:07:59 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:08:00 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:19  time: 0.1641  data_time: 0.0057  memory: 2033  grad_norm: 3732.7756  loss: 990.6638  loss_cls: 33.6611  loss_conf: 87.6950  loss_xy: 844.9287  loss_wh: 24.3790
2025/05/11 22:08:09 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:03:11  time: 0.1627  data_time: 0.0028  memory: 2033  grad_norm: 4222.6720  loss: 1085.7349  loss_cls: 40.3733  loss_conf: 104.3838  loss_xy: 914.5717  loss_wh: 26.4061
2025/05/11 22:08:15 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:08:16 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:08:17 - mmengine - INFO - bbox_mAP_copypaste: 0.237 0.497 0.180 -1.000 0.152 0.256
2025/05/11 22:08:17 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2370  coco/bbox_mAP_50: 0.4970  coco/bbox_mAP_75: 0.1800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1520  coco/bbox_mAP_l: 0.2560  data_time: 0.0044  time: 0.0192
2025/05/11 22:08:26 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:56  time: 0.1633  data_time: 0.0056  memory: 2033  grad_norm: 3587.2371  loss: 1020.6755  loss_cls: 32.1214  loss_conf: 79.9174  loss_xy: 888.3107  loss_wh: 20.3261
2025/05/11 22:08:33 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:47  time: 0.1591  data_time: 0.0029  memory: 2033  grad_norm: 3895.0339  loss: 1000.7921  loss_cls: 37.5611  loss_conf: 84.4797  loss_xy: 859.0236  loss_wh: 19.7276
2025/05/11 22:08:40 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:08:41 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:08:43 - mmengine - INFO - bbox_mAP_copypaste: 0.263 0.564 0.171 -1.000 0.167 0.286
2025/05/11 22:08:43 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.2630  coco/bbox_mAP_50: 0.5640  coco/bbox_mAP_75: 0.1710  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.2860  data_time: 0.0051  time: 0.0199
2025/05/11 22:08:51 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:33  time: 0.1692  data_time: 0.0055  memory: 2033  grad_norm: 3548.7728  loss: 1035.0180  loss_cls: 21.8412  loss_conf: 69.5765  loss_xy: 911.4996  loss_wh: 32.1007
2025/05/11 22:08:59 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:24  time: 0.1567  data_time: 0.0028  memory: 2033  grad_norm: 3430.0215  loss: 955.6086  loss_cls: 23.5451  loss_conf: 61.9141  loss_xy: 834.8640  loss_wh: 35.2855
2025/05/11 22:09:05 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:09:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:09:08 - mmengine - INFO - bbox_mAP_copypaste: 0.305 0.553 0.303 -1.000 0.160 0.336
2025/05/11 22:09:08 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.3050  coco/bbox_mAP_50: 0.5530  coco/bbox_mAP_75: 0.3030  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1600  coco/bbox_mAP_l: 0.3360  data_time: 0.0042  time: 0.0194
2025/05/11 22:09:16 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:09  time: 0.1649  data_time: 0.0056  memory: 2033  grad_norm: 3519.7994  loss: 1000.9373  loss_cls: 30.5054  loss_conf: 59.8806  loss_xy: 884.2485  loss_wh: 26.3028
2025/05/11 22:09:24 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:02:01  time: 0.1595  data_time: 0.0030  memory: 2033  grad_norm: 3591.1309  loss: 989.0892  loss_cls: 28.9958  loss_conf: 62.7376  loss_xy: 876.0573  loss_wh: 21.2984
2025/05/11 22:09:30 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:09:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:09:33 - mmengine - INFO - bbox_mAP_copypaste: 0.293 0.541 0.288 -1.000 0.167 0.320
2025/05/11 22:09:33 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.2930  coco/bbox_mAP_50: 0.5410  coco/bbox_mAP_75: 0.2880  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1670  coco/bbox_mAP_l: 0.3200  data_time: 0.0055  time: 0.0198
2025/05/11 22:09:41 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:46  time: 0.1650  data_time: 0.0053  memory: 2033  grad_norm: 3513.3735  loss: 991.2281  loss_cls: 23.7231  loss_conf: 62.9181  loss_xy: 882.8245  loss_wh: 21.7624
2025/05/11 22:09:49 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:38  time: 0.1621  data_time: 0.0030  memory: 2033  grad_norm: 3529.7984  loss: 1003.9382  loss_cls: 25.4164  loss_conf: 64.1228  loss_xy: 893.1987  loss_wh: 21.2002
2025/05/11 22:09:56 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:09:57 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:09:58 - mmengine - INFO - bbox_mAP_copypaste: 0.243 0.532 0.162 -1.000 0.144 0.264
2025/05/11 22:09:58 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2430  coco/bbox_mAP_50: 0.5320  coco/bbox_mAP_75: 0.1620  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1440  coco/bbox_mAP_l: 0.2640  data_time: 0.0049  time: 0.0188
2025/05/11 22:10:06 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:23  time: 0.1672  data_time: 0.0055  memory: 2033  grad_norm: 3227.5487  loss: 971.4647  loss_cls: 17.4721  loss_conf: 55.2579  loss_xy: 873.6630  loss_wh: 25.0717
2025/05/11 22:10:14 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:15  time: 0.1578  data_time: 0.0031  memory: 2033  grad_norm: 3150.5857  loss: 931.0522  loss_cls: 19.5921  loss_conf: 50.1163  loss_xy: 836.8335  loss_wh: 24.5103
2025/05/11 22:10:21 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:10:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:10:23 - mmengine - INFO - bbox_mAP_copypaste: 0.222 0.511 0.160 -1.000 0.080 0.276
2025/05/11 22:10:23 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.2220  coco/bbox_mAP_50: 0.5110  coco/bbox_mAP_75: 0.1600  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0800  coco/bbox_mAP_l: 0.2760  data_time: 0.0040  time: 0.0191
2025/05/11 22:10:32 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:01:00  time: 0.1624  data_time: 0.0054  memory: 2033  grad_norm: 3310.0505  loss: 982.7459  loss_cls: 17.0071  loss_conf: 43.5912  loss_xy: 883.1548  loss_wh: 38.9927
2025/05/11 22:10:39 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:52  time: 0.1592  data_time: 0.0029  memory: 2033  grad_norm: 2698.7099  loss: 915.0555  loss_cls: 13.2619  loss_conf: 39.4854  loss_xy: 837.8095  loss_wh: 24.4987
2025/05/11 22:10:46 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:10:47 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:10:48 - mmengine - INFO - bbox_mAP_copypaste: 0.240 0.557 0.141 -1.000 0.147 0.267
2025/05/11 22:10:48 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2400  coco/bbox_mAP_50: 0.5570  coco/bbox_mAP_75: 0.1410  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1470  coco/bbox_mAP_l: 0.2670  data_time: 0.0033  time: 0.0193
2025/05/11 22:10:57 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:37  time: 0.1709  data_time: 0.0058  memory: 2033  grad_norm: 3122.0082  loss: 961.8264  loss_cls: 21.8615  loss_conf: 37.3904  loss_xy: 869.3758  loss_wh: 33.1988
2025/05/11 22:10:57 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:11:05 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:29  time: 0.1705  data_time: 0.0031  memory: 2033  grad_norm: 2921.9027  loss: 969.0728  loss_cls: 15.7578  loss_conf: 40.1285  loss_xy: 888.6587  loss_wh: 24.5277
2025/05/11 22:11:12 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:11:13 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:11:15 - mmengine - INFO - bbox_mAP_copypaste: 0.265 0.553 0.197 -1.000 0.166 0.284
2025/05/11 22:11:15 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2650  coco/bbox_mAP_50: 0.5530  coco/bbox_mAP_75: 0.1970  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1660  coco/bbox_mAP_l: 0.2840  data_time: 0.0048  time: 0.0203
2025/05/11 22:11:23 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:14  time: 0.1644  data_time: 0.0055  memory: 2033  grad_norm: 2776.4166  loss: 909.5270  loss_cls: 10.8605  loss_conf: 38.8803  loss_xy: 837.1638  loss_wh: 22.6224
2025/05/11 22:11:31 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1685  data_time: 0.0031  memory: 2033  grad_norm: 3007.1772  loss: 947.4868  loss_cls: 14.5180  loss_conf: 46.2518  loss_xy: 860.5539  loss_wh: 26.1630
2025/05/11 22:11:38 - mmengine - INFO - Exp name: yolov3_pt_bal_pmd_20250511_215832
2025/05/11 22:11:38 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 22:11:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:11:43 - mmengine - INFO - bbox_mAP_copypaste: 0.282 0.527 0.264 -1.000 0.170 0.311
2025/05/11 22:11:43 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2820  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.2640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1700  coco/bbox_mAP_l: 0.3110  data_time: 0.0036  time: 0.0211
