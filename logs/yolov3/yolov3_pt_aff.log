2025/05/11 22:34:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1212130858
    GPU 0: NVIDIA GeForce RTX 3070 Ti
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6
    NVCC: Cuda compilation tools, release 12.6, V12.6.85
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34433 for x64
    GCC: n/a
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /utf-8 /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1212130858
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/11 22:34:59 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        0,
        0,
        0,
    ],
    pad_size_divisor=32,
    std=[
        255.0,
        255.0,
        255.0,
    ],
    type='DetDataPreprocessor')
data_root = 'D:/Repositories/test/data/larch_casebearer/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=0, save_best='coco/bbox_mAP', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(
    classes=(
        'H',
        'LD',
        'HD',
        'other',
    ),
    palette=[
        (
            0,
            255,
            0,
        ),
        (
            255,
            128,
            0,
        ),
        (
            255,
            0,
            0,
        ),
        (
            0,
            0,
            255,
        ),
    ])
model = dict(
    backbone=dict(
        depth=53,
        init_cfg=dict(checkpoint='open-mmlab://darknet53', type='Pretrained'),
        out_indices=(
            3,
            4,
            5,
        ),
        type='Darknet'),
    bbox_head=dict(
        anchor_generator=dict(
            base_sizes=[
                [
                    (
                        116,
                        90,
                    ),
                    (
                        156,
                        198,
                    ),
                    (
                        373,
                        326,
                    ),
                ],
                [
                    (
                        30,
                        61,
                    ),
                    (
                        62,
                        45,
                    ),
                    (
                        59,
                        119,
                    ),
                ],
                [
                    (
                        10,
                        13,
                    ),
                    (
                        16,
                        30,
                    ),
                    (
                        33,
                        23,
                    ),
                ],
            ],
            strides=[
                32,
                16,
                8,
            ],
            type='YOLOAnchorGenerator'),
        bbox_coder=dict(type='YOLOBBoxCoder'),
        featmap_strides=[
            32,
            16,
            8,
        ],
        in_channels=[
            512,
            256,
            128,
        ],
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_conf=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_wh=dict(loss_weight=2.0, reduction='sum', type='MSELoss'),
        loss_xy=dict(
            loss_weight=2.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=4,
        out_channels=[
            1024,
            512,
            256,
        ],
        type='YOLOV3Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0,
            0,
            0,
        ],
        pad_size_divisor=32,
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            1024,
            512,
            256,
        ],
        num_scales=3,
        out_channels=[
            512,
            256,
            128,
        ],
        type='YOLOV3Neck'),
    test_cfg=dict(
        conf_thr=0.005,
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.45, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        assigner=dict(
            min_pos_iou=0,
            neg_iou_thr=0.5,
            pos_iou_thr=0.5,
            type='GridAssigner')),
    type='YOLOV3')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = [
    dict(begin=0, by_epoch=False, end=2000, start_factor=0.1, type='LinearLR'),
    dict(
        by_epoch=True, gamma=0.1, milestones=[
            218,
            246,
        ], type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='test/annotations.json',
        backend_args=None,
        data_prefix=dict(img='test/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/test/annotations.json',
    backend_args=None,
    classwise=True,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/annotations.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='RandomAffine'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        416,
        416,
    ), type='Resize'),
    dict(type='RandomAffine'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val/annotations.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='D:/Repositories/test/data/larch_casebearer/',
        metainfo=dict(
            classes=(
                'H',
                'LD',
                'HD',
                'other',
            ),
            palette=[
                (
                    0,
                    255,
                    0,
                ),
                (
                    255,
                    128,
                    0,
                ),
                (
                    255,
                    0,
                    0,
                ),
                (
                    0,
                    0,
                    255,
                ),
            ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                416,
                416,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='D:/Repositories/test/data/larch_casebearer/val/annotations.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '25-05-09/yolov3'

2025/05/11 22:35:00 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/11 22:35:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/11 22:35:01 - mmengine - INFO - load model from: open-mmlab://darknet53
2025/05/11 22:35:01 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://darknet53
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.conv.weight - torch.Size([32, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv1.bn.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.conv.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block1.res0.conv2.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.conv.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res0.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.conv.weight - torch.Size([64, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv1.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.conv.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block2.res1.conv2.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.conv.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res0.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res1.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res2.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res3.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res4.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res5.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res6.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv1.bn.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block3.res7.conv2.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.conv.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res0.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res1.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res2.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res3.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res4.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res5.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res6.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv1.bn.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block4.res7.conv2.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.conv.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res0.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res1.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res2.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv1.bn.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

backbone.conv_res_block5.res3.conv2.bn.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://darknet53 

neck.detect1.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv4.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv4.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect1.conv5.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect1.conv5.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv4.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv4.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect2.conv5.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect2.conv5.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv4.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv4.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.detect3.conv5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

neck.detect3.conv5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_bridge.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_bridge.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOV3  

bbox_head.convs_pred.0.weight - torch.Size([27, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.0.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.weight - torch.Size([27, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.1.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.weight - torch.Size([27, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOV3Head  

bbox_head.convs_pred.2.bias - torch.Size([27]): 
Initialized by user-defined `init_weights` in YOLOV3Head  
2025/05/11 22:35:01 - mmengine - INFO - Load checkpoint from D:/Repositories/test/25-05-09/yolov3/weights/yolov3_d53_mstrain-416_273e_coco-2b60fcd9.pth
2025/05/11 22:35:01 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/11 22:35:01 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/11 22:35:01 - mmengine - INFO - Checkpoints will be saved to D:\Repositories\test\25-05-09\yolov3.
2025/05/11 22:35:14 - mmengine - INFO - Epoch(train)  [1][ 50/141]  lr: 1.2206e-04  eta: 0:17:26  time: 0.2504  data_time: 0.0931  memory: 2033  grad_norm: 2900.7709  loss: 4407.6612  loss_cls: 1413.2338  loss_conf: 1899.1173  loss_xy: 970.0236  loss_wh: 125.2865
2025/05/11 22:35:21 - mmengine - INFO - Epoch(train)  [1][100/141]  lr: 1.4457e-04  eta: 0:13:42  time: 0.1481  data_time: 0.0022  memory: 2033  grad_norm: 3317.1814  loss: 3094.9011  loss_cls: 856.1003  loss_conf: 1240.7169  loss_xy: 909.3486  loss_wh: 88.7354
2025/05/11 22:35:27 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:35:37 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:35:38 - mmengine - INFO - bbox_mAP_copypaste: 0.073 0.174 0.036 -1.000 0.045 0.074
2025/05/11 22:35:38 - mmengine - INFO - Epoch(val) [1][49/49]    coco/bbox_mAP: 0.0730  coco/bbox_mAP_50: 0.1740  coco/bbox_mAP_75: 0.0360  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.0450  coco/bbox_mAP_l: 0.0740  data_time: 0.1688  time: 0.1892
2025/05/11 22:35:39 - mmengine - INFO - The best checkpoint with 0.0730 coco/bbox_mAP at 1 epoch is saved to best_coco_bbox_mAP_epoch_1.pth.
2025/05/11 22:35:47 - mmengine - INFO - Epoch(train)  [2][ 50/141]  lr: 1.8554e-04  eta: 0:12:01  time: 0.1604  data_time: 0.0050  memory: 2033  grad_norm: 3100.9959  loss: 2545.8122  loss_cls: 646.7355  loss_conf: 943.0841  loss_xy: 888.8812  loss_wh: 67.1114
2025/05/11 22:35:55 - mmengine - INFO - Epoch(train)  [2][100/141]  lr: 2.0805e-04  eta: 0:11:29  time: 0.1500  data_time: 0.0021  memory: 2033  grad_norm: 3010.7048  loss: 2233.6446  loss_cls: 548.7055  loss_conf: 829.9631  loss_xy: 802.5603  loss_wh: 52.4157
2025/05/11 22:36:01 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:36:02 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:36:03 - mmengine - INFO - bbox_mAP_copypaste: 0.164 0.335 0.135 -1.000 0.102 0.174
2025/05/11 22:36:03 - mmengine - INFO - Epoch(val) [2][49/49]    coco/bbox_mAP: 0.1640  coco/bbox_mAP_50: 0.3350  coco/bbox_mAP_75: 0.1350  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1020  coco/bbox_mAP_l: 0.1740  data_time: 0.0034  time: 0.0203
2025/05/11 22:36:03 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_1.pth is removed
2025/05/11 22:36:05 - mmengine - INFO - The best checkpoint with 0.1640 coco/bbox_mAP at 2 epoch is saved to best_coco_bbox_mAP_epoch_2.pth.
2025/05/11 22:36:13 - mmengine - INFO - Epoch(train)  [3][ 50/141]  lr: 2.4902e-04  eta: 0:10:52  time: 0.1578  data_time: 0.0048  memory: 2033  grad_norm: 3151.7073  loss: 2116.8700  loss_cls: 484.9721  loss_conf: 783.3348  loss_xy: 797.6225  loss_wh: 50.9406
2025/05/11 22:36:20 - mmengine - INFO - Epoch(train)  [3][100/141]  lr: 2.7154e-04  eta: 0:10:34  time: 0.1483  data_time: 0.0023  memory: 2033  grad_norm: 2938.7087  loss: 2007.4934  loss_cls: 443.3333  loss_conf: 737.2930  loss_xy: 779.6736  loss_wh: 47.1935
2025/05/11 22:36:26 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:36:27 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:36:29 - mmengine - INFO - bbox_mAP_copypaste: 0.175 0.343 0.148 -1.000 0.120 0.188
2025/05/11 22:36:29 - mmengine - INFO - Epoch(val) [3][49/49]    coco/bbox_mAP: 0.1750  coco/bbox_mAP_50: 0.3430  coco/bbox_mAP_75: 0.1480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1200  coco/bbox_mAP_l: 0.1880  data_time: 0.0043  time: 0.0202
2025/05/11 22:36:29 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_2.pth is removed
2025/05/11 22:36:30 - mmengine - INFO - The best checkpoint with 0.1750 coco/bbox_mAP at 3 epoch is saved to best_coco_bbox_mAP_epoch_3.pth.
2025/05/11 22:36:38 - mmengine - INFO - Epoch(train)  [4][ 50/141]  lr: 3.1251e-04  eta: 0:10:12  time: 0.1600  data_time: 0.0053  memory: 2033  grad_norm: 3214.5937  loss: 1997.1344  loss_cls: 440.3627  loss_conf: 722.4513  loss_xy: 788.1159  loss_wh: 46.2044
2025/05/11 22:36:45 - mmengine - INFO - Epoch(train)  [4][100/141]  lr: 3.3502e-04  eta: 0:09:58  time: 0.1484  data_time: 0.0023  memory: 2033  grad_norm: 3107.4854  loss: 1882.4353  loss_cls: 382.5724  loss_conf: 694.2111  loss_xy: 760.4093  loss_wh: 45.2423
2025/05/11 22:36:52 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:36:53 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:36:54 - mmengine - INFO - bbox_mAP_copypaste: 0.225 0.472 0.164 -1.000 0.149 0.239
2025/05/11 22:36:54 - mmengine - INFO - Epoch(val) [4][49/49]    coco/bbox_mAP: 0.2250  coco/bbox_mAP_50: 0.4720  coco/bbox_mAP_75: 0.1640  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1490  coco/bbox_mAP_l: 0.2390  data_time: 0.0039  time: 0.0196
2025/05/11 22:36:54 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_3.pth is removed
2025/05/11 22:36:55 - mmengine - INFO - The best checkpoint with 0.2250 coco/bbox_mAP at 4 epoch is saved to best_coco_bbox_mAP_epoch_4.pth.
2025/05/11 22:37:03 - mmengine - INFO - Epoch(train)  [5][ 50/141]  lr: 3.7599e-04  eta: 0:09:40  time: 0.1572  data_time: 0.0048  memory: 2033  grad_norm: 3134.2799  loss: 1829.1967  loss_cls: 363.0345  loss_conf: 668.8165  loss_xy: 754.7469  loss_wh: 42.5988
2025/05/11 22:37:11 - mmengine - INFO - Epoch(train)  [5][100/141]  lr: 3.9850e-04  eta: 0:09:29  time: 0.1500  data_time: 0.0022  memory: 2033  grad_norm: 3543.1719  loss: 1874.4543  loss_cls: 339.7036  loss_conf: 703.0808  loss_xy: 788.9859  loss_wh: 42.6839
2025/05/11 22:37:17 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:37:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:37:19 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.525 0.258 -1.000 0.181 0.307
2025/05/11 22:37:19 - mmengine - INFO - Epoch(val) [5][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5250  coco/bbox_mAP_75: 0.2580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1810  coco/bbox_mAP_l: 0.3070  data_time: 0.0046  time: 0.0202
2025/05/11 22:37:19 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_4.pth is removed
2025/05/11 22:37:21 - mmengine - INFO - The best checkpoint with 0.2790 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2025/05/11 22:37:29 - mmengine - INFO - Epoch(train)  [6][ 50/141]  lr: 4.3947e-04  eta: 0:09:12  time: 0.1583  data_time: 0.0049  memory: 2033  grad_norm: 3161.7386  loss: 1796.0959  loss_cls: 310.6035  loss_conf: 671.8876  loss_xy: 771.0685  loss_wh: 42.5364
2025/05/11 22:37:36 - mmengine - INFO - Epoch(train)  [6][100/141]  lr: 4.6198e-04  eta: 0:09:02  time: 0.1493  data_time: 0.0022  memory: 2033  grad_norm: 3168.9956  loss: 1790.3530  loss_cls: 297.1979  loss_conf: 665.0590  loss_xy: 787.7836  loss_wh: 40.3125
2025/05/11 22:37:42 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:37:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:37:45 - mmengine - INFO - bbox_mAP_copypaste: 0.277 0.535 0.255 -1.000 0.176 0.300
2025/05/11 22:37:45 - mmengine - INFO - Epoch(val) [6][49/49]    coco/bbox_mAP: 0.2770  coco/bbox_mAP_50: 0.5350  coco/bbox_mAP_75: 0.2550  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1760  coco/bbox_mAP_l: 0.3000  data_time: 0.0043  time: 0.0204
2025/05/11 22:37:52 - mmengine - INFO - Epoch(train)  [7][ 50/141]  lr: 5.0295e-04  eta: 0:08:45  time: 0.1554  data_time: 0.0047  memory: 2033  grad_norm: 3283.7954  loss: 1793.7325  loss_cls: 292.2404  loss_conf: 670.6297  loss_xy: 790.0814  loss_wh: 40.7810
2025/05/11 22:38:00 - mmengine - INFO - Epoch(train)  [7][100/141]  lr: 5.2546e-04  eta: 0:08:36  time: 0.1512  data_time: 0.0023  memory: 2033  grad_norm: 3050.7038  loss: 1736.1350  loss_cls: 292.4984  loss_conf: 642.5427  loss_xy: 759.3873  loss_wh: 41.7066
2025/05/11 22:38:06 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:38:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:38:09 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.583 0.215 -1.000 0.200 0.296
2025/05/11 22:38:09 - mmengine - INFO - Epoch(val) [7][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5830  coco/bbox_mAP_75: 0.2150  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.2960  data_time: 0.0038  time: 0.0194
2025/05/11 22:38:11 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:38:16 - mmengine - INFO - Epoch(train)  [8][ 50/141]  lr: 5.6643e-04  eta: 0:08:20  time: 0.1532  data_time: 0.0054  memory: 2033  grad_norm: 3007.3547  loss: 1661.9263  loss_cls: 270.4365  loss_conf: 596.6920  loss_xy: 750.1727  loss_wh: 44.6252
2025/05/11 22:38:24 - mmengine - INFO - Epoch(train)  [8][100/141]  lr: 5.8894e-04  eta: 0:08:12  time: 0.1508  data_time: 0.0021  memory: 2033  grad_norm: 2976.9445  loss: 1746.8721  loss_cls: 276.3263  loss_conf: 649.9420  loss_xy: 783.2799  loss_wh: 37.3239
2025/05/11 22:38:30 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:38:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:38:32 - mmengine - INFO - bbox_mAP_copypaste: 0.270 0.527 0.234 -1.000 0.185 0.291
2025/05/11 22:38:32 - mmengine - INFO - Epoch(val) [8][49/49]    coco/bbox_mAP: 0.2700  coco/bbox_mAP_50: 0.5270  coco/bbox_mAP_75: 0.2340  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1850  coco/bbox_mAP_l: 0.2910  data_time: 0.0046  time: 0.0194
2025/05/11 22:38:40 - mmengine - INFO - Epoch(train)  [9][ 50/141]  lr: 6.2991e-04  eta: 0:07:56  time: 0.1538  data_time: 0.0047  memory: 2033  grad_norm: 3176.3592  loss: 1658.3452  loss_cls: 247.8805  loss_conf: 618.4058  loss_xy: 748.9593  loss_wh: 43.0996
2025/05/11 22:38:47 - mmengine - INFO - Epoch(train)  [9][100/141]  lr: 6.5243e-04  eta: 0:07:47  time: 0.1491  data_time: 0.0020  memory: 2033  grad_norm: 3042.5854  loss: 1719.0131  loss_cls: 277.1370  loss_conf: 624.9069  loss_xy: 768.0171  loss_wh: 48.9521
2025/05/11 22:38:54 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:38:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:38:56 - mmengine - INFO - bbox_mAP_copypaste: 0.256 0.519 0.216 -1.000 0.190 0.264
2025/05/11 22:38:56 - mmengine - INFO - Epoch(val) [9][49/49]    coco/bbox_mAP: 0.2560  coco/bbox_mAP_50: 0.5190  coco/bbox_mAP_75: 0.2160  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.2640  data_time: 0.0038  time: 0.0193
2025/05/11 22:39:04 - mmengine - INFO - Epoch(train) [10][ 50/141]  lr: 6.9340e-04  eta: 0:07:33  time: 0.1568  data_time: 0.0046  memory: 2033  grad_norm: 2785.5089  loss: 1684.9019  loss_cls: 261.2905  loss_conf: 617.0353  loss_xy: 765.0268  loss_wh: 41.5493
2025/05/11 22:39:11 - mmengine - INFO - Epoch(train) [10][100/141]  lr: 7.1591e-04  eta: 0:07:24  time: 0.1489  data_time: 0.0033  memory: 2033  grad_norm: 2705.8063  loss: 1602.7682  loss_cls: 233.9289  loss_conf: 593.2750  loss_xy: 737.4689  loss_wh: 38.0955
2025/05/11 22:39:17 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:39:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:39:20 - mmengine - INFO - bbox_mAP_copypaste: 0.278 0.605 0.182 -1.000 0.179 0.297
2025/05/11 22:39:20 - mmengine - INFO - Epoch(val) [10][49/49]    coco/bbox_mAP: 0.2780  coco/bbox_mAP_50: 0.6050  coco/bbox_mAP_75: 0.1820  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1790  coco/bbox_mAP_l: 0.2970  data_time: 0.0034  time: 0.0192
2025/05/11 22:39:28 - mmengine - INFO - Epoch(train) [11][ 50/141]  lr: 7.5688e-04  eta: 0:07:10  time: 0.1535  data_time: 0.0048  memory: 2033  grad_norm: 3193.6033  loss: 1666.4145  loss_cls: 267.5497  loss_conf: 604.4800  loss_xy: 755.5118  loss_wh: 38.8731
2025/05/11 22:39:35 - mmengine - INFO - Epoch(train) [11][100/141]  lr: 7.7939e-04  eta: 0:07:01  time: 0.1468  data_time: 0.0023  memory: 2033  grad_norm: 2908.6004  loss: 1580.5347  loss_cls: 223.6005  loss_conf: 601.8433  loss_xy: 717.1927  loss_wh: 37.8982
2025/05/11 22:39:41 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:39:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:39:44 - mmengine - INFO - bbox_mAP_copypaste: 0.223 0.515 0.150 -1.000 0.181 0.240
2025/05/11 22:39:44 - mmengine - INFO - Epoch(val) [11][49/49]    coco/bbox_mAP: 0.2230  coco/bbox_mAP_50: 0.5150  coco/bbox_mAP_75: 0.1500  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1810  coco/bbox_mAP_l: 0.2400  data_time: 0.0040  time: 0.0194
2025/05/11 22:39:51 - mmengine - INFO - Epoch(train) [12][ 50/141]  lr: 8.2036e-04  eta: 0:06:46  time: 0.1531  data_time: 0.0049  memory: 2033  grad_norm: 2595.8575  loss: 1602.5570  loss_cls: 236.1802  loss_conf: 587.0625  loss_xy: 738.0827  loss_wh: 41.2316
2025/05/11 22:39:59 - mmengine - INFO - Epoch(train) [12][100/141]  lr: 8.4287e-04  eta: 0:06:38  time: 0.1505  data_time: 0.0023  memory: 2033  grad_norm: 2749.7894  loss: 1643.8028  loss_cls: 239.0786  loss_conf: 594.2116  loss_xy: 761.5569  loss_wh: 48.9558
2025/05/11 22:40:05 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:40:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:40:08 - mmengine - INFO - bbox_mAP_copypaste: 0.155 0.475 0.058 -1.000 0.145 0.168
2025/05/11 22:40:08 - mmengine - INFO - Epoch(val) [12][49/49]    coco/bbox_mAP: 0.1550  coco/bbox_mAP_50: 0.4750  coco/bbox_mAP_75: 0.0580  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1450  coco/bbox_mAP_l: 0.1680  data_time: 0.0036  time: 0.0194
2025/05/11 22:40:16 - mmengine - INFO - Epoch(train) [13][ 50/141]  lr: 8.8384e-04  eta: 0:06:24  time: 0.1561  data_time: 0.0047  memory: 2033  grad_norm: 2539.8076  loss: 1689.8057  loss_cls: 227.9153  loss_conf: 623.1942  loss_xy: 793.9537  loss_wh: 44.7424
2025/05/11 22:40:23 - mmengine - INFO - Epoch(train) [13][100/141]  lr: 9.0635e-04  eta: 0:06:16  time: 0.1500  data_time: 0.0022  memory: 2033  grad_norm: 2691.8243  loss: 1620.9777  loss_cls: 241.3835  loss_conf: 589.5563  loss_xy: 748.9792  loss_wh: 41.0587
2025/05/11 22:40:29 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:40:30 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:40:32 - mmengine - INFO - bbox_mAP_copypaste: 0.264 0.510 0.224 -1.000 0.155 0.290
2025/05/11 22:40:32 - mmengine - INFO - Epoch(val) [13][49/49]    coco/bbox_mAP: 0.2640  coco/bbox_mAP_50: 0.5100  coco/bbox_mAP_75: 0.2240  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1550  coco/bbox_mAP_l: 0.2900  data_time: 0.0038  time: 0.0193
2025/05/11 22:40:40 - mmengine - INFO - Epoch(train) [14][ 50/141]  lr: 9.4732e-04  eta: 0:06:02  time: 0.1578  data_time: 0.0047  memory: 2033  grad_norm: 3052.6613  loss: 1677.4497  loss_cls: 256.7168  loss_conf: 594.1253  loss_xy: 776.1380  loss_wh: 50.4696
2025/05/11 22:40:47 - mmengine - INFO - Epoch(train) [14][100/141]  lr: 9.6983e-04  eta: 0:05:54  time: 0.1475  data_time: 0.0031  memory: 2033  grad_norm: 2520.5620  loss: 1519.3615  loss_cls: 218.3493  loss_conf: 548.6195  loss_xy: 709.3884  loss_wh: 43.0043
2025/05/11 22:40:53 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:40:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:40:56 - mmengine - INFO - bbox_mAP_copypaste: 0.202 0.467 0.128 -1.000 0.132 0.211
2025/05/11 22:40:56 - mmengine - INFO - Epoch(val) [14][49/49]    coco/bbox_mAP: 0.2020  coco/bbox_mAP_50: 0.4670  coco/bbox_mAP_75: 0.1280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1320  coco/bbox_mAP_l: 0.2110  data_time: 0.0054  time: 0.0196
2025/05/11 22:41:00 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:41:04 - mmengine - INFO - Epoch(train) [15][ 50/141]  lr: 1.0000e-03  eta: 0:05:40  time: 0.1594  data_time: 0.0049  memory: 2033  grad_norm: 2601.4391  loss: 1610.0290  loss_cls: 239.4826  loss_conf: 575.7187  loss_xy: 745.7442  loss_wh: 49.0835
2025/05/11 22:41:11 - mmengine - INFO - Epoch(train) [15][100/141]  lr: 1.0000e-03  eta: 0:05:32  time: 0.1488  data_time: 0.0023  memory: 2033  grad_norm: 2425.6326  loss: 1581.0322  loss_cls: 213.1590  loss_conf: 584.6877  loss_xy: 741.2445  loss_wh: 41.9410
2025/05/11 22:41:17 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:41:18 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:41:20 - mmengine - INFO - bbox_mAP_copypaste: 0.175 0.483 0.077 -1.000 0.100 0.196
2025/05/11 22:41:20 - mmengine - INFO - Epoch(val) [15][49/49]    coco/bbox_mAP: 0.1750  coco/bbox_mAP_50: 0.4830  coco/bbox_mAP_75: 0.0770  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1000  coco/bbox_mAP_l: 0.1960  data_time: 0.0041  time: 0.0194
2025/05/11 22:41:27 - mmengine - INFO - Epoch(train) [16][ 50/141]  lr: 1.0000e-03  eta: 0:05:18  time: 0.1543  data_time: 0.0048  memory: 2033  grad_norm: 2492.0273  loss: 1601.5867  loss_cls: 212.0944  loss_conf: 583.0269  loss_xy: 759.2660  loss_wh: 47.1993
2025/05/11 22:41:35 - mmengine - INFO - Epoch(train) [16][100/141]  lr: 1.0000e-03  eta: 0:05:10  time: 0.1490  data_time: 0.0021  memory: 2033  grad_norm: 2565.0113  loss: 1608.7347  loss_cls: 227.7615  loss_conf: 587.3903  loss_xy: 746.0113  loss_wh: 47.5715
2025/05/11 22:41:41 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:41:42 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:41:44 - mmengine - INFO - bbox_mAP_copypaste: 0.246 0.585 0.142 -1.000 0.186 0.263
2025/05/11 22:41:44 - mmengine - INFO - Epoch(val) [16][49/49]    coco/bbox_mAP: 0.2460  coco/bbox_mAP_50: 0.5850  coco/bbox_mAP_75: 0.1420  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1860  coco/bbox_mAP_l: 0.2630  data_time: 0.0046  time: 0.0195
2025/05/11 22:41:51 - mmengine - INFO - Epoch(train) [17][ 50/141]  lr: 1.0000e-03  eta: 0:04:56  time: 0.1557  data_time: 0.0046  memory: 2033  grad_norm: 2655.2823  loss: 1610.9875  loss_cls: 231.1173  loss_conf: 572.7021  loss_xy: 767.3745  loss_wh: 39.7937
2025/05/11 22:41:59 - mmengine - INFO - Epoch(train) [17][100/141]  lr: 1.0000e-03  eta: 0:04:48  time: 0.1494  data_time: 0.0023  memory: 2033  grad_norm: 2562.6381  loss: 1571.7929  loss_cls: 227.2817  loss_conf: 577.0557  loss_xy: 730.5970  loss_wh: 36.8585
2025/05/11 22:42:05 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:42:06 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:42:08 - mmengine - INFO - bbox_mAP_copypaste: 0.237 0.529 0.147 -1.000 0.145 0.258
2025/05/11 22:42:08 - mmengine - INFO - Epoch(val) [17][49/49]    coco/bbox_mAP: 0.2370  coco/bbox_mAP_50: 0.5290  coco/bbox_mAP_75: 0.1470  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1450  coco/bbox_mAP_l: 0.2580  data_time: 0.0039  time: 0.0198
2025/05/11 22:42:15 - mmengine - INFO - Epoch(train) [18][ 50/141]  lr: 1.0000e-03  eta: 0:04:34  time: 0.1518  data_time: 0.0048  memory: 2033  grad_norm: 2361.3725  loss: 1568.0642  loss_cls: 226.1333  loss_conf: 565.3244  loss_xy: 738.9400  loss_wh: 37.6665
2025/05/11 22:42:23 - mmengine - INFO - Epoch(train) [18][100/141]  lr: 1.0000e-03  eta: 0:04:26  time: 0.1483  data_time: 0.0023  memory: 2033  grad_norm: 2265.3559  loss: 1551.6586  loss_cls: 204.8654  loss_conf: 563.5840  loss_xy: 739.6679  loss_wh: 43.5414
2025/05/11 22:42:29 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:42:30 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:42:31 - mmengine - INFO - bbox_mAP_copypaste: 0.273 0.543 0.245 -1.000 0.158 0.293
2025/05/11 22:42:31 - mmengine - INFO - Epoch(val) [18][49/49]    coco/bbox_mAP: 0.2730  coco/bbox_mAP_50: 0.5430  coco/bbox_mAP_75: 0.2450  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1580  coco/bbox_mAP_l: 0.2930  data_time: 0.0044  time: 0.0193
2025/05/11 22:42:39 - mmengine - INFO - Epoch(train) [19][ 50/141]  lr: 1.0000e-03  eta: 0:04:12  time: 0.1536  data_time: 0.0048  memory: 2033  grad_norm: 2257.5842  loss: 1513.4248  loss_cls: 203.3125  loss_conf: 550.3035  loss_xy: 724.3835  loss_wh: 35.4254
2025/05/11 22:42:47 - mmengine - INFO - Epoch(train) [19][100/141]  lr: 1.0000e-03  eta: 0:04:04  time: 0.1493  data_time: 0.0022  memory: 2033  grad_norm: 2181.6199  loss: 1586.5897  loss_cls: 215.6974  loss_conf: 567.9666  loss_xy: 761.7604  loss_wh: 41.1653
2025/05/11 22:42:53 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:42:54 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:42:55 - mmengine - INFO - bbox_mAP_copypaste: 0.272 0.614 0.189 -1.000 0.225 0.284
2025/05/11 22:42:55 - mmengine - INFO - Epoch(val) [19][49/49]    coco/bbox_mAP: 0.2720  coco/bbox_mAP_50: 0.6140  coco/bbox_mAP_75: 0.1890  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2250  coco/bbox_mAP_l: 0.2840  data_time: 0.0050  time: 0.0193
2025/05/11 22:43:03 - mmengine - INFO - Epoch(train) [20][ 50/141]  lr: 1.0000e-03  eta: 0:03:50  time: 0.1536  data_time: 0.0046  memory: 2033  grad_norm: 2288.7206  loss: 1474.2929  loss_cls: 202.0852  loss_conf: 526.8475  loss_xy: 709.1877  loss_wh: 36.1725
2025/05/11 22:43:11 - mmengine - INFO - Epoch(train) [20][100/141]  lr: 1.0000e-03  eta: 0:03:42  time: 0.1532  data_time: 0.0020  memory: 2033  grad_norm: 2290.7572  loss: 1625.4400  loss_cls: 216.6928  loss_conf: 581.7861  loss_xy: 784.7437  loss_wh: 42.2175
2025/05/11 22:43:17 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:43:17 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:43:19 - mmengine - INFO - bbox_mAP_copypaste: 0.247 0.546 0.170 -1.000 0.148 0.263
2025/05/11 22:43:19 - mmengine - INFO - Epoch(val) [20][49/49]    coco/bbox_mAP: 0.2470  coco/bbox_mAP_50: 0.5460  coco/bbox_mAP_75: 0.1700  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1480  coco/bbox_mAP_l: 0.2630  data_time: 0.0040  time: 0.0191
2025/05/11 22:43:27 - mmengine - INFO - Epoch(train) [21][ 50/141]  lr: 1.0000e-03  eta: 0:03:28  time: 0.1513  data_time: 0.0049  memory: 2033  grad_norm: 2281.3842  loss: 1611.3140  loss_cls: 210.6280  loss_conf: 580.0985  loss_xy: 777.7913  loss_wh: 42.7963
2025/05/11 22:43:34 - mmengine - INFO - Epoch(train) [21][100/141]  lr: 1.0000e-03  eta: 0:03:20  time: 0.1457  data_time: 0.0023  memory: 2033  grad_norm: 2303.7950  loss: 1505.6101  loss_cls: 198.3385  loss_conf: 544.9908  loss_xy: 721.6080  loss_wh: 40.6727
2025/05/11 22:43:40 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:43:41 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:43:43 - mmengine - INFO - bbox_mAP_copypaste: 0.280 0.549 0.248 -1.000 0.184 0.299
2025/05/11 22:43:43 - mmengine - INFO - Epoch(val) [21][49/49]    coco/bbox_mAP: 0.2800  coco/bbox_mAP_50: 0.5490  coco/bbox_mAP_75: 0.2480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1840  coco/bbox_mAP_l: 0.2990  data_time: 0.0047  time: 0.0198
2025/05/11 22:43:43 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_5.pth is removed
2025/05/11 22:43:44 - mmengine - INFO - The best checkpoint with 0.2800 coco/bbox_mAP at 21 epoch is saved to best_coco_bbox_mAP_epoch_21.pth.
2025/05/11 22:43:50 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:43:52 - mmengine - INFO - Epoch(train) [22][ 50/141]  lr: 1.0000e-03  eta: 0:03:06  time: 0.1601  data_time: 0.0047  memory: 2033  grad_norm: 2061.5737  loss: 1545.6352  loss_cls: 203.8492  loss_conf: 553.2504  loss_xy: 749.7980  loss_wh: 38.7375
2025/05/11 22:43:59 - mmengine - INFO - Epoch(train) [22][100/141]  lr: 1.0000e-03  eta: 0:02:59  time: 0.1499  data_time: 0.0023  memory: 2033  grad_norm: 2167.0179  loss: 1533.5422  loss_cls: 193.8422  loss_conf: 553.2649  loss_xy: 748.7928  loss_wh: 37.6423
2025/05/11 22:44:06 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:44:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:44:08 - mmengine - INFO - bbox_mAP_copypaste: 0.279 0.575 0.230 -1.000 0.165 0.298
2025/05/11 22:44:08 - mmengine - INFO - Epoch(val) [22][49/49]    coco/bbox_mAP: 0.2790  coco/bbox_mAP_50: 0.5750  coco/bbox_mAP_75: 0.2300  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1650  coco/bbox_mAP_l: 0.2980  data_time: 0.0042  time: 0.0204
2025/05/11 22:44:16 - mmengine - INFO - Epoch(train) [23][ 50/141]  lr: 1.0000e-03  eta: 0:02:45  time: 0.1540  data_time: 0.0047  memory: 2033  grad_norm: 2133.8359  loss: 1479.2735  loss_cls: 187.6524  loss_conf: 530.0627  loss_xy: 725.1547  loss_wh: 36.4036
2025/05/11 22:44:23 - mmengine - INFO - Epoch(train) [23][100/141]  lr: 1.0000e-03  eta: 0:02:37  time: 0.1503  data_time: 0.0022  memory: 2033  grad_norm: 2290.7176  loss: 1540.4218  loss_cls: 199.4637  loss_conf: 553.5857  loss_xy: 747.5537  loss_wh: 39.8188
2025/05/11 22:44:30 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:44:31 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:44:32 - mmengine - INFO - bbox_mAP_copypaste: 0.136 0.460 0.037 -1.000 0.193 0.131
2025/05/11 22:44:32 - mmengine - INFO - Epoch(val) [23][49/49]    coco/bbox_mAP: 0.1360  coco/bbox_mAP_50: 0.4600  coco/bbox_mAP_75: 0.0370  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.1310  data_time: 0.0042  time: 0.0189
2025/05/11 22:44:40 - mmengine - INFO - Epoch(train) [24][ 50/141]  lr: 1.0000e-03  eta: 0:02:23  time: 0.1541  data_time: 0.0048  memory: 2033  grad_norm: 2262.8497  loss: 1506.9447  loss_cls: 193.8369  loss_conf: 538.3466  loss_xy: 739.6567  loss_wh: 35.1045
2025/05/11 22:44:48 - mmengine - INFO - Epoch(train) [24][100/141]  lr: 1.0000e-03  eta: 0:02:15  time: 0.1523  data_time: 0.0025  memory: 2033  grad_norm: 2304.5766  loss: 1595.1404  loss_cls: 214.9667  loss_conf: 561.1910  loss_xy: 784.0696  loss_wh: 34.9132
2025/05/11 22:44:54 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:44:55 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:44:56 - mmengine - INFO - bbox_mAP_copypaste: 0.258 0.557 0.183 -1.000 0.174 0.279
2025/05/11 22:44:56 - mmengine - INFO - Epoch(val) [24][49/49]    coco/bbox_mAP: 0.2580  coco/bbox_mAP_50: 0.5570  coco/bbox_mAP_75: 0.1830  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1740  coco/bbox_mAP_l: 0.2790  data_time: 0.0046  time: 0.0193
2025/05/11 22:45:04 - mmengine - INFO - Epoch(train) [25][ 50/141]  lr: 1.0000e-03  eta: 0:02:01  time: 0.1558  data_time: 0.0047  memory: 2033  grad_norm: 2190.8162  loss: 1574.4284  loss_cls: 208.8102  loss_conf: 555.9183  loss_xy: 773.8328  loss_wh: 35.8671
2025/05/11 22:45:11 - mmengine - INFO - Epoch(train) [25][100/141]  lr: 1.0000e-03  eta: 0:01:54  time: 0.1492  data_time: 0.0021  memory: 2033  grad_norm: 2065.6450  loss: 1439.1139  loss_cls: 180.7912  loss_conf: 509.7615  loss_xy: 711.8096  loss_wh: 36.7517
2025/05/11 22:45:18 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:45:19 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:45:20 - mmengine - INFO - bbox_mAP_copypaste: 0.172 0.508 0.073 -1.000 0.124 0.187
2025/05/11 22:45:20 - mmengine - INFO - Epoch(val) [25][49/49]    coco/bbox_mAP: 0.1720  coco/bbox_mAP_50: 0.5080  coco/bbox_mAP_75: 0.0730  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1240  coco/bbox_mAP_l: 0.1870  data_time: 0.0034  time: 0.0196
2025/05/11 22:45:28 - mmengine - INFO - Epoch(train) [26][ 50/141]  lr: 1.0000e-03  eta: 0:01:40  time: 0.1533  data_time: 0.0049  memory: 2033  grad_norm: 2013.1916  loss: 1471.1164  loss_cls: 173.9978  loss_conf: 531.8427  loss_xy: 730.5188  loss_wh: 34.7570
2025/05/11 22:45:35 - mmengine - INFO - Epoch(train) [26][100/141]  lr: 1.0000e-03  eta: 0:01:32  time: 0.1506  data_time: 0.0022  memory: 2033  grad_norm: 2245.6125  loss: 1539.8495  loss_cls: 202.3043  loss_conf: 545.7948  loss_xy: 759.5623  loss_wh: 32.1881
2025/05/11 22:45:42 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:45:43 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:45:44 - mmengine - INFO - bbox_mAP_copypaste: 0.259 0.528 0.202 -1.000 0.217 0.269
2025/05/11 22:45:44 - mmengine - INFO - Epoch(val) [26][49/49]    coco/bbox_mAP: 0.2590  coco/bbox_mAP_50: 0.5280  coco/bbox_mAP_75: 0.2020  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2170  coco/bbox_mAP_l: 0.2690  data_time: 0.0034  time: 0.0191
2025/05/11 22:45:52 - mmengine - INFO - Epoch(train) [27][ 50/141]  lr: 1.0000e-03  eta: 0:01:18  time: 0.1531  data_time: 0.0047  memory: 2033  grad_norm: 2265.3176  loss: 1541.2752  loss_cls: 206.0328  loss_conf: 547.8761  loss_xy: 750.8508  loss_wh: 36.5155
2025/05/11 22:45:59 - mmengine - INFO - Epoch(train) [27][100/141]  lr: 1.0000e-03  eta: 0:01:10  time: 0.1504  data_time: 0.0022  memory: 2033  grad_norm: 2070.8418  loss: 1500.7538  loss_cls: 173.5527  loss_conf: 541.0662  loss_xy: 748.2867  loss_wh: 37.8482
2025/05/11 22:46:06 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:46:07 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:46:08 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.621 0.319 -1.000 0.243 0.348
2025/05/11 22:46:08 - mmengine - INFO - Epoch(val) [27][49/49]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.6210  coco/bbox_mAP_75: 0.3190  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.3480  data_time: 0.0039  time: 0.0194
2025/05/11 22:46:08 - mmengine - INFO - The previous best checkpoint D:\Repositories\test\25-05-09\yolov3\best_coco_bbox_mAP_epoch_21.pth is removed
2025/05/11 22:46:09 - mmengine - INFO - The best checkpoint with 0.3310 coco/bbox_mAP at 27 epoch is saved to best_coco_bbox_mAP_epoch_27.pth.
2025/05/11 22:46:17 - mmengine - INFO - Epoch(train) [28][ 50/141]  lr: 1.0000e-03  eta: 0:00:57  time: 0.1594  data_time: 0.0049  memory: 2033  grad_norm: 2247.1596  loss: 1468.7357  loss_cls: 189.9800  loss_conf: 512.7951  loss_xy: 729.7319  loss_wh: 36.2287
2025/05/11 22:46:25 - mmengine - INFO - Epoch(train) [28][100/141]  lr: 1.0000e-03  eta: 0:00:49  time: 0.1508  data_time: 0.0023  memory: 2033  grad_norm: 2197.4368  loss: 1535.1876  loss_cls: 194.3599  loss_conf: 547.0695  loss_xy: 759.5259  loss_wh: 34.2323
2025/05/11 22:46:31 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:46:32 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:46:33 - mmengine - INFO - bbox_mAP_copypaste: 0.237 0.535 0.148 -1.000 0.141 0.255
2025/05/11 22:46:33 - mmengine - INFO - Epoch(val) [28][49/49]    coco/bbox_mAP: 0.2370  coco/bbox_mAP_50: 0.5350  coco/bbox_mAP_75: 0.1480  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1410  coco/bbox_mAP_l: 0.2550  data_time: 0.0029  time: 0.0188
2025/05/11 22:46:41 - mmengine - INFO - Epoch(train) [29][ 50/141]  lr: 1.0000e-03  eta: 0:00:35  time: 0.1537  data_time: 0.0048  memory: 2033  grad_norm: 2172.0706  loss: 1450.8758  loss_cls: 161.9038  loss_conf: 515.4187  loss_xy: 740.9339  loss_wh: 32.6194
2025/05/11 22:46:41 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:46:49 - mmengine - INFO - Epoch(train) [29][100/141]  lr: 1.0000e-03  eta: 0:00:27  time: 0.1485  data_time: 0.0022  memory: 2033  grad_norm: 2189.8358  loss: 1447.5214  loss_cls: 170.9980  loss_conf: 512.1516  loss_xy: 730.2010  loss_wh: 34.1709
2025/05/11 22:46:55 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:46:56 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:46:57 - mmengine - INFO - bbox_mAP_copypaste: 0.294 0.547 0.284 -1.000 0.238 0.309
2025/05/11 22:46:57 - mmengine - INFO - Epoch(val) [29][49/49]    coco/bbox_mAP: 0.2940  coco/bbox_mAP_50: 0.5470  coco/bbox_mAP_75: 0.2840  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.2380  coco/bbox_mAP_l: 0.3090  data_time: 0.0041  time: 0.0201
2025/05/11 22:47:05 - mmengine - INFO - Epoch(train) [30][ 50/141]  lr: 1.0000e-03  eta: 0:00:13  time: 0.1580  data_time: 0.0048  memory: 2033  grad_norm: 2106.3201  loss: 1530.7176  loss_cls: 186.2137  loss_conf: 539.6698  loss_xy: 766.9684  loss_wh: 37.8657
2025/05/11 22:47:13 - mmengine - INFO - Epoch(train) [30][100/141]  lr: 1.0000e-03  eta: 0:00:06  time: 0.1505  data_time: 0.0022  memory: 2033  grad_norm: 2343.0729  loss: 1499.2449  loss_cls: 177.6146  loss_conf: 525.6138  loss_xy: 759.4262  loss_wh: 36.5903
2025/05/11 22:47:19 - mmengine - INFO - Exp name: yolov3_pt_aff_20250511_223454
2025/05/11 22:47:19 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/11 22:47:22 - mmengine - INFO - Evaluating bbox...
2025/05/11 22:47:24 - mmengine - INFO - bbox_mAP_copypaste: 0.210 0.424 0.174 -1.000 0.100 0.229
2025/05/11 22:47:24 - mmengine - INFO - Epoch(val) [30][49/49]    coco/bbox_mAP: 0.2100  coco/bbox_mAP_50: 0.4240  coco/bbox_mAP_75: 0.1740  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: 0.1000  coco/bbox_mAP_l: 0.2290  data_time: 0.0025  time: 0.0233
